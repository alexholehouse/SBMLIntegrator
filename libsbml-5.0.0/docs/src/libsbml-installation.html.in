<!-- ====================================================================== -->
<center>
<table border="0"><tr><td>
<a href="#quick">1. Quick start: avoid work by using ready-to-install binaries</a>

</td></tr><tr><td>
<a href="#detailed-unix">2. Procedures for Linux, Mac OS X, FreeBSD, Solaris and Cygwin</a>
<ul>
<li><a href="#unix-cmake">2.1 Configuring using CMake</a></li>
<li><a href="#unix-gnumake">2.2 Configuring using GNU make</a></li>
<ul>      
<li><a href="#unix-basics       ">2.2.a Basic configuration for Linux, Mac OS X, Solaris, and Cygwin</a></li>
<li><a href="#unix-bindings     ">2.2.b Enabling language interfaces for C#, Java, Perl, Python, MATLAB, Octave and Ruby</a></li>
<li><a href="#unix-32-64        ">2.2.c Creating 32- and/or 64-bit binaries</a></li>
<li><a href="#unix-universal    ">2.2.d Creating universal binaries on Mac OS X</a></li>
<li><a href="#unix-swig         ">2.2.e Configuring for SWIG</a></li>
<li><a href="#unix-compression  ">2.2.f Configuring support for compression</a></li>
<li><a href="#unix-docs         ">2.2.g Configuring for generating documentation</a></li>
<li><a href="#unix-unit-testing ">2.2.h Configuring for software unit testing</a></li>
</ul>

<li><a href="#unix-compiling">2.3 Compiling and installing</a></li>
</ul>

</td></tr><tr><td>
<a href="#detailed-windows">3. Procedures for Windows</a>
<ul>
<li><a href="#windows-configuring">3.1 Configuring using CMake</a></li>
<li><a href="#windows-compiling">3.2 Compiling and installing using MSVC</a></li>

</ul>

</td></tr><tr><td>
<a href="#locations">4. Files installed by libSBML, and their locations</a>

</td></tr>
</table>
</center>
<!-- ====================================================================== -->




<!-- ---------------------------------------------------------------------- -->
<h2><a class="anchor" name="quick">1. Quick start: avoid work by using ready-to-install binaries</a></h2>
<!-- ---------------------------------------------------------------------- -->

<p> Check the <a target="_blank"
href="http://sf.net/projects/sbml/files/libsbml/@PACKAGE_VERSION@">download
site for libSBML on SourceForge.net</a> for possible installation packages
for your operating system.  We supply ready-to-install precompiled binaries
for many systems, so that you may be able to save yourself the time and
trouble of following the remaining instructions on this page.


<!-- ---------------------------------------------------------------------- -->
<h2><a class="anchor" name="detailed-unix">2. Procedures for Linux, Mac OS X, FreeBSD, Solaris and Cygwin</a></h2>
<!-- ---------------------------------------------------------------------- -->

<p> If there is no installer for your system, or you prefer to build
libSBML from the source distribution, you can use one of two build systems:
<a target="_blank" href="http://www.cmake.org/">CMake</a>, or GNU make.
They are described separately below.

<p class="warning"> <em>Compatibility warning</em>: The default XML parser
library used by libSBML is <a target="_blank"
href="http://xmlsoft.org">libxml2</a>.  If you chose to use another XML
parser library instead, beware there is a known bug in Xerces 2.6.0 that
cannot be worked around at this time and causes errors in software using
it.  Xerces versions 2.2 &#150; 2.5, and
2.7.0 and above, are known to work properly, and all Expat versions above
1.95.8 are also known to work.


<!-- ---------------------------------------------------------------------- -->
<h3><a class="anchor" name="unix-cmake">2.1 Configuring using CMake</a></h3>


<p> If you do not already have CMake installed on your system, please make
sure to download and install a copy of CMake version 2.8.4 or later from <a
target="_blank" href="http://www.cmake.org/">cmake.org</a> on your computer
system.  Then, download and unzip the libSBML source code archive from the
<a target="_blank"
href="http://sf.net/projects/sbml/files/libsbml/@PACKAGE_VERSION@">download
area on SourceForge.net</a> and save the archive somewhere on your file
system, then unpack it.  Next, start up the CMake graphical user interface
(GUI).  It will look something like the following screenshot:

<center style="padding-bottom: 1.5em; padding-top: 1em; width: 500px;
margin: 1em auto">
<img class="screenshot" src="cmake-empty-screenshot.png">
<p style="font-style: italic"> Screenshot of CMake when it first starts up.  Shown here is the
Mac&nbsp;OS&nbsp;X version of CMake; it will look similar but not identical
on other operating systems.
</center>

<p> Click on the <b>Browse Source...</b> button and navigate to the directory
where you unpacked the libSBML source code archive on your file system.
CMake should automatically fill in the next line, <b>Where to build the
binaries</b>, using a subdirectory named <code>build</code> within the
directory where your source code is located.  (If it does not, fill in the
field in the CMake interface yourself.)  Then, click on the
<b>Configure</b> button.  CMake should display a dialog similar to the
following.

<center style="padding-bottom: 1.5em; padding-top: 1em; margin: 1em auto">
<img class="screenshot" src="cmake-configure-macos.png">
<p style="font-style: italic; width: 500px"> Screenshot of the <b>Configure</b> screen
under Mac&nbsp;OS&nbsp;X.
</center>

<p> Unless you have special requirements, select the default choices of
"<b>Unix Makefiles</b>" and "<b>Use default native compilers</b>", then
click the <b>Done</b> button.  This will close the selection dialog,
whereupon CMake will read the libSBML configuration files and populate the
options area in the CMake window with various libSBML options.  These new
options are displayed in red, as illustrated in the following screenshot.

<center style="padding-bottom: 1.5em; padding-top: 1em; margin: 1em auto">
<img class="screenshot" src="cmake-options-red.png"> <p style="font-style: italic; width: 500px">
Screenshot of the CMake interface after the configuration step.
</center>

<p> In this panel, you can set values for various libSBML configuration/build
options.  For example, you can set the location into which the compiled
libSBML libraries will be installed by clicking on the line for
<code>CMAKE_INSTALL_PREFIX</code> and replacing the default value with a
value of your choosing.  To find out the meaning of a particular option,
hover your mouse/pointer over the item for a few seconds until the tooltip
text appears.

<p> Select the options with which you wish to build libSBML.  All the
options for configuring libSBML, including language bindings and SBML
Level&nbsp;3 packages, are listed here and may be selected/deselected as
required.  For instance, to include the Java language bindings, click the
check-box for <code>WITH_JAVA</code>.

<p> Once you are done configuring, click on CMake's <b>Configure</b>
button.  This will cause CMake to process the configuration options, and if
it lacks any information, it will highlight the options in red, indicating
that you need to make additional choices or resolve conflicting choices.
You may need to iterate between setting options and clicking the
<b>Configure</b> button until there are no options left in red and the
<b>Generate</b> button becomes enabled.

<p> Next, click on the <b>Generate</b> button.  This will cause CMake to
create configuration files for the compilation environment you selected in
the beginning (e.g., Visual Studio under Windows, or regular Unix makefiles
under MacOS or Linux, and so on).  The files will be placed in the "build"
directory you indicated in the second line of the CMake GUI.

<p> Now please proceed to Section 2.3, <a
href="#unix-compiling"><i>Compiling and installing LibSBML</i></a>.



<!-- ---------------------------------------------------------------------- -->
<h3><a class="anchor" name="unix-gnumake">2.2 Configuring using GNU Make</a></h3>

<p> First, please download and unpack the libSBML source code archive
somewhere on your file system, and in a shell (terminal), <code>cd</code>
into the directory thereby created (e.g.,
<code>libsbml-@PACKAGE_VERSION@</code>).


<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-basics">2.2.a Basic configuration for Linux, Mac OS X, Solaris, and Cygwin</a></h4>

<p> If you <em>only</em> want to build the C and C++ interfaces and install
libSBML into <code>/usr/local</code> (the default), then configuring
libSBML is simply a matter of executing the following command:

<div class="fragment"><pre class="fragment">
  ./configure
</pre></div>

<p> LibSBML requires a separate XML library for low-level XML tokenizing
and Unicode support. It will by default attempt to use the <a
target="_blank" href="http://xmlsoft.org">libxml2</a> XML library; if you
do not have libxml2 version 2.6.16 or later on your system, the
<code>configure</code> program will terminate with an error explaining it
cannot find libxml2.  In that case, you can inform the
<code>configure</code> program to use the <a target="_blank"
href="http://expat.sourceforge.net/">Expat</a> or <a target="_blank"
href="http://http://xerces.apache.org/xerces-c/">Xerces</a> libraries
instead.  Many Linux and other UNIX-like systems provide one or more of
these libraries either as part of their standard distribution or as an
optional RPM, Debian, Mandrake or other package distributions.  (Libxml2
appears to be the most commonly available library on Linux and
Mac&nbsp;OS&nbsp;X systems.)  To use Expat, run the libSBML configuration
program as follows:

<div class="fragment"><pre class="fragment">
  ./configure --with-expat
</pre></div>

<p>
And for Xerces, use

<div class="fragment"><pre class="fragment">
  ./configure --with-xerces
</pre></div>

<p> As already noted, there is a bug in Xerces 2.6.0 that cannot be worked
around.  Xerces versions 2.2 &#150; 2.5, and 2.7.0 and above, are known to
work properly.  Expat version 1.95.8 and above, and libxml2 version 2.6.16
and above, are all known to work.

<p> If your copy of libxml2, Expat, or Xerces is installed in a
non-standard location on your computer system (e.g., a private home
directory), <code>configure</code> may not be able to find it by itself.
In this case, <code>configure</code> needs to be told explicitly where to
find the libraries.  Use the following forms:

<div class="fragment"><pre class="fragment">
  ./configure --with-libxml="<span class="placeholder"><em>DIR</em></span>"
</pre></div>
or
<div class="fragment"><pre class="fragment">
  ./configure --with-xerces="<span class="placeholder"><em>DIR</em></span>"
</pre></div>
or
<div class="fragment"><pre class="fragment">
  ./configure --with-expat="<span class="placeholder"><em>DIR</em></span>"
</pre></div>

<p> where <span class="placeholder"><em>DIR</em></span> is the
parent directory of where the <code>include</code> and <code>lib</code>
directories of Xerces, Expat or libxml2 (whichever one you are trying to
use) is located.  For example, on Mac&nbsp;OS&nbsp;X, if you used <a
target="_blank" href="http://finkproject.org">Fink</a> to install Expat in
Fink's default software tree, you would configure libSBML using the
following command:

<div class="fragment"><pre class="fragment">
  ./configure --with-expat="/sw"
</pre></div>

<p> By default, during the installation phase (i.e., when running
<code>make install</code>, discussed below), the libSBML installation
commands will copy header files to <code> /usr/local/include/sbml</code>,
the shared and static library files to <code>/usr/local/lib</code>, and
documentation files to
<nobr><code>/usr/local/share/doc/libsbml-</code><span
class="placeholder"><em>VERSION</em></span></nobr> (where <span
class="placeholder"><em>VERSION</em></span> is the version number of
libSBML).  To specify a different installation location instead of the
default, use the <nobr><code>--prefix</code></nobr> argument to the
<code>configure</code> program.  For example,

<div class="fragment"><pre class="fragment">
  ./configure --prefix="/my/favorite/path"
</pre></div>

<p> Of course, you can combine the flags to <code>configure</code>, giving both
<nobr><code>--prefix</code></nobr> and <nobr><code>--with-expat</code></nobr> or
<nobr><code>--with-xerces</code></nobr> or <nobr><code>--with-libxml</code></nobr> to set both
options.


<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-bindings">2.2.b Enabling language interfaces for C#, Java, Perl, Python, MATLAB, Octave and Ruby</a></h4>

<p> LibSBML's core is written in C and C++, but libSBML comes with APIs for
other languages as well.  To enable the library extensions for C#, Java,
Perl, Python, MATLAB, Octave, and/or Ruby, you need to supply additional
options to <code>configure</code>.  These options are
<nobr><code>--with-csharp</code></nobr>, <nobr><code>--with-java</code></nobr>,
<nobr><code>--with-perl</code></nobr>,
<nobr><code>--with-python</code></nobr>, <nobr><code>--with-matlab</code></nobr>,
<nobr><code>--with-octave</code></nobr>, and <nobr><code>--with-ruby</code></nobr>, respectively.  As
with other configure options discussed above, all of these accept an
optional prefix argument; for example, on a MacOS 10.5 Intel-based system
with MATLAB version R2010a installed in its default location of
<code>/Applications/MATLAB_R2010a.app</code>, the proper argument would be

<div class="fragment"><pre class="fragment">
  ./configure --with-matlab=/Applications/MATLAB_R2010a.app
</pre></div>

<p>
If you want to build multiple language bindings for libSBML, combine
multiple flags together as in the following example:

<div class="fragment"><pre class="fragment">
  ./configure --with-java --with-python
</pre></div>

<p> The libSBML distribution ships with certain interface files provided,
so that you do not need to have the software necessary to recreate them.
However, if you obtained the libSBML distribution from the project SVN
repository on SourceForge, or you want to recreate the files deliberately,
you may need to configure libSBML to use SWIG to regenerate the libSBML
language interfaces.  Please see the section below on using <a
href="#SWIG">SWIG</a>.

<p> Finally, note that these additional language bindings are implemented
via foreign function interfaces in the respective languages; in all cases,
the core C/C++ libSBML library still must be compiled and installed.  The
language binding files are <em>not</em> standalone implementations.  For
instance, the Java language API files consist of a file named
<code>libsbmlj.jar</code> and a native object library file named (depending
on the operating system) <code>libsbmlj.jnilib</code> (Mac&nbsp;OS&nbsp;X),
<code>libsbml.so</code> (Linux), or <code>sbmlj.dll</code> (Windows);
<em>both</em> of these must be installed and shipped with applications
<em>along with</em> the core libSBML library file.  Please refer to section
<a href="#locations">Files installed by libSBML, and their locations</a>)
for an explanation of the name and location of the libSBML library file
under different operating systems.

<p class="warning"> A warning about Java versions: we have been unable to
successfully compile the libSBML Java interface using the GNU Compiler for
Java (gcj), at least in the case of gcj version&nbsp;4.4.3 under Ubuntu
Linux version&nbsp;10.10.  <b>We do not recommend using gcj</b> with
libSBML for this reason.


<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-32-64">2.2.c Creating 32- and/or 64-bit binaries</a></h4>

<p> On some hardware and operating system combinations, it is possible to
compile 64-bit as well as 32-bit versions of programs.  Normally, the most
sensible default will be chosen by the systems' compilers automatically,
but when you download third-party software or compile your own, sometimes
it becomes necessary to select specific versions.  LibSBML is no exception.
To make it easier to build libSBML explicitly in a 32-bit or 64-bit
version, <code>configure</code> offers the two optional arguments
<nobr><code>--enable-m32</code></nobr> and
<nobr><code>--enable-m64</code></nobr>, respectively.   

<p> Whether you need to do this depends very much on your hardware,
operating system, and the format of other libraries and programs on your
system.  Currently, the most common situation where this issue arises is on
64-bit systems where not all libraries (e.g., the XML parser libraries) are
available in 64-bit format.  Then, libSBML needs to be configured to be
built as a 32-bit binary:

<div class="fragment"><pre class="fragment">
  ./configure --enable-m32
</pre></div>

<p> The two options <nobr><code>--enable-m32</code></nobr> and
<nobr><code>--enable-m64</code></nobr> cannot be used together; if they are
both given, then the 32-bit option is silently ignored.  On Mac&nbsp;OS&nbsp;X
systems, where it is in fact possible to build so-called <em>universal</em>
(or "fat") binaries containing both 32-bit and 64-bit executable code, a
separate option is available for <code>configure</code> and is discussed in
the next section.


<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-universal">2.2.d Creating universal binaries on Mac OS X</a></h4>

<p> Apple Macintosh operating systems after 2005 have provided the option
of building binaries that can run natively on either PowerPC or x86 (Intel)
architectures, as well as in either 32-bit or 64-bit versions.  Compiling a
library to be a so-called <em>universal binary</em> containing multiple
versions of the object code requires the use of special options at
compilation time.  To configure libSBML to be built as a universal binary,
specify the optional argument
<nobr><code>--enable-universal-binary</code></nobr> to
<code>configure</code>.  The following example illustrates how to do this:

<div class="fragment"><pre class="fragment">
  ./configure --enable-universal-binary
</pre></div>

<p>
By default, on MacOS 10.5, the libSBML option above will construct a
universal binary containing 32-bit PowerPC and 32-bit Intel x86 binaries;
on MacOS&nbsp;10.6, this becomes 32-bit PowerPC, 32-bit x86, and 64-bit x86
binaries.  If you want to build universal binaries with a different
combination of CPU architectures, then you can specify it as an optional
argument to the <nobr><code>--enable-universal-binary</nobr></code> option.
For example, universal binaries will be built with i386, ppc, x86_64 and
ppc64 architectures in the following example:

<div class="fragment"><pre class="fragment">
  ./configure --enable-universal-binary="-arch i386 -arch ppc -arch x86_64 -arch ppc64"
</pre></div>

<p> Beware that building with this option turn on results in the creation
of larger libSBML binary files, because the files contain essentially two
copies of the same code (one for each architecture).

<p> Finally, if both <nobr><code>--enable-universal-binary</nobr></code>
and either <nobr><code>--enable-m32</nobr></code> or
<nobr><code>--enable-m64</nobr></code> are given, the latter two options
are ignored and the option for universal binaries takes precedence.  This
is justified because, on Mac&nbsp;OS&nbsp;X, the optional argument to
<nobr><code>--enable-universal-binary</nobr></code> can be used to
accomplish the same goals as the two other individual options.



<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-swig">2.2.e Configuring for SWIG</a></h4>

<p> <strong>Important</strong>: libSBML is known to work with SWIG version 2.0.0
or later; earlier versions are known <em>not</em> to work.  You <em>must</em> use 
version 2.0.0 or later (The latest stable version is recommended).

<p> <a target="_blank" href="http://www.swig.org">SWIG</a> is the
<em>Simplified Wrapper and Interface Generator</em> and in libSBML it is
used to create the bindings for C#, Java, Python, and other programming
languages.  To configure libSBML to use SWIG, use the
<nobr><code>--with-swig</code></nobr> option to <code>configure</code>.  If
your copy of SWIG is installed in a location where <code>configure</code>
cannot find it on its own, you can specify it as an optional argument to
the <nobr><code>--with-swig</code></nobr> option as in the following
example:

<div class="fragment"><pre class="fragment">
  ./configure --with-swig="<em><span class="placeholder">DIR</span></em>"
</pre></div>


<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-compression">2.2.f Configuring support for compression</a></h4>

<p> LibSBML provides built-in support for reading and writing compressed
SBML files.  This facility works transparently: if a given SBML filename
ends with one of the suffixes recognized for a compressed file (namely,
<code>.gz</code>, <code>.zip</code>, or <code>.bz2</code>), the libSBML
<code>readSBML()</code> method will automatically decompress the file upon
reading it and the <code>writeSBML()</code> method will compress the file
upon writing it.  (Files whose names have no extensions are read and
written in uncompressed form.)

<p> These features are enabled by default if the required libraries can be
found on your system.  The libraries are the <a target="_blank"
href="http://www.zlib.net/">zlib</a> library (for the <em>gzip</em> and
<em>zip</em> formats) and the <a target="_blank"
href="http://www.bzip.org/">bzip2</a> library (for the <em>bzip2</em>
format).  If the libSBML configure program cannot find the libraries in the
locations where it searches by default, you can inform the configure
program where to look by adding the flag
<nobr><code>--with-zlib=</code><span
class="placeholder"><em>DIR</em></span></nobr> where <span
class="placeholder"><em>DIR</em></span> is the parent directory of the
<code>lib</code> directory where the zlib library is located, and/or the
flag <nobr><code>--with-bzip2=</code><span
class="placeholder"><em>DIR</em></span></nobr> where <span
class="placeholder"><em>DIR</em></span> is the parent directory of the
<code>lib</code> directory where the bzip2 library is located.

<p> To selectively disable specific library checks and format support, add
the option <nobr><code>--with-zlib=no</code></nobr> and/or
<nobr><code>--with-bzip2=no</nobr></code> to the configure program
invocation.  Or, to completely disable compression support and checking for
both libraries, add the <nobr><code>--enable-compression=no</code></nobr>
option to configure:

<div class="fragment"><pre class="fragment">
  ./configure --enable-compression=no
</pre></div>



<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-docs">2.2.g Configuring for generating documentation</a></h4>

<p> LibSBML comes with extensive documentation, and the document you are
currently reading is part of it.  Because the documentation is large and
regenerating it requires the use of software tools that not all users may
have, the authors of libSBML supply a separate downloadable archive
containing only the documentation.  The documentation archive file has a
name of the form <code>libsbml-</code><em><span
class="placeholder">VERSION</span></em><code>-docs.zip</code>, where
<em><span class="placeholder">VERSION</span></em> is the version of
libSBML.  After you download it, you can simply unzip the file in the same
location as your libSBML source directory (or alternatively, in any other
location that suits you).  We recommend downloading the ready-made
documentation archive as the easiest way to get the libSBML documentation.

<p> The same documentation files should also be available online at <a
target="_blank"
href="http://sbml.org/Software/libSBML/">http://sbml.org/Software/libSBML/</a>,
although this online copy normally corresponds to the last stable release
of libSBML and may not be up-to-date with the latest development version of
libSBML in the SVN repository on SourceForge.

<p> If you would like to generate the documentation yourself, you will need
the following software tools in addition to a Unix-like environment (or
<a target="_blank" href="http://cygwin.org">Cygwin</a> under Windows):
<ul>

<li style="margin-bottom: 1em"><em>For the C, C++ and Python API
documentation</em>: You will need <a target="_blank"
href="http://doxygen.org">Doxygen</a> version 1.6.3 or later and a
reasonably complete installation of <a target="_blank"
href="http://ctan.org/what_is_tex.html">LaTeX</a>.  You will also need to
configure libSBML to use Doxygen by supplying the option
<nobr><code>--with-doxygen</code></nobr> to the <code>configure</code>
program.  <em>Tip for Macintosh users</em>: if you are on a Mac&nbsp;OS&nbsp;X
system and you installed the binary distribution of Doxygen from the
<code>.dmg</code> image provided by Doxygen's author, you will need to
point <code>configure</code> to the doxygen executable inside the package
for Doxygen:

<div class="fragment"><pre class="fragment">
  ./configure --with-doxygen=/Applications/Doxygen.app/Contents/Resources
</pre></div>
</li>

</li> <li style="margin-bottom: 1em"><em>For the Java API
documentation</em>: You will need <a target="_blank"
href="http://java.sun.com/j2se/javadoc/">Javadoc</a> version 1.5 (also
known as version 5.0, confusingly enough), which should have come
supplied with your installation of Java 1.5 or later.  No additional
configuration of libSBML is needed beyond supplying the
<nobr><code>--with-java</code></nobr> option to <code>configure</code>.
</li>
</ul>

<p> Once libSBML is configured as above, you can generate the documentation
files by running <nobr><code>make docs</code></nobr> from the top level of
the libSBML source directory to regenerate all the documentation files.
Alternatively, you can moving to the <code>docs/src</code> subdirectory and
execute

<div class="fragment"><pre class="fragment">
  make java-manual                   # Note: use 'gmake java-manual' on FreeBSD
</pre></div>
to recreate just the Java documentation, or 
<div class="fragment"><pre class="fragment">
  make cpp-manual                    # Note: use 'gmake cpp-manual' on FreeBSD
</pre></div>
to recreate just the C++ documentation, or 
<div class="fragment"><pre class="fragment">
  make c-manual                      # Note: use 'gmake c-manual' on FreeBSD
</pre></div>
to recreate just the C documentation, or
<div class="fragment"><pre class="fragment">
  make python-manual                 # Note: use 'gmake python-manual' on FreeBSD
</pre></div>
to recreate just the Python documentation.


<!-- ---------------------------------------------------------------------- -->
<h4><a class="anchor" name="unix-unit-testing">2.2.h Configuring for software unit testing</a></h4>

<p> libSBML provides built-in facilities for testing itself.  To run the
unit tests, a second library is required, <code>libcheck</code> (version
0.9.2 or higher).  <em>Check</em> is a very lightweight C unit test
framework based on the xUnit framework popularized by Kent Beck and <a
target="_blank"
href="http://en.wikipedia.org/wiki/Extreme_Programming">eXtreme
Programming</a>.  Check is quite small and once installed, it consists of
only two files: <code>libcheck.a</code> and <code>check.h</code>.  To
install Check, you may first want to examine whether it is easily available
via a software package manager for your system (e.g., <a target="_blank"
href="https://help.ubuntu.com/community/SynapticHowto">Synaptic</a> under
Ubuntu Linux, <a target="_blank"
href="http://www.macports.org">MacPorts</a> or <a target="_blank"
href="http://www.finkproject.org/">Fink</a> under Mac&Nbsp;OS&Nbsp;X, etc.); if not,
you can also download Check from <a target="_blank"
href="http://check.sf.net/">http://check.sf.net/</a>.

<p> (Note: If you are using g++ version 3.3, you will need to avoid
using Check version 0.9.5, and instead use version 0.9.2.  The problem is
an incompatibility between Check 0.9.5 and earlier versions of g++.  It
appears that the compatibility problems in Check 0.9.5 disappear with
versions of g++ after 3.3.)

<p> To enable the unit testing facilities in libSBML, add the
<nobr><code>--with-check</code></nobr> flag to the configure command:

<div class="fragment"><pre class="fragment">
  ./configure --with-check
</pre></div>

<p>
Following this, you must build libSBML and then you can run the tests:

<div class="fragment"><pre class="fragment">
  make                   # Note: use 'gmake' on FreeBSD
  make check             # Note: use 'gmake check' on FreeBSD
</pre></div>

<p> The make check step is optional and will build and run an
extensive suite of unit tests to verify all facets of the library.
These tests are meant primarily for developers of libSBML and running
them is not required for the library to function properly.  All tests
should pass with no failures or errors.  If for some reason this is
not the case on your system, please submit a bug report using the
mechanisms described in the section titled "Bug Reports, Mailing
Lists, and Related Topics" elsewhere in this manual.




<!-- ---------------------------------------------------------------------- -->
<h3><a class="anchor" name="unix-compiling">2.3 Compiling and installing libSBML</a></h3>


<p> After the configuration step (and if you are using CMake, the
generation of the makefiles), the final steps are to run the compilation
process followed by a command to install libSBML on your system.  

<p> If you are using CMake, then in a terminal/shell window, first
<code>cd</code> into the <code>build</code> directory that you indicated to
CMake in the second line of the CMake GUI.  Otherwise, if you are using GNU
make and <i>not</i> using CMake, simply stay in the top level of the
libSBML source code directory.  There, execute the following commands to
compile and install libSBML:

<div class="fragment"><pre class="fragment">
  make               # Note: use 'gmake' on FreeBSD
  make install       # Note: use 'gmake install' on FreeBSD
</pre></div>


<p> Note that you will probably have to perform the <code>make
install</code> command as the user 'root' on your system if you used the
default installation directory (<code>/usr/local</code>) or you set
<nobr><code>--prefix</code></nobr> to a system directory that only root is
permitted to write into.  (A quick way to run a command as root is to use
the <code>sudo</code> command; i.e., run <code><nobr>sudo make
install</nobr></code>.)

<p> Please refer to the section titled <a href="#locations"><i>Files
installed by libSBML, and their locations</i></a> for information about the
locations where the installation step copies the various libSBML files.

<p> Once the libSBML files are installed as described in the sections
above, you may need to perform additional steps so that software can find
the libSBML library files at <em>run</em> time.  Please see the
instructions on <a href="libsbml-accessing.html"><i>Making libSBML accessible
to your software</i></a> provided on a separate page of this documentation.


<!-- ---------------------------------------------------------------------- -->
<h2><a class="anchor" name="detailed-windows">3. Procedures for Windows</a></h2>
<!-- ---------------------------------------------------------------------- -->

<p> There are two ways to compile libSBML under Windows: using the
native Windows compilation tools from Microsoft, and using the <a
target="_blank" href="http://cygwin.org/">Cygwin</a> environment.  In this
section, we focus on using the native Windows environment because this
appears to be the more popular approach used by Windows-based users of
libSBML.  Cygwin users can follow essentially the same <a
href="#basic-config">instructions as for other Unix environments</a> given
above.


<!-- ---------------------------------------------------------------------- -->
<h3><a class="anchor" name="windows-configuring">3.1 Configuring using CMake</a></h3>

<p> To create configurations suitable for compiling libSBML using the
native Windows build tools, we recommend using CMake to generate them.  (If
you do not already have CMake installed on your system, please begin by
downloading a copy of CMake version 2.8.4 or later from <a target="_blank"
href="http://www.cmake.org/">cmake.org</a>.) Once you have CMake installed,
also download and unzip the libSBML source code archive from the <a
target="_blank"
href="http://sf.net/projects/sbml/files/libsbml/@PACKAGE_VERSION@">download
area on SourceForge.net</a> and save the archive somewhere on your file
system, then unpack it.

<p> Before going further, an issue on Windows concerns the dependency
libraries on which libSBML depends.  CMake will try to find all the
dependencies for the default options, which leads to problems if they do
not exist.  We recommend Windows users download the dependencies we have
prepackaged at the following download location:

<p><center>
<a target="_blank"
href="https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies">
https://sourceforge.net/projects/sbml/files/libsbml/win-dependencies</a>
</center>

<p> Download and extract this file into the same folder where you unpacked
the libSBML source distribution.  CMake will look for these dependencies in
a folder called <code>dependencies</code> directly below the libSBML root
folder.

<p> Once you have the libSBML sources and the dependency libraries unpacked
on your system, start up the CMake graphical user interface (GUI).  It will
look something like the following screenshot:

<center style="padding-bottom: 1.5em; padding-top: 1em; width: 500px;
margin: 1em auto">
<img class="screenshot" src="cmake-empty-windows.png">
<p style="font-style: italic"> Screenshot of CMake when it first starts up.
</center>

<p> Click on the <b>Browse Source...</b> button and navigate to the directory
where you unpacked the libSBML source code archive on your file system.
CMake should automatically fill in the next line, <b>Where to build the
binaries</b>, using a subdirectory named <code>build</code> within the
directory where your source code is located.  (If it does not, fill in the
field in the CMake interface yourself.)  Then, click on the
<b>Configure</b> button.  CMake should display a dialog similar to the
following.

<center style="padding-bottom: 1.5em; padding-top: 1em; margin: 1em auto">
<img style="padding: 2em auto 1em auto; border: none"
src="cmake-configure-windows.png"> <p style="font-style: italic; width: 500px">
Screenshot of the <b>Configure</b> screen under Microsoft Windows&nbsp;7.
Choose the settings appropriate for the build environment you are using and
click the <b>Finish</b> button.
</center>

<p> After you close the configuration screen, CMake will populate the options
area with various options it reads from the libSBML configuration files.
These new options are displayed in red, as illustrated in the following
screenshot.

<center style="padding-bottom: 1.5em; padding-top: 1em; margin: 1em auto">
<img class="screenshot" src="cmake-options-red-windows.png"> <p
style="font-style: italic; width: 500px"> Screenshot of the CMake interface
after the configuration step.  </center>

<p> In this panel, you can set values for various libSBML configuration/build
options.  For example, you can set the location into which the compiled
libSBML libraries will be installed by clicking on the line for
<code>CMAKE_INSTALL_PREFIX</code> and replacing the default value with a
value of your choosing.  To find out the meaning of a particular option,
hover your mouse/pointer over the item for a few seconds until the tooltip
text appears.

<p> Select the options with which you wish to build libSBML.  All the
options for configuring libSBML, including language bindings and SBML
Level&nbsp;3 packages, are listed here and may be selected/deselected as
required.  For instance, to include the Java language bindings, click the
check-box for <code>WITH_JAVA</code>.  Once you are done configuring, click
on CMake's <b>Configure</b> button.  CMake will process the configuration,
and if it lacks any information, it will highlight the options in red.  You
may need to iterate between setting options and clicking the
<b>Configure</b> button until there are no options left in red and the
<b>Generate</b> button becomes enabled.

<p> Next, click on the <b>Generate</b> button.  This will cause CMake to
create project configuration files ("Solutions") for the compilation
environment you selected in the beginning (e.g., Visual Studio 2010).


<!-- ---------------------------------------------------------------------- -->
<h3><a class="anchor" name="windows-compiling">3.2 Compiling and installing using MSVC</a></h3>

<p> The MSVC Solution will contain a number of projects files, depending on
the configuration selected.  The following screenshot illustrates what you
should see when you use the Solution Explorer in MSVC, and some of the most
important targets that you will find there:

<div style="padding-bottom: 1.5em; margin: auto auto 1em auto;
float: left; width: 330px">
<img class="screenshot" src="solution-explorer-windows.png">
<p style="font-style: italic; width: 300px"> Screenshot of MSVC's Solution Explorer when
viewing the MSVC Solution files generated using CMake.
</div>


<ul style="padding-left: 2em">

<li style="margin: auto auto 1em 2em"> <code>ALL_BUILD</code>: This target builds
all the libSBML project files; that is, all projects except the ones that
involve installation, packaging or testing.

<li style="margin: auto auto 1em 2em"> <code>INSTALL</code>: This target will
install the compiled binaries to the directory specified for the
<code>CMAKE_INSTALL_PREFIX</code> option of the CMake configuration step.

<li style="margin: auto auto 1em 2em"> <code>ZERO_CHECK</code>: This target is
merely a verification project; it is used to check whether there have been
any changes to the configuration since the last time it was run.  It is
invoked automatically whenever any other target is being built.

<li style="margin: auto auto 1em 2em"> <code>PACKAGE</code>: This target creates
binary installers for libSBML.  If the Nullsoft scriptable installation
system, NSIS (<a target="_blank"
href="http://nsis.sf.net">http://nsis.sf.net</a>) is available, an
installer is created for the current platform.  Most users will not need to
use this build target/Solution.

<li style="margin: auto auto 1em 2em"> <code>RUN_TESTS</code>: This target
can be used to test all the libraries built.  It is only available if the
<code>WITH_CHECK</code> option is selected during the CMake configuration
step.  (Note: the <a target="_blank"
href="http://check.sourceforge.net/">libcheck</a> library upon which this
facility depends is incompatible with MSVC&nbsp;7, so you will need to use
a newer version of MSVC if you want to try <code>RUN_TESTS</code>.)  The
checks will fail if Windows is unable to locate the dynamic libraries, or
for each language binding if it is unable to locate both the binding
library and the libSBML native library.

</ul>

<p> Other projects generated by the libSBML CMake configuration system and
listed in the MSVC Solution explorer are named to indicate the intended
target.  Some examples include the following:

<ul style="padding-left: 2em">

<li style="margin: auto auto 1em 2em"> <code>binding_python_lib</code>:
builds the Python language bindings <code>_libsbml.pyd</code> file.

<li style="margin: auto auto 1em 2em"> <code>binding_java_classes</code>:
builds the Java language bindings class JAR file.

<li style="margin: auto auto 1em 2em"> <code>example_c_convertSBML</code>:
builds the <code>convertSBML</code> example program in C.

<li style="margin: auto auto 1em 2em">
<code>example_java_addCVTerms</code>: builds the <code>addCVTerms</code>
example program in Java.

<li style="margin: auto auto 1em 2em"> <code>test_sbml_math</code>: builds
the tests in the libSBML <code>src/math</code> subdirectory.

</ul>
<div style="clear: both"> </div>


<p> A typical procedure for building libSBML using MSVC consistes of
performing the following steps:

<ol>

<li style="margin-bottom: 1em"> Select and run the <code>ALL_BUILD</code>
target.  After a successful build, MSVC will put the libSBML library files
and DLL into the <code>Release</code> subdirectory of the location
specified using CMake.  This includes the language bindings, which will be
placed in a subdirectory of the <code>Release</code> directory.  For
example, C# files will appear in <code>Release/csharp</code>.

<li style="margin-bottom: 1em"> Select and run the <code>INSTALL</code>
target.  This will install the compiled libSBML library and associated
files into the directory determined by the
<code>CMAKE_INSTALL_PREFIX</code> CMake configuration variable.

</ol>

<p> Once the libSBML files are installed as described in the sections
above, you may need to perform additional steps so that software can find
the libSBML library files at <em>run</em> time.  Please see the
instructions on <a href="libsbml-accessing.html"><i>Making libSBML accessible
to your software</i></a> provided on a separate page of this documentation.



<!-- ---------------------------------------------------------------------- -->
<h2><a class="anchor" name="locations">4. Files installed by libSBML version&nbsp;4.x, and their locations</a></h2>
<!-- ---------------------------------------------------------------------- -->

<p> If all went as it should, the libSBML object files should end up
compiled and installed on your system, in either the default location
(<code>/usr/local/</code>) or in the location you indicated during the
configuration step as explained above.  The core libSBML library object
files will have slightly different names depending on the operating system
in use.  The following table summarizes the possibilities; note that these
names changed slightly between libSBML&nbsp;3.x and&nbsp;4.x to incorporate
the version number:

<center>
<table border="0" class="text-table width80 normal-font alt-row-colors">
 <tr style="background: lightgray; font-size: 14px;">
   <th style="border-bottom: none"></th>
   <th colspan="3" align="center">Names of core libSBML 4.x object files</th>
 </tr>
 <tr style="background: lightgray; font-size: 14px;">
     <th align="left">Type of file</th>
     <th align="left">Linux/Unix-based OS</th>
     <th align="left">Mac&nbsp;OS&nbsp;X</th>
     <th align="left">Windows</th>
 </tr>
<tr>
  <td width="180px" style="padding-right: 1em">Dynamically-linked</td>
  <td><code>libsbml.so.4</code></td>
  <td><code>libsbml.4.dylib</code></td>
  <td><code>libsbml.dll</code></td>
</tr><tr>
  <td width="180px" style="padding-right: 1em">Statically-linked</td>
  <td><code>libsbml.a</code></td>
  <td><code>libsbml.a</code></td>
  <td><code>libsbml.lib</code></td>
</tr><tr>
  <td width="180px" style="padding-right: 1em">Libtool control file</td>
  <td><code>libsbml.la</code></td>
  <td><code>libsbml.la</code></td>
  <td><code>sbmlj.la</code></td>
</tr>
</table>
</center>

<p>
If you have compiled additional language extensions with libSBML, these files
will be installed as well, but their names and locations depend on the
particular language extension.  The following two tables summarize the
possibilities.  The first table lists the names of the files, while the second
table below lists the pathnames where those files will be installed.

<center>
<table border="0" class="text-table  bigger-row-spacing  width80  normal-font">
 <tr style="background: lightgray; font-size: 14px;">
   <th colspan="2" style="border-bottom: none"></th>
   <th colspan="3" align="center">Names of language extension object files</th>
 </tr>
 <tr style="background: lightgray; font-size: 14px;">
     <th colspan="2" align="left">Language</th>
     <th align="left">Linux/Unix-based OS</th>
     <th align="left">Mac&nbsp;OS&nbsp;X</th>
     <th align="left">Windows</th>
 </tr>
<tr style="background: #f3f3f3">
  <td>C#</td>
  <td>
    <nobr><em>(unmanaged C++ DLL)</em></nobr><br>
    <nobr><em>(managed C# DLL)</em></nobr>
  </td>
  <td><code>libsbmlcs.so</code><br><code> libsbmlcsP.dll</code></td>
  <td><code>libsbmlcs.so</code><br><code> libsbmlcsP.dll</code></td>
  <td><code>libsbmlcs.dll</code><br><code> libsbmlcsP.dll</code></td>
</tr><tr>
  <td>Java</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Java JAR file)</em></nobr>
  </td>
  <td><code>libsbmlj.so</code><br><code> libsbmlj.jar</code></td>
  <td><code>libsbmlj.jnilib</code><br><code> libsbmlj.jar</code></td>
  <td><code>sbmlj.dll</code><br><code> libsbmlj.jar</code></td>
</tr><tr style="background: #f3f3f3">
  <td rowspan="4">MATLAB</td>
  <td style="border-bottom: 1px dotted #aaa" valign="middle">
    <nobr><em>(Intel 32-bit)</em></nobr>
  </td>
  <td style="border-bottom: 1px dotted #aaa" valign="top">
    <code>TranslateSBML.mexglx</code><br>
    <code>OutputSBML.mexglx</code><br>
  </td>
  <td style="border-bottom: 1px dotted #aaa" valign="top">
    <code>TranslateSBML.mexmaci</code></br>
    <code>OutputSBML.mexmaci</code></br>
  </td>  
  <td style="border-bottom: 1px dotted #aaa" valign="top">
    <code>TranslateSBML.mexw32</code><br>
    <code>OutputSBML.mexw32</code><br>
  </td>
</tr><tr>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="middle">
    <nobr><em>(Intel 64-bit)</em></nobr>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexa64</code><br>
                   <code>OutputSBML.mexa64</code>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexmaci64</code></br>
                   <code>OutputSBML.mexmaci64</code></br>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexw64</code><br>
                   <code>OutputSBML.mexw64</code><br>
  </td>
</tr><tr>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="middle">
    <nobr><em>(PPC)</em></nobr>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <em>N/A</em><br><br>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <code>TranslateSBML.mexmac</code><br>
                   <code>OutputSBML.mexmac</code>
  </td>
  <td style="border-bottom: 1px dotted #aaa; background: #f3f3f3" valign="top">
                   <em>N/A</em><br><br>
  </td>
</tr><tr>
  <td valign="middle" style="background: #f3f3f3">
    <nobr><em>(Additional files)</em></nobr>
  </td>
  <td valign="top" style="background: #f3f3f3">
                   <code>CheckAndConvert.m</code><br>
                   <code>Contents.m</code><br>
                   <code>ConvertFormulaToMathML.m</code><br>
                   <code>isSBML_Model.m</code><br>
                   <code>isoctave.m</code><br>
  </td>
  <td valign="top" style="background: #f3f3f3">
                   <code>CheckAndConvert.m</code><br>
                   <code>Contents.m</code><br>
                   <code>ConvertFormulaToMathML.m</code><br>
                   <code>isSBML_Model.m</code><br>
                   <code>isoctave.m</code><br>
  </td>
  <td valign="top" style="background: #f3f3f3">
                   <code>CheckAndConvert.m</code><br>
                   <code>Contents.m</code><br>
                   <code>ConvertFormulaToMathML.m</code><br>
                   <code>isSBML_Model.m</code><br>
                   <code>isoctave.m</code><br>
  </td>
</tr><tr>
  <td colspan="2">Octave</td>
  <td><code>TranslateSBML.mex</code><br>
      <code>OutputSBML.mex</code><br>
      <code>CheckAndConvert.m</code>
      <code>Contents.m</code><br>
      <code>ConvertFormulaToMathML.m</code><br>
      <code>isSBML_Model.m</code><br>
      <code>isoctave.m</code><br>
  </td>
  <td><code>TranslateSBML.mex</code><br>
      <code>OutputSBML.mex</code><br>
      <code>CheckAndConvert.m</code>
      <code>Contents.m</code><br>
      <code>ConvertFormulaToMathML.m</code><br>
      <code>isSBML_Model.m</code><br>
      <code>isoctave.m</code><br>
  </td>
  <td><code>TranslateSBML.mex</code><br>
      <code>OutputSBML.mex</code><br>
      <code>CheckAndConvert.m</code>
      <code>Contents.m</code><br>
      <code>ConvertFormulaToMathML.m</code><br>
      <code>isSBML_Model.m</code><br>
      <code>isoctave.m</code><br>
  </td>
</tr><tr style="background: #f3f3f3">
  <td>Perl</td>
  <td valign="top">
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Perl module file)</em></nobr><br>
    <nobr><em>(Other files)</em></nobr>
  </td>
  <td><code>LibSBML.so</code><br>
      <code>LibSBML.pm</code><br>
      <code>LibSBML.pod</code><br>
      <code>.packlist</code></td>
  <td><code>LibSBML.bundle</code><br>
      <code>LibSBML.pm</code><br>
      <code>LibSBML.pod</code><br>
      <code>.packlist</code></td>
  <td><code>LibSBML.dll</code><br>
      <code>LibSBML.pm</code><br>
      <code>LibSBML.pod</code><br>
      <code>.packlist</code></td>
</tr><tr>
  <td>Python <nobr>2.3&ndash;2.4</nobr></td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Python module file)</em></nobr><br>
    <nobr><em>(Compiled module file)</em></nobr><br>
    <nobr><em>(Path configuration file)</em></nobr>
  </td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.dll</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
</tr><tr style="background: #f3f3f3">
  <td>Python <nobr>2.5&ndash;2.7</nobr></td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Python module file)</em></nobr><br>
    <nobr><em>(Compiled module file)</em></nobr><br>
    <nobr><em>(Path configuration file)</em></nobr>
  </td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.so</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
  <td><code>_libsbml.pyd</code><br>
      <code>libsbml.py</code><br>
      <code>libsbml.pyc</code><br>
      <code>libsbml.pth</code></td>
</tr><tr>
  <td colspan="2">Ruby</td>
  <td><code>libSBML.so</code></td>
  <td><code>libSBML.bundle</code></td>
  <td><code>libSBML.dll</code></td>
</tr>
<caption class="bottom-caption" style="text-align: left">Legend: N/A = not available.
</caption>
</table>
</center>

<p> The next table gives the locations of the files listed in the table
above for Linux/Unix-based operating systems.  The pathnames shown here are
relative to the prefix directory used in configuring libSBML (meaning the
value <em><span class="placeholder">DIR</span></em> given to the
<nobr><code>--prefix=</code><em><span
class="placeholder">DIR</span></em></nobr> option to the
<code>configure</code> program discussed above).

<center>
<table border="0" class="text-table  bigger-row-spacing  width80  normal-font  alt-row-colors">
 <tr style="background: lightgray; font-size: 14px;">
     <th colspan="2" align="left">Language</th>
     <th align="left">Directories</th>
     <th align="left">Notes</th>
 </tr>
<tr>
  <td>C#</td>
  <td>
    <em>(unmanaged C++ DLL)</em><br>
    <em>(managed C# DLL)</em>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/mono/libsbmlcsP/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/mono/libsbmlcsP/</code></nobr></td>
  <td></td>
</tr><tr>
  <td>Java</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Java JAR file)</em></nobr>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/share/java/</code></nobr></td>
  <td></td>
</tr><tr>
  <td colspan="2">MATLAB</td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code></nobr></td>
  <td></td>
</tr><tr>
  <td colspan="2">Octave</td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/octave/site/oct/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr></td>
  <td>(1)</td>
</tr><tr>
  <td>Perl</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Perl module file)</em></nobr><br>
    <nobr><em>(Other files)</em></nobr>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/perl5/site_perl/</code><em><span class="placeholder">perl-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/auto/libSBML/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/perl5/site_perl/</code><em><span class="placeholder">perl-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/perl5/site_perl/</code><em><span class="placeholder">perl-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr></td>
  <td>(2)</td>
</tr><tr>
  <td>Python</td>
  <td>
    <nobr><em>(native C++ library)</em></nobr><br>
    <nobr><em>(Python module file)</em></nobr><br>
    <nobr><em>(Compiled module file)</em></nobr><br>
    <nobr><em>(Path configuration file)</em></nobr>
  </td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/libsbml/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/libsbml/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/libsbml/</code></nobr><br>
      <nobr><em><span class="placeholder">DIR</span></em><code>/lib/</code><em><span class="placeholder">python-version</span></em><code>/site-packages/</code></nobr></td>
  <td>(2)</td>
</tr><tr>
  <td colspan="2">Ruby</td>
  <td><nobr><em><span class="placeholder">DIR</span></em><code>/lib/ruby/site_ruby/</code><em><span class="placeholder">ruby-version</span></em><code>/</code><em><span class="placeholder">platform</span></em><code>/</code></nobr></td>
  <td></td>
</tr>
<caption class="bottom-caption" style="text-align: left">Legend: The
placeholder <em><span class="placeholder">platform</span></em> stands for a
platform-specific directory name; the exact string depends on the
combination of your operating system, machine architecture, programming
language, and the versions of all of these.  The placeholder <em><span
class="placeholder">perl-version</span></em> refers to the version number
of the Perl executable against which libSBML was configured.  The
placeholder <em><span class="placeholder">python-version</span></em> refers
to the version number of the Python executable against which libSBML was
configured.  The placeholder <em><span
class="placeholder">ruby-version</span></em> refers to the version number
of the Ruby executable against which libSBML was configured.  Note that
none of these values are actually under the control of libSBML; they are
set by the operating system and programming language package conventions.
<br><br> Additional notes: <br>
(1) The Octave installation directory actually depends on
how Octave was configured at build time.  If your installation of Octave
came as a precompiled binary, the package directory may in fact be
different from what is shown here.
<br>(2) The directory component <code>lib</code> may be replaced by
<code>lib64</code> on some 64-bit operating systems (e.g., CentOS 5.2
x86-64).
</caption>

</table>
</center>


