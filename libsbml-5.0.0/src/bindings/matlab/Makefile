## src/bindings/matlab/Makefile.  Generated from Makefile.in by configure.
##
## \file    Makefile.in
## \brief   Makefile template for libsbml MATLAB bindings
## \author  SBML Team <sbml-team@caltech.edu>
##
## $Id: Makefile.in 10654 2010-01-12 15:42:32Z sarahkeating $
## $HeadURL: https://sbml.svn.sourceforge.net/svnroot/sbml/trunk/libsbml/src/bindings/matlab/Makefile.in $
##
## <!--------------------------------------------------------------------------
## This file is part of libSBML.  Please visit http://sbml.org for more
## information about SBML, and the latest version of libSBML.
##
## Copyright (C) 2009-2011 jointly by the following organizations: 
##     1. California Institute of Technology, Pasadena, CA, USA
##     2. EMBL European Bioinformatics Institute (EBML-EBI), Hinxton, UK
##  
## Copyright (C) 2006-2008 by the California Institute of Technology,
##     Pasadena, CA, USA 
##  
## Copyright (C) 2002-2005 jointly by the following organizations: 
##     1. California Institute of Technology, Pasadena, CA, USA
##     2. Japan Science and Technology Agency, Japan
## 
## This library is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as published by
## the Free Software Foundation.  A copy of the license agreement is provided
## in the file named "LICENSE.txt" included with this software distribution
## and also available online as http://sbml.org/software/libsbml/license.html
## ------------------------------------------------------------------------ -->


# -----------------------------------------------------------------------------
# Configuration variables
# -----------------------------------------------------------------------------
# Some of the following are substituted automatically by `configure'.  If
# you are looking at "Makefile", do not edit these values; instead, run the
# configure script at the top level of the src tree.  It will recreate
# "Makefile".

include ../../../config/makefile-common-vars.mk

# `srcdir' points to the current directory, but should be set by configure.
# `subdir' must be set manually to the relative dir under srcdir.  Don't 
# set `subdir' to an absolute path, or some make actions will fail.

srcdir  = .
thisdir = src/bindings/matlab

sources = TranslateSBML.c OutputSBML.c 

subdirs = test

# `distfiles' determines the files and directories included in a distribution.
# `distfiles_exclude' is used to filter out specific items, so that even if
# they appear in `distfiles', they will not be copied in the distribution.

distfiles =                           \
        AUTHORS.txt                   \
        CheckAndConvert.m             \
        Contents.m                    \
        ConvertFormulaToMathML.m      \
        isSBML_Model.m                \
        Makefile.in                   \
        README.txt                    \
        TranslateSBML.c               \
        TranslateSBML.m               \
        OutputSBML.c                  \
        OutputSBML.m                  \
        buildSBML.m                   \
        installSBML.m                 \
        isoctave.m                    \
        matlab-tags-regexp.txt        \
        test.xml                      \
	FindMatlab.cmake              \
	CMakeLists.txt	              \
	test/CMakeLists.txt           

# `extra_clean' and `extra_distclean' determine the files and directories
# removed during "make clean" and "make distclean".

possible_mexext := mexmaci64 mexmaci mexglx mexa64

binaries := $(addprefix TranslateSBML.,$(possible_mexext)) \
	    $(addprefix OutputSBML.,$(possible_mexext))

extra_clean := $(binaries) runTests.log


# -----------------------------------------------------------------------------
# Primary build actions
# -----------------------------------------------------------------------------

matlab_args := -nosplash -nodesktop -nojvm

# Figure out the mex extension for this system.  Nasty bit of business, this.
#
# We can't rely on finding or using Matlab's own "mexext" shell script,
# because I've seen it report the wrong architecture on some combinatinos
# of OS and Matlab version.  Need to ask Matlab itself, because Matlab is what
# we will ultimately use to invoke 'mex'.
#
# The business with fprintf(2...) is because matlab buffers the output of
# stdout and sometimes doesn't print it if you just do 'mexext; quit'.
# So we force it to print to stderr, which is unbuffered. The grep call is
# there to get rid of everything except the string we're looking for, and
# the tr is there because sometimes matlab prints the prompt in front of
# the output.
#
# Don't bother setting this variable if all we're doing is a "make clean".

ifeq (,$(findstring clean,$(MAKECMDGOALS)))
  empty        :=
  space        := $(empty) $(empty)
  mexext_regex := $(subst $(space),|,$(possible_mexext))
  ifeq ($(origin mexext), undefined)
    mexext := $(shell $(MATLAB) $(matlab_args) -r "fprintf(2, '%s\n', mexext); quit" 2>&1 | grep -vi 'warning' | egrep '($(mexext_regex))' | tr -d '> ')
  endif
endif

all: Makefile
ifneq "$(MAKEFLAGS)" ""
	$(MAKE) -$(MAKEFLAGS) mexext=$(mexext) TranslateSBML.$(mexext) OutputSBML.$(mexext)
else
	$(MAKE) mexext=$(mexext) TranslateSBML.$(mexext) OutputSBML.$(mexext)
endif

# Run the compilation using libtool and setting CFLAGS.  Not sure if this
# is really necessary, but it seems prudent.

define matlabrun
  env CFLAGS="$(CFLAGS)" srcdir=. \
    $(LIBTOOL) -dlopen $(TOP_BUILDDIR)/src/libsbml.la --mode=execute $(1)
endef

# In the pattern rule below, we can't use $(mexext) because it's not set at
# the time this file is parsed -- it's only set when the variable is
# referenced.  If you attempt to use it in the left-hand side of the rule
# below, it will be empty, and it won't work.  Kludgy solution: use every
# possible mex extension to define this rule.

here = $(shell /bin/pwd)

$(addprefix %.,$(possible_mexext)): %.c
	$(call matlabrun,$(MATLAB) $(matlab_args) -r "cd ('$(here)'); buildSBML; quit")	


# -----------------------------------------------------------------------------
# Tags.
# -----------------------------------------------------------------------------

matlab-tags-extra-flags = *.c --lang=none --regex=@matlab-tags-regexp.txt *.m

etags-command := $(ETAGS) $(ETAGSFLAGS) $(matlab-tags-extra-flags)
ctags-command := $(CTAGS) $(CTAGSFLAGS) $(matlab-tags-extra-flags)

tags: etags ctags


# -----------------------------------------------------------------------------
# Targets for checking/testing.
# -----------------------------------------------------------------------------

check: all check-recursive


# -----------------------------------------------------------------------------
# Installation.
# -----------------------------------------------------------------------------

install: all install-translatesbml install-outputsbml \
	 install-checkandconvert install-isoctave install-issbmlmodel \
	 install-convertformula

installdirs: 

uninstall: uninstall-translatesbml uninstall-outputsbml \
	   uninstall-checkandconvert uninstall-isoctave uninstall-issbmlmodel \
	   uninstall-convertformula

install-translatesbml:
	$(INSTALL_SH) -m 644 TranslateSBML.$(mexext) "$(DESTDIR)$(LIBDIR)"

uninstall-translatesbml:
	@target="$(DESTDIR)$(LIBDIR)/TranslateSBML.$(mexext)"; \
	if test -f $$target ; then \
	  echo rm $$target; \
	  rm $$target; \
	fi;

install-outputsbml:
	$(INSTALL_SH) -m 644 OutputSBML.$(mexext) "$(DESTDIR)$(LIBDIR)"

uninstall-outputsbml:
	@target="$(DESTDIR)$(LIBDIR)/OutputSBML.$(mexext)"; \
	if test -f $$target ; then \
	  echo rm $$target; \
	  rm $$target; \
	fi;

install-checkandconvert:
	$(INSTALL_SH) -m 644 CheckAndConvert.m "$(DESTDIR)$(LIBDIR)"

uninstall-checkandconvert:
	@target="$(DESTDIR)$(LIBDIR)/CheckAndConvert.m"; \
	if test -f $$target ; then \
	  echo rm $$target; \
	  rm $$target; \
	fi;

install-isoctave:
	$(INSTALL_SH) -m 644 isoctave.m "$(DESTDIR)$(LIBDIR)"

uninstall-isoctave:
	@target="$(DESTDIR)$(LIBDIR)/isoctave.m"; \
	if test -f $$target ; then \
	  echo rm $$target; \
	  rm $$target; \
	fi;

install-issbmlmodel:
	$(INSTALL_SH) -m 644 isSBML_Model.m "$(DESTDIR)$(LIBDIR)"

uninstall-issbmlmodel:
	@target="$(DESTDIR)$(LIBDIR)/isSBML_Model.m"; \
	if test -f $$target ; then \
	  echo rm $$target; \
	  rm $$target; \
	fi;

install-convertformula:
	$(INSTALL_SH) -m 644 ConvertFormulaToMathML.m "$(DESTDIR)$(LIBDIR)"

uninstall-convertformula:
	@target="$(DESTDIR)$(LIBDIR)/ConvertFormulaToMathML.m"; \
	if test -f $$target ; then \
	  echo rm $$target; \
	  rm $$target; \
	fi;



# -----------------------------------------------------------------------------
# Creating distribution (for libSBML maintainers only)
# -----------------------------------------------------------------------------

dist: dist-normal dist-recursive

distcheck: all distcheck-normal distcheck-recursive


# -----------------------------------------------------------------------------
# Miscellaneous
# -----------------------------------------------------------------------------

include ../../../config/makefile-common-actions.mk


# -----------------------------------------------------------------------------
# End.
# -----------------------------------------------------------------------------
