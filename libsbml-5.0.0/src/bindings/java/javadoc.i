%javamethodmodifiers getLibSBMLVersion "
/**
 * Returns the version number of this copy of libSBML as an integer.
 * <p>
 * @return the libSBML version as an integer; version 1.2.3 becomes 10203.
 */
 public";


%javamethodmodifiers getLibSBMLDottedVersion "
/**
 * Returns the version number of this copy of libSBML as a string.
 * <p>
 * @return the libSBML version as a string; version 1.2.3 becomes
 * \'1.2.3\'.
 * <p>
 * @see #getLibSBMLVersionString()
 */
 public";


%javamethodmodifiers getLibSBMLVersionString "
/**
 * Returns the version number of this copy of libSBML as a string without
 * periods.
 * <p>
 * @return the libSBML version as a string: version 1.2.3 becomes \'10203\'.
 * <p>
 * @see #getLibSBMLDottedVersion()
 */
 public";


%typemap(javaimports) SBMLReader "
/** 
 * Methods for reading SBML from files and text strings.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The {@link SBMLReader} class provides the main interface for reading SBML
 * content from files and strings.  The methods for reading SBML all return
 * an {@link SBMLDocument} object representing the results.
 * <p>
 * In the case of failures (such as if the SBML contains errors or a file
 * cannot be read), the errors will be recorded with the {@link SBMLErrorLog}
 * object kept in the {@link SBMLDocument} returned by {@link SBMLReader}.  Consequently,
 * immediately after calling a method on {@link SBMLReader}, callers should always
 * check for errors and warnings using the methods for this purpose
 * provided by {@link SBMLDocument}.
 * <p>
 * For convenience as well as easy access from other languages besides C++,
 * this file also defines two global functions,
 * {@link libsbml#readSBML(String filename)}
 * and {@link libsbml#readSBMLFromString(String xml)}.
 * They are equivalent to creating an {@link SBMLReader}
 * object and then calling the
 * {@link SBMLReader#readSBML(String filename)} or
 * {@link SBMLReader#readSBMLFromString(String xml)}
 * methods, respectively.
 * <p>
 * <h2>Support for reading compressed files</h2>
 * <p>
 * LibSBML provides support for reading (as well as writing) compressed
 * SBML files.  The process is transparent to the calling
 * application&mdash;the application does not need to do anything
 * deliberate to invoke the functionality.  If a given SBML filename ends
 * with an extension for the <em>gzip</em>, <em>zip</em> or <em>bzip2</em> compression
 * formats (respectively, <code>.gz</code>, <code>.zip</code>, or <code>.bz2</code>), then the methods
 * {@link SBMLReader#readSBML(String filename)} and
 * {@link SBMLWriter#writeSBML(SBMLDocument d, String filename)}
 * will automatically decompress and compress the file while writing and
 * reading it.  If the filename has no such extension, it
 * will be read and written uncompressed as normal.
 * <p>
 * The compression feature requires that the <em>zlib</em> (for <em>gzip</em> and 
 * <em>zip</em> formats) and/or <em>bzip2</em> (for <em>bzip2</em> format) be available on the
 * system running libSBML, and that libSBML was configured with their
 * support compiled-in.  Please see the libSBML <a href=\'../../../{@link libsbml}-installation.html\'>installation instructions</a>  for more information about this.  The methods
 * {@link SBMLReader#hasZlib()} and
 * {@link SBMLReader#hasBzip2()}
 * can be used by an application to query at run-time whether support
 * for the compression libraries is available in the present copy of
 * libSBML.
 * <p>
 * Support for compression is not mandated by the SBML standard, but
 * applications may find it helpful, particularly when large SBML models
 * are being communicated across data links of limited bandwidth.
 */
"

%javamethodmodifiers SBMLReader::SBMLReader "
  /**
   * Creates a new {@link SBMLReader} and returns it. 
   * <p>
   * The libSBML {@link SBMLReader} objects offer methods for reading SBML in
   * XML form from files and text strings.
   */
 public";


%javamethodmodifiers SBMLReader::readSBML(const std::string& filename) "
  /**
   * Reads an SBML document from a file.
   * <p>
   * This method is identical to {@link SBMLReader#readSBMLFromFile(String filename)}.
   * <p>
   * If the file named <code>filename</code> does not exist or its content is not
   * valid SBML, one or more errors will be logged with the {@link SBMLDocument}
   * object returned by this method.  Callers can use the methods on
   * {@link SBMLDocument} such as {@link SBMLDocument#getNumErrors()} and
   * {@link SBMLDocument#getError(long n)} to get the errors.  The object returned by
   * {@link SBMLDocument#getError(long n)} is an {@link SBMLError} object, and it has methods to
   * get the error code, category, and severity level of the problem, as
   * well as a textual description of the problem.  The possible severity
   * levels range from informational messages to fatal errors; see the
   * documentation for {@link SBMLError} for more information.
   * <p>
   * If the file <code>filename</code> could not be read, the file-reading error will
   * appear first.  The error code  can provide a clue about what happened.  For example,
   * a file might be unreadable (either because it does not actually exist
   * or because the user does not have the necessary access priviledges to
   * read it) or some sort of file operation error may have been reported
   * by the underlying operating system.  Callers can check for these
   * situations using a program fragment such as the following:
   * <div class=\'fragment\'><pre>
 {@link SBMLReader} reader = new {@link SBMLReader}();
 {@link SBMLDocument} doc  = reader.readSBMLFromFile(filename);
 
 if (doc.getNumErrors() &gt; 0)
 {
     if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileUnreadable)
     {
         // Handle case of unreadable file here.
     } 
     else if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileOperationError)
     {
         // Handle case of other file operation error here.
     }
     else
     {
         // Handle other error cases.
     }
 }
 </pre></div>
 <p>
   * <p>
   * If the given filename ends with the suffix <code>\'.gz\'</code> (for example, 
   * <code>\'myfile.xml.gz\'</code>), the file is assumed to be compressed in <em>gzip</em>
   * format and will be automatically decompressed upon reading.
   * Similarly, if the given filename ends with <code>\'.zip\'</code> or <code>\'.bz2\'</code>, the
   * file is assumed to be compressed in <em>zip</em> or <em>bzip2</em> format
   * (respectively).  Files whose names lack these suffixes will be read
   * uncompressed.  Note that if the file is in <em>zip</em> format but the
   * archive contains more than one file, only the first file in the
   * archive will be read and the rest ignored.
   * <p>
   * To read a gzip/zip file, libSBML needs to be configured and linked with the
<a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
time.  It also needs to be linked with the <a target=\'_blank\'
href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
these are the default configurations for libSBML.)  Errors about unreadable
files will be logged if a compressed filename is given and libSBML was
<em>not</em> linked with the corresponding required library.

   * <p>
   * @param filename the name or full pathname of the file to be read.
   * <p>
   * @return a pointer to the {@link SBMLDocument} created from the SBML content.
   * <p>
   * @note LibSBML versions 2.x and later versions behave differently in
   * error handling in several respects.  One difference is how early some
   * errors are caught and whether libSBML continues processing a file in
   * the face of some early errors.  In general, libSBML versions after 2.x
   * stop parsing SBML inputs sooner than libSBML version 2.x in the face
   * of XML errors, because the errors may invalidate any further SBML
   * content.  For example, a missing XML declaration at the beginning of
   * the file was ignored by libSBML 2.x but in version 3.x and later, it
   * will cause libSBML to stop parsing the rest of the input altogether.
   * While this behavior may seem more severe and intolerant, it was
   * necessary in order to provide uniform behavior regardless of which
   * underlying XML parser (Expat, Xerces, libxml2) is being used by
   * libSBML.  The XML parsers themselves behave differently in their error
   * reporting, and sometimes libSBML has to resort to the lowest common
   * denominator.
   * <p>
   * @see SBMLError
   */
 public";


%javamethodmodifiers SBMLReader::readSBMLFromFile(const std::string& filename) "
  /**
   * Reads an SBML document from a file.
   * <p>
   * This method is identical to {@link SBMLReader#readSBML(String filename)}.
   * <p>
   * If the file named <code>filename</code> does not exist or its content is not
   * valid SBML, one or more errors will be logged with the {@link SBMLDocument}
   * object returned by this method.  Callers can use the methods on
   * {@link SBMLDocument} such as {@link SBMLDocument#getNumErrors()} and
   * {@link SBMLDocument#getError(long n)} to get the errors.  The object returned by
   * {@link SBMLDocument#getError(long n)} is an {@link SBMLError} object, and it has methods to
   * get the error code, category, and severity level of the problem, as
   * well as a textual description of the problem.  The possible severity
   * levels range from informational messages to fatal errors; see the
   * documentation for {@link SBMLError} for more information.
   * <p>
   * If the file <code>filename</code> could not be read, the file-reading error will
   * appear first.  The error code  can provide a clue about what happened.  For example,
   * a file might be unreadable (either because it does not actually exist
   * or because the user does not have the necessary access priviledges to
   * read it) or some sort of file operation error may have been reported
   * by the underlying operating system.  Callers can check for these
   * situations using a program fragment such as the following:
   * <div class=\'fragment\'><pre>
 {@link SBMLReader} reader = new {@link SBMLReader}();
 {@link SBMLDocument} doc  = reader.readSBMLFromFile(filename);
 
 if (doc.getNumErrors() &gt; 0)
 {
     if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileUnreadable)
     {
         // Handle case of unreadable file here.
     } 
     else if (doc.getError(0).getErrorId() == libsbmlConstants.XMLFileOperationError)
     {
         // Handle case of other file operation error here.
     }
     else
     {
         // Handle other error cases.
     }
 }
 </pre></div>
 <p>
   * <p>
   * If the given filename ends with the suffix <code>\'.gz\'</code> (for example, 
   * <code>\'myfile.xml.gz\'</code>), the file is assumed to be compressed in <em>gzip</em>
   * format and will be automatically decompressed upon reading.
   * Similarly, if the given filename ends with <code>\'.zip\'</code> or <code>\'.bz2\'</code>, the
   * file is assumed to be compressed in <em>zip</em> or <em>bzip2</em> format
   * (respectively).  Files whose names lack these suffixes will be read
   * uncompressed.  Note that if the file is in <em>zip</em> format but the
   * archive contains more than one file, only the first file in the
   * archive will be read and the rest ignored.
   * <p>
   * To read a gzip/zip file, libSBML needs to be configured and linked with the
<a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at compile
time.  It also needs to be linked with the <a target=\'_blank\'
href=\'\'>bzip2</a> library to read files in <em>bzip2</em> format.  (Both of
these are the default configurations for libSBML.)  Errors about unreadable
files will be logged if a compressed filename is given and libSBML was
<em>not</em> linked with the corresponding required library.

   * <p>
   * @param filename the name or full pathname of the file to be read.
   * <p>
   * @return a pointer to the {@link SBMLDocument} created from the SBML content.
   * <p>
   * @note LibSBML versions 2.x and later versions behave differently in
   * error handling in several respects.  One difference is how early some
   * errors are caught and whether libSBML continues processing a file in
   * the face of some early errors.  In general, libSBML versions after 2.x
   * stop parsing SBML inputs sooner than libSBML version 2.x in the face
   * of XML errors, because the errors may invalidate any further SBML
   * content.  For example, a missing XML declaration at the beginning of
   * the file was ignored by libSBML 2.x but in version 3.x and later, it
   * will cause libSBML to stop parsing the rest of the input altogether.
   * While this behavior may seem more severe and intolerant, it was
   * necessary in order to provide uniform behavior regardless of which
   * underlying XML parser (Expat, Xerces, libxml2) is being used by
   * libSBML.  The XML parsers themselves behave differently in their error
   * reporting, and sometimes libSBML has to resort to the lowest common
   * denominator.
   * <p>
   * @see SBMLError
   * @see SBMLDocument
   */
 public";


%javamethodmodifiers SBMLReader::readSBMLFromString(const std::string& xml) "
  /**
   * Reads an SBML document from the given XML string.
   * <p>
   * This method is flexible with respect to the presence of an XML
   * declaration at the beginning of the string.  In particular, if the
   * string in <code>xml</code> does not begin with the XML declaration
   * <code>&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;</code>, then this
   * method will automatically prepend the declaration to <code>xml</code>.
   * <p>
   * This method will log a fatal error if the content given in the
   * parameter <code>xml</code> is not SBML.  See the method documentation for
   * {@link SBMLReader#readSBML(String filename)}
   * for an example of code for testing the returned error code.
   * <p>
   * @param xml a string containing a full SBML model
   * <p>
   * @return a pointer to the {@link SBMLDocument} created from the SBML content.
   * <p>
   * @see SBMLReader#readSBML(String filename)
   */
 public";


%javamethodmodifiers SBMLReader::hasZlib "
  /**
   * Predicate returning <code>true</code> if this copy
   * of libSBML supports <i>gzip</I> and <i>zip</i> format compression.
   * <p>
   * @return <code>true</code> if libSBML has been linked with the <i>zlib</i>
   * library, <code>false</code> otherwise.
   * <p>
   * @see #hasBzip2()
   */
 public";


%javamethodmodifiers SBMLReader::hasBzip2 "
  /**
   * Predicate returning <code>true</code> if
   * this copy of libSBML supports <i>bzip2</i> format compression.
   * <p>
   * @return <code>true</code> if libSBML is linked with the <i>bzip2</i>
   * libraries, <code>false</code> otherwise.
   * <p>
   * @see #hasZlib()
   */
 public";


%javamethodmodifiers SBMLReader::readInternal(const char* content, bool isFile = true) "
  /**
   * Used by readSBML() and readSBMLFromString().
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers readSBML(const char *filename) "
/**
 * Reads an SBML document from the given file <code>filename</code>.
 * <p>
 * If <code>filename</code> does not exist, or it is not an SBML file, an error will
 * be logged in the error log of the {@link SBMLDocument} object returned by this
 * method.  Calling programs can inspect this error log to determine
 * the nature of the problem.  Please refer to the definition of
 * {@link SBMLDocument} for more information about the error reporting mechanism.
 * <p>
 * @return a pointer to the {@link SBMLDocument} read.
 */
 public";


%javamethodmodifiers readSBMLFromFile(const char *filename) "
/**
 * Reads an SBML document from the given file <code>filename</code>.
 * <p>
 * If <code>filename</code> does not exist, or it is not an SBML file, an error will
 * be logged in the error log of the {@link SBMLDocument} object returned by this
 * method.  Calling programs can inspect this error log to determine
 * the nature of the problem.  Please refer to the definition of
 * {@link SBMLDocument} for more information about the error reporting mechanism.
 * <p>
 * @return a pointer to the {@link SBMLDocument} read.
 */
 public";


%javamethodmodifiers readSBMLFromString(const char *xml) "
/**
 * Reads an SBML document from a string assumed to be in XML format.
 * <p>
 * If the string does not begin with XML declaration,
 *<div class=\'fragment\'><pre>
&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;
</pre></div>
 * <p>
 * an XML declaration string will be prepended.
 * <p>
 * This method will report an error if the given string <code>xml</code> is not SBML.
 * The error will be logged in the error log of the {@link SBMLDocument} object
 * returned by this method.  Calling programs can inspect this error log to
 * determine the nature of the problem.  Please refer to the definition of
 * {@link SBMLDocument} for more information about the error reporting mechanism.
 * <p>
 * @return a pointer to the {@link SBMLDocument} read.
 */
 public";


%typemap(javaimports) SBMLWriter "
/** 
 * Methods for writing SBML to files and text strings.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The {@link SBMLWriter} class is the converse of {@link SBMLReader}, and provides the
 * main interface for serializing SBML models into XML and writing the
 * result to files and text strings.  The methods for writing SBML all take
 * an {@link SBMLDocument} object and a destination.  They return a boolean or
 * integer value to indicate success or failure.
 * <p>
 * <h2>Support for writing compressed files</h2>
 * <p>
 * LibSBML provides support for writing (as well as reading) compressed
 * SBML files.  The process is transparent to the calling
 * application&mdash;the application does not need to do anything
 * deliberate to invoke the functionality.  If a given SBML filename ends
 * with an extension for the <em>gzip</em>, <em>zip</em> or <em>bzip2</em> compression
 * formats (respectively, <code>&quot;.gz&quot;</code>,
 * <code>&quot;.zip&quot;</code>, or <code>&quot;.bz2&quot;</code>),
 * then the methods
 * {@link SBMLWriter#writeSBML(SBMLDocument d, String filename)}
 * and {@link SBMLReader#readSBML(String filename)}
 * will automatically compress and decompress the file while writing and
 * reading it.  If the filename has no such extension, it
 * will be written and read uncompressed as normal.
 * <p>
 * The compression feature requires that the <em>zlib</em> (for <em>gzip</em> and 
 * <em>zip</em> formats) and/or <em>bzip2</em> (for <em>bzip2</em> format) be available on the
 * system running libSBML, and that libSBML was configured with their
 * support compiled-in.  Please see the libSBML <a href=\'../../../{@link libsbml}-installation.html\'>installation instructions</a> for 
 * more information about this.  The methods
 * {@link SBMLWriter#hasZlib()} and
 * {@link SBMLWriter#hasBzip2()}
 * can be used by an application to query at run-time whether support
 * for the compression libraries is available in the present copy of
 * libSBML.
 * <p>
 * Support for compression is not mandated by the SBML standard, but
 * applications may find it helpful, particularly when large SBML models
 * are being communicated across data links of limited bandwidth.
 */
"

%javamethodmodifiers SBMLWriter::SBMLWriter "
  /**
   * Creates a new {@link SBMLWriter}.
   * <p>
   * The libSBML {@link SBMLWriter} objects offer methods for writing SBML in
   * XML form to files and text strings.
   */
 public";


%javamethodmodifiers SBMLWriter::setProgramName(const std::string& name) "
  /**
   * Sets the name of this program, i.e., the program that is about to
   * write out the {@link SBMLDocument}.
   * <p>
   * If the program name and version are set (see
   * {@link SBMLWriter#setProgramVersion(String version)}), the
   * following XML comment, intended for human consumption, will be written
   * at the beginning of the XML document:
   * <div class=\'fragment\'><pre>
 &lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
 on yyyy-MM-dd HH:mm with libSBML version &lt;{@link libsbml} version&gt;. --&gt;
 </pre></div>
   * <p>
   * If the program name and version are not set at some point before
   * calling the writeSBML() methods, no such comment is written out.
   * <p>
   * @param name the name of this program (where \'this program\' refers to
   * program in which libSBML is embedded, not libSBML itself!)
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #setProgramVersion(String version)
   */
 public";


%javamethodmodifiers SBMLWriter::setProgramVersion(const std::string& version) "
  /**
   * Sets the version of this program, i.e., the program that is about to
   * write out the {@link SBMLDocument}.
   * <p>
   * If the program version and name are set (see
   * {@link SBMLWriter#setProgramName(String name)}), the
   * following XML comment, intended for human consumption, will be written
   * at the beginning of the document:
   * <div class=\'fragment\'><pre>
 &lt;!-- Created by &lt;program name&gt; version &lt;program version&gt;
 on yyyy-MM-dd HH:mm with libSBML version &lt;{@link libsbml} version&gt;. --&gt;
 </pre></div>
   * <p>
   * If the program version and name are not set at some point before
   * calling the writeSBML() methods, no such comment is written out.
   * <p>
   * @param version the version of this program (where \'this program\'
   * refers to program in which libSBML is embedded, not libSBML itself!)
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #setProgramName(String name)
   */
 public";


%javamethodmodifiers SBMLWriter::writeSBML(const SBMLDocument* d, const std::string& filename) "
  /**
   * Writes the given SBML document to filename.
   * <p>
   * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

   * <p>
   * @param d the SBML document to be written
   * <p>
   * @param filename the name or full pathname of the file where the SBML
   * is to be written. 
   * <p>
   * @return <code>true</code> on success and <code>false</code> if the filename could not be
   * opened for writing.
   * <p>
   * @note To write a gzip/zip file, libSBML needs to be configured and linked with
the <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at
compile time.  It also needs to be linked with the <a target=\'_blank\'
href=\'\'>bzip2</a> library to write files in <em>bzip2</em> format.  (Both
of these are the default configurations for libSBML.)  Errors about
unreadable files will be logged and this method will return
<code>false</code> if a compressed filename is given and libSBML was
<em>not</em> linked with the corresponding required library.

   * <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */
 public";


%javamethodmodifiers SBMLWriter::writeSBML(const SBMLDocument* d, std::ostream& stream) "
  /**
   * Writes the given SBML document to the output stream.
   * <p>
   * @param d the SBML document to be written
   * <p>
   * @param stream the stream object where the SBML is to be written.
   * <p>
   * @return <code>true</code> on success and <code>false</code> if one of the underlying
   * parser components fail (rare).
   * <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */
 public";


%javamethodmodifiers SBMLWriter::writeToString(const SBMLDocument* d) "
  /**
   * Writes the given SBML document to an in-memory string and returns a
   * pointer to it.
   * <p>
   * The string is owned by the caller and should be freed (with <code>free</code>())
   * when no longer needed.
   * <p>
   * @param d the SBML document to be written
   * <p>
   * @return the string on success and <code>0</code> if one of the underlying parser
   * components fail.
   * <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLWriter::writeSBMLToFile(const SBMLDocument* d, const std::string& filename) "
  /**
   * Writes the given SBML document to filename.
   * <p>
   * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

   * <p>
   * @param d the SBML document to be written
   * <p>
   * @param filename the name or full pathname of the file where the SBML
   * is to be written. 
   * <p>
   * @return <code>true</code> on success and <code>false</code> if the filename could not be
   * opened for writing.
   * <p>
   * @note To write a gzip/zip file, libSBML needs to be configured and linked with
the <a target=\'_blank\' href=\'http://www.zlib.net/\'>zlib</a> library at
compile time.  It also needs to be linked with the <a target=\'_blank\'
href=\'\'>bzip2</a> library to write files in <em>bzip2</em> format.  (Both
of these are the default configurations for libSBML.)  Errors about
unreadable files will be logged and this method will return
<code>false</code> if a compressed filename is given and libSBML was
<em>not</em> linked with the corresponding required library.

   * <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */
 public";


%javamethodmodifiers SBMLWriter::writeSBMLToString(const SBMLDocument* d) "
  /**
   * Writes the given SBML document to an in-memory string and returns a
   * pointer to it.
   * <p>
   * The string is owned by the caller and should be freed (with <code>free</code>())
   * when no longer needed.
   * <p>
   * @param d the SBML document to be written
   * <p>
   * @return the string on success and <code>0</code> if one of the underlying parser
   * components fail.
   * <p>
   * @see #setProgramVersion(String version)
   * @see #setProgramName(String name)
   */
 public";


%javamethodmodifiers SBMLWriter::hasZlib "
  /**
   * Predicate returning <code>true</code> if this copy of libSBML has been linked
   * with the <em>zlib</em> library.
   * <p>
   * LibSBML supports reading and writing files compressed with either
   * bzip2 or zip/gzip compression.  The facility depends on libSBML having
   * been compiled with the necessary support libraries.  This method
   * allows a calling program to inquire whether that is the case for the
   * copy of libSBML it is using.
   * <p>
   * @return <code>true</code> if libSBML is linked with zlib, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBMLWriter::hasBzip2 "
  /**
   * Predicate returning <code>true</code> if this copy of libSBML has been linked
   * with the <em>bzip2</em> library.
   * <p>
   * LibSBML supports reading and writing files compressed with either
   * bzip2 or zip/gzip compression.  The facility depends on libSBML having
   * been compiled with the necessary support libraries.  This method
   * allows a calling program to inquire whether that is the case for the
   * copy of libSBML it is using.
   * <p>
   * @return <code>true</code> if libSBML is linked with bzip2, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers writeSBML(const SBMLDocument_t *d, const char *filename) "
/**
 * Writes the given SBML document <code>d</code> to the file named by <code>filename</code>.
 * <p>
 * This function is identical to <a href=\'#writeSBMLToFile(org.sbml.{@link libsbml}.SBMLDocument, java.lang.String)\'><code>writeSBMLToFile(SBMLDocument d, String filename)</code></a>.
 * <p>
 * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

 * <p>
 * @param d the {@link SBMLDocument} object to be written out in XML format
 * <p>
 * @param filename a string giving the path to a file where the XML
 * content is to be written.
 * <p>
 * @return <code>1</code> on success and <code>0</code> (zero) if <code>filename</code> could not be
 * written.  Some possible reasons for failure include (a) being unable to
 * open the file, and (b) using a filename that indicates a compressed SBML
 * file (i.e., a filename ending in <code>&quot;.zip&quot;</code> or
 * similar) when the compression functionality has not been enabled in
 * the underlying copy of libSBML.
 * <p>
 * <p>
 * <p>
 * @see SBMLWriter#hasZlib()
 * @see SBMLWriter#hasBzip2()
 */
 public";


%javamethodmodifiers writeSBMLToString(const SBMLDocument_t *d) "
/**
 * Writes the given SBML document <code>d</code> to an in-memory string and
 * returns the string.
 * <p>
 * This is a convenience function that uses the
 * {@link SBMLWriter#writeSBMLToString(SBMLDocument d)} method internally,
 * yet does not require the caller to create an {@link SBMLWriter} object first.
 * <p>
 * @param d an {@link SBMLDocument} object to be written out in XML format
 * <p>
 * @return the string on success and <code>null</code> if one of the underlying parser
 * components fail.
 * <p>
 * <p>
 */
 public";


%javamethodmodifiers writeSBMLToFile(const SBMLDocument_t *d, const char *filename) "
/**
 * Writes the given SBML document <code>d</code> to the file <code>filename</code>.
 * <p>
 * This is a convenience function that uses the
 * {@link SBMLWriter#writeSBMLToFile(SBMLDocument d, String
 * filename)} method internally, yet does not require the caller to create
 * an {@link SBMLWriter} object first.
 * <p>
 * If the given filename ends with the suffix <code>&quot;.gz&quot;</code>
(for example, <code>&quot;myfile.xml.gz&quot;</code>), libSBML assumes the
caller wants the file to be written compressed in <em>gzip</em> format.
Similarly, if the given filename ends with <code>&quot;.zip&quot;</code> or
<code>&quot;.bz2&quot;</code>, libSBML assumes the caller wants the file to
be compressed in <em>zip</em> or <em>bzip2</em> format (respectively).
Files whose names lack these suffixes will be written uncompressed.
<em>Special considerations for the zip format</em>: If the given filename
ends with <code>&quot;.zip&quot;</code>, the file placed in the zip archive
will have the suffix <code>&quot;.xml&quot;</code> or
<code>&quot;.sbml&quot;</code>.  For example, the file in the zip archive
will be named <code>&quot;test.xml&quot;</code> if the given filename is
<code>&quot;test.xml.zip&quot;</code> or <code>&quot;test.zip&quot;</code>.
Similarly, the filename in the archive will be
<code>&quot;test.sbml&quot;</code> if the given filename is
<code>&quot;test.sbml.zip&quot;</code>.

 * <p>
 * @param d an {@link SBMLDocument} object to be written out in XML format
 * <p>
 * @param filename a string giving the path to a file where the XML
 * content is to be written.
 * <p>
 * @return <code>1</code> on success and <code>0</code> (zero) if <code>filename</code> could not be
 * written.  Some possible reasons for failure include (a) being unable to
 * open the file, and (b) using a filename that indicates a compressed SBML
 * file (i.e., a filename ending in <code>&quot;.zip&quot;</code> or
 * similar) when the compression functionality has not been enabled in
 * the underlying copy of libSBML.
 * <p>
 * <p>
 * <p>
 * @see SBMLWriter#hasZlib()
 * @see SBMLWriter#hasBzip2()
 */
 public";


%javamethodmodifiers SBMLTypeCode_toString(int tc, const char* pkgName) "
/**
 * This method takes an SBML type code and returns a string representing
 * the code.
 * <p>
 * LibSBML attaches an identifying code to every
 * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
 * other languages, the set of type codes is stored in an enumeration; in
 * the Java language interface for libSBML, the type codes are defined as
 * static integer constants in the interface class {@link
 * libsbmlConstants}.  The names of the type codes all begin with the
 * characters <code>SBML_.</code> 
 * <p>
 * @return a human readable name for the given
 * SBML type code.
 * <p>
 * @note The caller does not own the returned string and is therefore not
 * allowed to modify it.
 */
 public";


%typemap(javaimports) SBase "
/** 
 * LibSBML implementation of SBase, the base class of most SBML objects.
 * <p>
 * Most components in SBML are derived from a single abstract base type,
 * {@link SBase}.  In addition to serving as the parent class for most other
 * classes of objects in SBML, this base type is designed to allow a
 * modeler or a software package to attach arbitrary information to each
 * major element or list in an SBML model.
 * <p>
 * {@link SBase} has an optional subelement called \'notes\'.  It is intended to
 * serve as a place for storing optional information intended to be seen by
 * humans.  An example use of the \'notes\' element would be to contain
 * formatted user comments about the model element in which the \'notes\'
 * element is enclosed.  There are certain conditions on the XHTML content
 * permitted inside the \'notes\' element; please consult the <a
 * target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for \'notes\'
 * content.
 * <p>
 * {@link SBase} has another optional subelement called \'annotation\'.  Whereas the
 * \'notes\' element described above is a container for content to be shown
 * directly to humans, the \'annotation\' element is a container for optional
 * software-generated content <em>not</em> meant to be shown to humans.  The
 * element\'s content type is <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
 * \'any\'</a>, allowing essentially arbitrary data content.  SBML places
 * only a few restrictions on the organization of the content; these are
 * intended to help software tools read and write the data as well as help
 * reduce conflicts between annotations added by different tools.  As is
 * the case with \'notes\', it is important to refer to the <a
 * target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for
 * \'annotation\' content.
 * <p>
 * It is worth pointing out that the \'annotation\' element in the definition
 * of {@link SBase} exists in order that software developers may attach optional
 * application-specific data to the elements in an SBML model.  However, it
 * is important that this facility not be misused.  In particular, it is
 * <em>critical</em> that data essential to a model definition or that can
 * be encoded in existing SBML elements is <em>not</em> stored in
 * \'annotation\'. {@link Parameter} values, functional dependencies between model
 * elements, etc., should not be recorded as annotations.  It is crucial to
 * keep in mind the fact that data placed in annotations can be freely
 * ignored by software applications.  If such data affects the
 * interpretation of a model, then software interoperability is greatly
 * impeded.
 * <p>
 * SBML Level 2 introduced an optional {@link SBase} attribute named \'metaid\' for
 * supporting metadata annotations using RDF (<a target=\'_blank\'
 * href=\'http://www.w3.org/RDF/\'>Resource Description Format</a>). The
 * attribute value has the data type <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML identifier
 * type, which means each \'metaid\' value must be globally unique within an
 * SBML file.  (Importantly, this uniqueness criterion applies across any
 * attribute with type <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML
 * ID</a>, not just the \'metaid\' attribute used by SBML&mdash;something to
 * be aware of if your application-specific XML content inside the
 * \'annotation\' subelement happens to use <a
 * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)  The \'metaid\' value
 * serves to identify a model component for purposes such as referencing
 * that component from metadata placed within \'annotation\' subelements.
 * <p>
 * Beginning with SBML Level 2 Version 3, {@link SBase} also has an optional
 * attribute named \'sboTerm\' for supporting the use of the Systems Biology
 * Ontology.  In SBML proper, the data type of the attribute is a string of
 * the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a seven digit integer number;
 * libSBML simplifies the representation by only storing the \'NNNNNNN\'
 * integer portion.  Thus, in libSBML, the \'sboTerm\' attribute on {@link SBase} has
 * data type <code>int</code>, and {@link SBO} identifiers are stored simply as integers.
 * (For convenience, {@link SBase} offers methods for returning both the integer
 * form and a text-string form of the {@link SBO} identifier.)  {@link SBO} terms are a
 * type of optional annotation, and each different class of SBML object
 * derived from {@link SBase} imposes its own requirements about the values
 * permitted for \'sboTerm\'.  Please consult the SBML Level&nbsp;2
 * Version&nbsp;4 specification for more information about the use of {@link SBO}
 * and the \'sboTerm\' attribute.
 * <p>
 * Finally, note that, in the list of methods on {@link SBase}, there is no public
 * constructor because {@link SBase} is an abstract class.  The constructors reside
 * in the subclasses derived from {@link SBase}.
 * <p>
 * <p>
 * <h2>Standard format for annotations linking data resources</h2>
 * <p>
 * SBML Level 2 Versions 2, 3 and 4 define a proposed regular format for
 * encoding two particular categories of annotations: (a) references to
 * controlled vocabulary terms and database identifiers which define and
 * describe biological and biochemical entities in a model; and (b)
 * descriptions of the provenance of a model, including its author(s) and
 * modification history.
 */
"

%javamethodmodifiers SBase::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this {@link SBase} object.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers SBase::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SBase} object.
   * <p>
   * @return a (deep) copy of this {@link SBase} object.
   */
 public";


%javamethodmodifiers SBase::getMetaId() const "
  /**
   * Returns the value of the \'metaid\' attribute of this object.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format). The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model
   * component for purposes such as referencing that component from
   * metadata placed within \'annotation\' subelements.
   * <p>
   * @return the metaid of this SBML object.
   * <p>
   * @see #isSetMetaId()
   * @see #setMetaId(String metaid)
   */
 public";


%javamethodmodifiers SBase::getMetaId "
  /**
   * Returns the value of the \'metaid\' attribute of this object.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format).  The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model
   * component for purposes such as referencing that component from
   * metadata placed within \'annotation\' subelements.
   * <p>
   * @return the metaid of this SBML object, as a string.
   * <p>
   * @see #isSetMetaId()
   * @see #setMetaId(String metaid)
   */
 public";


%javamethodmodifiers SBase::getId() const "
  /**
   * Returns the value of the \'metaid\' attribute of this object.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format).  The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model
   * component for purposes such as referencing that component from
   * metadata placed within \'annotation\' subelements.
   * <p>
   * @return the metaid of this SBML object, as a string.
   * <p>
   * @see #isSetMetaId()
   * @see #setMetaId(String metaid)
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getName() const "
  /**
   * Returns the value of the \'metaid\' attribute of this object.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format).  The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model
   * component for purposes such as referencing that component from
   * metadata placed within \'annotation\' subelements.
   * <p>
   * @return the metaid of this SBML object, as a string.
   * <p>
   * @see #isSetMetaId()
   * @see #setMetaId(String metaid)
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getNotes "
  /**
   * Returns the content of the \'notes\' subelement of this object as
   * a tree of {@link XMLNode} objects.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * The \'notes\' element content returned by this method will be in XML
   * form, but libSBML does not provide an object model specifically for
   * the content of notes.  Callers will need to traverse the XML tree
   * structure using the facilities available on {@link XMLNode} and related
   * objects.  For an alternative method of accessing the notes, see
   * getNotesString().
   * <p>
   * @return the content of the \'notes\' subelement of this SBML object as a
   * tree structure composed of {@link XMLNode} objects.
   * <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::getNotesString "
  /**
   * Returns the content of the \'notes\' subelement of this object as a
   * string.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * For an alternative method of accessing the notes, see getNotes(),
   * which returns the content as an {@link XMLNode} tree structure.  Depending on
   * an application\'s needs, one or the other method may be more
   * convenient.
   * <p>
   * @return the content of the \'notes\' subelement of this SBML object as a
   * string.
   * <p>
   * @see #getNotes()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::getAnnotation "
  /**
   * Returns the content of the \'annotation\' subelement of this object as
   * a tree of {@link XMLNode} objects.
   * <p>
   * Whereas the SBML \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * The annotations returned by this method will be in XML form.  LibSBML
   * provides an object model and related interfaces for certain specific
   * kinds of annotations, namely model history information and RDF
   * content.  See the {@link ModelHistory}, {@link CVTerm} and {@link RDFAnnotationParser} classes
   * for more information about the facilities available.
   * <p>
   * @return the annotation of this SBML object as a tree of {@link XMLNode} objects.
   * <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::getAnnotationString "
  /**
   * Returns the content of the \'annotation\' subelement of this object as a
   * character string.
   * <p>
   * Whereas the SBML \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * The annotations returned by this method will be in string form.
   * <p>
   * @return the annotation of this SBML object as a character string.
   * <p>
   * @see #getAnnotation()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::getNamespaces() const "
  /**
   * Returns a list of the XML Namespaces declared on this SBML document.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in SBML Level&nbsp;3) packages used in addition to SBML Level&nbsp;3
   * Core.
   * <p>
   * @return the XML Namespaces associated with this SBML object
   * <p>
   * @see #getLevel()
   * @see #getVersion()
   */
 public";


%javamethodmodifiers SBase::getSBMLDocument() const "
  /**
   * Returns the {@link SBMLDocument} object containing <em>this</em> object instance.
   * <p>
   * LibSBML uses the class {@link SBMLDocument} as a top-level container for
   * storing SBML content and data associated with it (such as warnings and
   * error messages).  An SBML model in libSBML is contained inside an
   * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
   * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
   * specifications, but it does not have a direct correspondence in SBML
   * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
   * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   * <p>
   * This method allows the caller to obtain the {@link SBMLDocument} for the
   * current object.
   * <p>
   * @return the parent {@link SBMLDocument} object of this SBML object.
   * <p>
   * @see #getParentSBMLObject()
   * @see #getModel()
   */
 public";


%javamethodmodifiers SBase::getSBMLDocument "
  /**
   * Returns the {@link SBMLDocument} object containing <em>this</em> object instance.
   * <p>
   * LibSBML uses the class {@link SBMLDocument} as a top-level container for
   * storing SBML content and data associated with it (such as warnings and
   * error messages).  An SBML model in libSBML is contained inside an
   * {@link SBMLDocument} object.  {@link SBMLDocument} corresponds roughly to the class
   * <i>SBML</i> defined in the SBML Level&nbsp;3 and Level&nbsp;2
   * specifications, but it does not have a direct correspondence in SBML
   * Level&nbsp;1.  (But, it is created by libSBML no matter whether the
   * model is Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)
   * <p>
   * This method allows the caller to obtain the {@link SBMLDocument} for the
   * current object.
   * <p>
   * @return the parent {@link SBMLDocument} object of this SBML object.
   * <p>
   * @see #getParentSBMLObject()
   * @see #getModel()
   */
 public";


%javamethodmodifiers SBase::getParentSBMLObject "
  /**
   * Returns the parent SBML object containing this object.
   * <p>
   * This returns the immediately-containing object.  This method is
   * convenient when holding an object nested inside other objects in an
   * SBML model.  
   * <p>
   * @return the parent SBML object of this SBML object.
   * <p>
   * @see #getSBMLDocument()
   * @see #getModel()
   */
 public";


%javamethodmodifiers SBase::getAncestorOfType(int type, const std::string pkgName = "core") "
  /**
   * Returns the first ancestor object that has the given SBML type code.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * This method searches the tree of objects that are parents of this
   * object, and returns the first one that has the given SBML type code.
   * If the optional argument <code>pkgName</code> is given, it will cause the search
   * to be limited to the SBML Level&nbsp;3 package given.
   * <p>
   * @param type the SBML type code of the object sought
   * <p>
   * @param pkgName (optional) the short name of an SBML Level&nbsp;3
   * package to which the sought-after object must belong
   * <p>
   * @return the ancestor SBML object of this SBML object that corresponds
   * to the given SBML object type
   * code, or <code>null</code> if no ancestor exists.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers SBase::getSBOTerm() const "
  /**
   * Returns the integer portion of the value of the \'sboTerm\' attribute of
   * this object.
   * <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers.  (For convenience, libSBML offers
   * methods for returning both the integer form and a text-string form of
   * the {@link SBO} identifier.)
   * <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   * <p>
   * @return the value of the \'sboTerm\' attribute as an integer, or <code>-1</code>
   * if the value is not set.
   */
 public";


%javamethodmodifiers SBase::getSBOTermID() const "
  /**
   * Returns the string representation of the \'sboTerm\' attribute of
   * this object.
   * <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers.  This method returns the entire {@link SBO}
   * identifier as a text string in the form \'SBO:NNNNNNN\'.
   * <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   * <p>
   * @return the value of the \'sboTerm\' attribute as a string (its value
   * will be of the form \'SBO:NNNNNNN\'), or an empty string if
   * the value is not set.
   */
 public";


%javamethodmodifiers SBase::getLine() const "
  /**
   * Returns the line number on which this object first appears in the XML
   * representation of the SBML document.
   * <p>
   * @return the line number of this SBML object.
   * <p>
   * @note The line number for each construct in an SBML model is set upon
   * reading the model.  The accuracy of the line number depends on the
   * correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real line number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   * <p>
   * @see #getColumn()
   */
 public";


%javamethodmodifiers SBase::getColumn() const "
  /**
   * Returns the column number on which this object first appears in the XML
   * representation of the SBML document.
   * <p>
   * @return the column number of this SBML object.
   * <p>
   * @note The column number for each construct in an SBML model is set
   * upon reading the model.  The accuracy of the column number depends on
   * the correctness of the XML representation of the model, and on the
   * particular XML parser library being used.  The former limitation
   * relates to the following problem: if the model is actually invalid
   * XML, then the parser may not be able to interpret the data correctly
   * and consequently may not be able to establish the real column number.
   * The latter limitation is simply that different parsers seem to have
   * their own accuracy limitations, and out of all the parsers supported
   * by libSBML, none have been 100% accurate in all situations. (At this
   * time, libSBML supports the use of <a target=\'_blank\'
   * href=\'http://xmlsoft.org\'>libxml2</a>, <a target=\'_blank\'
   * href=\'http://expat.sourceforge.net/\'>Expat</a> and <a target=\'_blank\'
   * href=\'http://http://xerces.apache.org/xerces-c/\'>Xerces</a>.)
   * <p>
   * @see #getLine()
   */
 public";


%javamethodmodifiers SBase::getModelHistory() const "
  /**
   * Returns the {@link ModelHistory} object, if any, attached to this object.
   * <p>
   * @return the {@link ModelHistory} object attached to this object, or <code>null</code> if
   * none exist.
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */
 public";


%javamethodmodifiers SBase::getModelHistory "
  /**
   * Returns the {@link ModelHistory} object, if any, attached to this object.
   * <p>
   * @return the {@link ModelHistory} object attached to this object, or <code>null</code> if
   * none exist.
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */
 public";


%javamethodmodifiers SBase::isSetMetaId() const "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s \'metaid\' attribute is set.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format). The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model component for purposes
   * such as referencing that component from metadata placed within
   * \'annotation\' subelements.
   * <p>
   * @return <code>true</code> if the \'metaid\' attribute of this SBML object is
   * set, <code>false</code> otherwise.
   * <p>
   * @see #getMetaId()
   * @see #setMetaId(String metaid)
   */
 public";


%javamethodmodifiers SBase::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s \'metaid\' attribute is set.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format). The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model component for purposes
   * such as referencing that component from metadata placed within
   * \'annotation\' subelements.
   * <p>
   * @return <code>true</code> if the \'metaid\' attribute of this SBML object is
   * set, <code>false</code> otherwise.
   * <p>
   * @see #getMetaId()
   * @see #setMetaId(String metaid)
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s \'metaid\' attribute is set.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format). The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model component for purposes
   * such as referencing that component from metadata placed within
   * \'annotation\' subelements.
   * <p>
   * @return <code>true</code> if the \'metaid\' attribute of this SBML object is
   * set, <code>false</code> otherwise.
   * <p>
   * @see #getMetaId()
   * @see #setMetaId(String metaid)
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::isSetNotes() const "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s \'notes\' subelement exists and has content.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * @return <code>true</code> if a \'notes\' subelement exists, <code>false</code> otherwise.
   * <p>
   * @see #getNotes()
   * @see #getNotesString()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::isSetAnnotation() const "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s \'annotation\' subelement exists and has content.
   * <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * @return <code>true</code> if a \'annotation\' subelement exists, <code>false</code>
   * otherwise.
   * <p>
   * @see #getAnnotation()
   * @see #getAnnotationString()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::isSetSBOTerm() const "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s \'sboTerm\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'sboTerm\' attribute of this SBML object is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBase::setMetaId(const std::string& metaid) "
  /**
   * Sets the value of the \'metaid\' attribute of this object.
   * <p>
   * The string <code>metaid</code> is copied.  The value of <code>metaid</code> must be an
   * identifier conforming to the syntax defined by the XML 1.0 data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>ID</a>.  Among other
   * things, this type requires that a value is unique among all the values
   * of type XML ID in an {@link SBMLDocument}.  Although SBML only uses <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a> for the \'metaid\'
   * attribute, callers should be careful if they use
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>\'s in XML
   * portions of a model that are not defined by SBML, such as in the
   * application-specific content of the \'annotation\' subelement.
   * <p>
   * @param metaid the identifier string to use as the value of the
   * \'metaid\' attribute
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @see #getMetaId()
   * @see #isSetMetaId()
   */
 public";


%javamethodmodifiers SBase::isSetModelHistory "
  /**
   * Predicate returning <code>true</code> if this
   * object has a {@link ModelHistory} object attached to it.
   * <p>
   * @return <code>true</code> if the {@link ModelHistory} of this object is set, 
   * <code>false</code> otherwise.
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */
 public";


%javamethodmodifiers SBase::setId(const std::string& sid) "
  /**
   * Predicate returning <code>true</code> if this
   * object has a {@link ModelHistory} object attached to it.
   * <p>
   * @return <code>true</code> if the {@link ModelHistory} of this object is set, 
   * <code>false</code> otherwise.
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setName(const std::string& name) "
  /**
   * Predicate returning <code>true</code> if this
   * object has a {@link ModelHistory} object attached to it.
   * <p>
   * @return <code>true</code> if the {@link ModelHistory} of this object is set, 
   * <code>false</code> otherwise.
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setAnnotation(const XMLNode* annotation) "
  /**
   * Sets the value of the \'annotation\' subelement of this SBML object.
   * <p>
   * The content of <code>annotation</code> is copied, and any previous content of
   * this object\'s \'annotation\' subelement is deleted.
   * <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * Call this method will result in any existing content of the
   * \'annotation\' subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the 
   * <code>annotation</code> that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use {@link SBase#appendAnnotation(XMLNode annotation)} or
   * {@link SBase#appendAnnotation(String annotation)}.
   * <p>
   * @param annotation an XML structure that is to be used as the new content
   * of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::setAnnotation(const std::string& annotation) "
  /**
   * Sets the value of the \'annotation\' subelement of this SBML object.
   * <p>
   * The content of <code>annotation</code> is copied, and any previous content of
   * this object\'s \'annotation\' subelement is deleted.
   * <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * Call this method will result in any existing content of the
   * \'annotation\' subelement to be discarded.  Unless you have taken steps
   * to first copy and reconstitute any existing annotations into the 
   * <code>annotation</code> that is about to be assigned, it is likely that performing
   * such wholesale replacement is unfriendly towards other software
   * applications whose annotations are discarded.  An alternative may be
   * to use {@link SBase#appendAnnotation(XMLNode annotation)} or
   * {@link SBase#appendAnnotation(String annotation)}.
   * <p>
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::appendAnnotation(const XMLNode* annotation) "
  /**
   * Appends the given <code>annotation</code> to the \'annotation\' subelement of this
   * object.
   * <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a
   * target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type \'any\'</a>,
   * allowing essentially arbitrary well-formed XML data content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * Unlike {@link SBase#setAnnotation(XMLNode annotation)} or
   * {@link SBase#setAnnotation(String annotation)}, this method
   * allows other annotations to be preserved when an application adds its
   * own data.
   * <p>
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(String annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::appendAnnotation(const std::string& annotation) "
  /**
   * Appends the given <code>annotation</code> to the \'annotation\' subelement of this
   * object.
   * <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a
   * target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type \'any\'</a>,
   * allowing essentially arbitrary well-formed XML data content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * Unlike {@link SBase#setAnnotation(XMLNode annotation)} or
   * {@link SBase#setAnnotation(String annotation)}, this method
   * allows other annotations to be preserved when an application adds its
   * own data.
   * <p>
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #unsetAnnotation()
   */
 public";


%javamethodmodifiers SBase::setNotes(const XMLNode* notes) "
  /**
   * Sets the value of the \'notes\' subelement of this SBML object.
   * <p>
   * The content of <code>notes</code> is copied, and any existing content of this
   * object\'s \'notes\' subelement is deleted.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * @param notes an XML structure that is to be used as the content of the
   * \'notes\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(String notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::setNotes(const std::string& notes) "
  /**
   * Sets the value of the \'notes\' subelement of this SBML object to a copy
   * of the string <code>notes</code>.
   * <p>
   * The content of <code>notes</code> is copied, and any existing content of this
   * object\'s \'notes\' subelement is deleted.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * The following code illustrates a very simple way of setting the notes
   * using this method.  Here, the object being annotated is the whole SBML
   * document, but that is for illustration purposes only; you could of
   * course use this same approach to annotate any other SBML component.
   * <div class=\'fragment\'><pre>
{@link SBMLDocument} s = new {@link SBMLDocument}(3, 1);
s.setNotes(\'&lt;body xmlns=\'http://www.w3.org/1999/xhtml\'&gt;here is my note&lt;/p&gt;&lt;/body&gt;\');
</pre></div>
   * <p>
   * <p>
   * @param notes an XML string that is to be used as the content of the
   * \'notes\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::appendNotes(const XMLNode* notes) "
  /**
   * Appends the given <code>notes</code> to the \'notes\' subelement of this object.
   * <p>
   * The content of <code>notes</code> is copied.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * @param notes an XML node structure that is to appended to the content
   * of the \'notes\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes)
   * @see #appendNotes(String notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::appendNotes(const std::string& notes) "
  /**
   * Appends the given <code>notes</code> to the \'notes\' subelement of this object.
   * <p>
   * The content of the parameter <code>notes</code> is copied.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * @param notes an XML string that is to appended to the content of
   * the \'notes\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes)
   * @see #appendNotes(XMLNode notes)
   * @see #unsetNotes()
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::setModelHistory(ModelHistory * history) "
  /**
   * Sets the {@link ModelHistory} of this object.
   * <p>
   * The content of <code>history</code> is copied, and this object\'s existing model
   * history content is deleted.
   * <p>
   * @param history {@link ModelHistory} of this object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */
 public";


%javamethodmodifiers SBase::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   * <p>
   * @param d the {@link SBMLDocument} object to use
   * <p>
   * @see #connectToChild(0
   * @see #enablePackageInternal()
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::connectToParent(SBase* parent) "
  /**
   * Sets the parent SBML object of this SBML object.
   * (Creates a child-parent relationship by the child)
   * This function is called when a child element is
   * set/added/created by its parent element (e.g. by setXXX,
   * addXXX, createXXX, and connectToChild functions of the
   * parent element).
   * <p>
   * @param sb the SBML object to use
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor, assignment operator.
   * <p>
   * @see #setSBMLDocument()
   * @see #enablePackageInternal()
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setSBOTerm(int value) "
  /**
   * Sets the value of the \'sboTerm\' attribute.
   * <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers. 
   * <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   * <p>
   * @param value the NNNNNNN integer portion of the {@link SBO} identifier
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @see #setSBOTerm(String sbo_id)
   */
 public";


%javamethodmodifiers SBase::setSBOTerm(const std::string &sboid) "
  /**
   * Sets the value of the \'sboTerm\' attribute by string.
   * <p>
   * Beginning with SBML Level 2 Version 3, objects derived from {@link SBase} have
   * an optional attribute named \'sboTerm\' for supporting the use of the
   * Systems Biology Ontology.  In SBML proper, the data type of the
   * attribute is a string of the form \'SBO:NNNNNNN\', where \'NNNNNNN\' is a
   * seven digit integer number; libSBML simplifies the representation by
   * only storing the \'NNNNNNN\' integer portion.  Thus, in libSBML, the
   * \'sboTerm\' attribute on {@link SBase} has data type <code>int</code>, and {@link SBO} identifiers
   * are stored simply as integers.  This method lets you set the value of
   * \'sboTerm\' as a complete string of the form \'SBO:NNNNNNN\', whereas
   * setSBOTerm(int value) allows you to set it using the integer form.
   * <p>
   * {@link SBO} terms are a type of optional annotation, and each different class
   * of SBML object derived from {@link SBase} imposes its own requirements about
   * the values permitted for \'sboTerm\'.  Please consult the SBML
   * Level&nbsp;2 Version&nbsp;4 specification for more information about
   * the use of {@link SBO} and the \'sboTerm\' attribute.
   * <p>
   * @param sboid the {@link SBO} identifier string of the form \'SBO:NNNNNNN\'
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @see #setSBOTerm(int value)
   */
 public";


%javamethodmodifiers SBase::setNamespaces(XMLNamespaces* xmlns) "
  /**
   * Sets the namespaces relevant of this SBML object.
   * <p>
   * The content of <code>xmlns</code> is copied, and this object\'s existing
   * namespace content is deleted.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * <p>
   * @param xmlns the namespaces to set
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers SBase::unsetMetaId "
  /**
   * Unsets the value of the \'metaid\' attribute of this SBML object.
   * <p>
   * The optional attribute named \'metaid\', present on every major SBML
   * component type, is for supporting metadata annotations using RDF
   * (Resource Description Format). The attribute value has the data type
   * <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, the XML
   * identifier type, which means each \'metaid\' value must be globally
   * unique within an SBML file.  (Importantly, this uniqueness criterion
   * applies across any attribute with type <a
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>, not just the
   * \'metaid\' attribute used by SBML&mdash;something to be aware of if your
   * application-specific XML content inside the \'annotation\' subelement
   * happens to use <a href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.)
   * The \'metaid\' value serves to identify a model component for purposes
   * such as referencing that component from metadata placed within
   * \'annotation\' subelements.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SBase::unsetId "
  /**
   * Unsets the value of the \'id\' attribute of this SBML object.
   * <p>
   * Most (but not all) objects in SBML include two common attributes: \'id\'
   * and \'name\'.  The identifier given by an object\'s \'id\' attribute value
   * is used to identify the object within the SBML model definition.
   * Other objects can refer to the component using this identifier.  The
   * data type of \'id\' is always either <code>Sid</code> or
   * <code>UnitSId</code>, depending on the object in question.  Both
   * data types are defined as follows:
   * <div class=\'fragment\'><pre>
   *   letter .= \'a\'..\'z\',\'A\'..\'Z\'
   *   digit  .= \'0\'..\'9\'
   *   idChar .= letter | digit | \'_\'
   *   SId    .= ( letter | \'_\' ) idChar</pre></div>
   * <p>
   * The equality of <code>SId</code> and <code>UnitSId</code> type values
   * in SBML is determined by an exact character sequence match; i.e.,
   * comparisons of these identifiers must be performed in a case-sensitive
   * manner.  This applies to all uses of <code>SId</code> and
   * <code>UnitSId</code>.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SBase::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this SBML object.
   * <p>
   * Most (but not all) objects in SBML include two common attributes: \'id\'
   * and \'name\'.  In contrast to the \'id\' attribute, the \'name\' attribute is
   * optional and is not intended to be used for cross-referencing purposes
   * within a model.  Its purpose instead is to provide a human-readable
   * label for the component.  The data type of \'name\' is the type
   * <code>string</code> defined in XML Schema.  SBML imposes no
   * restrictions as to the content of \'name\' attributes beyond those
   * restrictions defined by the <code>string</code> type in XML Schema.
   * <p>
   * The recommended practice for handling \'name\' is as follows.  If a
   * software tool has the capability for displaying the content of \'name\'
   * attributes, it should display this content to the user as a
   * component\'s label instead of the component\'s \'id\'.  If the user
   * interface does not have this capability (e.g., because it cannot
   * display or use special characters in symbol names), or if the \'name\'
   * attribute is missing on a given component, then the user interface
   * should display the value of the \'id\' attribute instead.  (Script
   * language interpreters are especially likely to display \'id\' instead of
   * \'name\'.)
   * <p>
   * As a consequence of the above, authors of systems that automatically
   * generate the values of \'id\' attributes should be aware some systems
   * may display the \'id\'\'s to the user.  Authors therefore may wish to
   * take some care to have their software create \'id\' values that are: (a)
   * reasonably easy for humans to type and read; and (b) likely to be
   * meaningful, for example by making the \'id\' attribute be an abbreviated
   * form of the name attribute value.
   * <p>
   * An additional point worth mentioning is although there are
   * restrictions on the uniqueness of \'id\' values, there are no
   * restrictions on the uniqueness of \'name\' values in a model.  This
   * allows software applications leeway in assigning component identifiers.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SBase::unsetNotes "
  /**
   * Unsets the value of the \'notes\' subelement of this SBML object.
   * <p>
   * The optional SBML element named \'notes\', present on every major SBML
   * component type, is intended as a place for storing optional
   * information intended to be seen by humans.  An example use of the
   * \'notes\' element would be to contain formatted user comments about the
   * model element in which the \'notes\' element is enclosed.  Every object
   * derived directly or indirectly from type {@link SBase} can have a separate
   * value for \'notes\', allowing users considerable freedom when adding
   * comments to their models.
   * <p>
   * The format of \'notes\' elements must be <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a>.  To help
   * verify the formatting of \'notes\' content, libSBML provides the static
   * utility method {@link SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)}; however,
   * readers are urged to consult the appropriate <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML specification
   * document</a> for the Level and Version of their model for more
   * in-depth explanations.  The SBML Level&nbsp;2 and &nbsp;3
   * specifications have considerable detail about how \'notes\' element
   * content must be structured.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #getNotesString()
   * @see #isSetNotes()
   * @see #setNotes(XMLNode notes)
   * @see #setNotes(String notes)
   * @see #appendNotes(XMLNode notes)
   * @see #appendNotes(String notes)
   * @see SyntaxChecker#hasExpectedXHTMLSyntax(XMLNode xhtml)
   */
 public";


%javamethodmodifiers SBase::unsetAnnotation "
  /**
   * Unsets the value of the \'annotation\' subelement of this SBML object.
   * <p>
   * Whereas the {@link SBase} \'notes\' subelement is a container for content to be
   * shown directly to humans, the \'annotation\' element is a container for
   * optional software-generated content <em>not</em> meant to be shown to
   * humans.  Every object derived from {@link SBase} can have its own value for
   * \'annotation\'.  The element\'s content type is <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/2004/REC-xml-20040204/#elemdecls\'>XML type
   * \'any\'</a>, allowing essentially arbitrary well-formed XML data
   * content.
   * <p>
   * SBML places a few restrictions on the organization of the content of
   * annotations; these are intended to help software tools read and write
   * the data as well as help reduce conflicts between annotations added by
   * different tools.  Please see the SBML specifications for more details.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #getAnnotation()
   * @see #getAnnotationString()
   * @see #isSetAnnotation()
   * @see #setAnnotation(XMLNode annotation)
   * @see #setAnnotation(String annotation)
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   */
 public";


%javamethodmodifiers SBase::unsetSBOTerm "
  /**
   * Unsets the value of the \'sboTerm\' attribute of this SBML object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers SBase::addCVTerm(CVTerm * term, bool newBag = false) "
  /**
   * Adds a copy of the given {@link CVTerm} object to this SBML object.
   * <p>
   * @param term the {@link CVTerm} to assign
   * <p>
   * @param newBag if <code>true</code>, creates a new RDF bag with the same identifier
   * as a previous bag, and if <code>false</code>, adds the term to an existing
   * RDF bag with the same type of qualifier as the term being added.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }, if
   * this object lacks a \'metaid\' attribute
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note Since the CV Term uses the \'metaid\' attribute of the object as a
   * reference, if the object has no \'metaid\' attribute value set, then the
   * {@link CVTerm} will not be added.
   * <p>
   * @warning The fact that this method <em>copies</em> the object passed to it
   * means that the caller will be left holding a physically different
   * object instance than the one contained in <em>this</em> object.  Changes
   * made to the original object instance (such as resetting attribute
   * values) will <em>not affect the instance added here</em>.  In
   * addition, the caller should make sure to free the original object if
   * it is no longer being used, or else a memory leak will result.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers SBase::getCVTerms "
  /**
   * Returns a list of {@link CVTerm} objects in the annotations of this SBML
   * object.
   * <p>
   * @return the list of CVTerms for this SBML object.
   */
 public";


%javamethodmodifiers SBase::getCVTerms() const "
  /**
   * Returns a list of {@link CVTerm} objects in the annotations of this SBML
   * object.
   * <p>
   * @return the list of CVTerms for this SBML object.
   */
 public";


%javamethodmodifiers SBase::getNumCVTerms "
  /**
   * Returns the number of {@link CVTerm} objects in the annotations of this SBML
   * object.
   * <p>
   * @return the number of CVTerms for this SBML object.
   */
 public";


%javamethodmodifiers SBase::getCVTerm(unsigned int n) "
  /**
   * Returns the nth {@link CVTerm} in the list of CVTerms of this SBML
   * object.
   * <p>
   * @param n long the index of the {@link CVTerm} to retrieve
   * <p>
   * @return the nth {@link CVTerm} in the list of CVTerms for this SBML object.
   */
 public";


%javamethodmodifiers SBase::unsetCVTerms "
  /**
   * Clears the list of {@link CVTerm} objects attached to this SBML object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SBase::unsetModelHistory "
  /**
   * Unsets the {@link ModelHistory} object attached to this object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note In SBML Level&nbsp;2, model history annotations were only
   * permitted on the {@link Model} element.  In SBML Level&nbsp;3, they are
   * permitted on all SBML components derived from {@link SBase}.
   */
 public";


%javamethodmodifiers SBase::getResourceBiologicalQualifier(std::string resource) "
  /**
   * Returns the MIRIAM <em>biological qualifier</em> associated with the
   * given resource.
   * <p>
   * In <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM</a>,
   * qualifiers are an optional means of indicating the relationship
   * between a model component and its annotations.  There are two broad
   * kinds of annotations: <em>model</em> and <em>biological</em>.  The
   * latter kind is used to qualify the relationship between a model
   * component and a biological entity which it represents.  Examples of
   * relationships include \'is\' and \'has part\', but many others are
   * possible.  MIRIAM defines <a target=\'_blank\'
   * href=\'http://www.ebi.ac.uk/miriam/main/qualifiers/\'>numerous
   * relationship qualifiers</a> to enable different software tools to
   * qualify biological annotations in the same standardized way.  In
   * libSBML, the MIRIAM controlled-vocabulary annotations on an SBML model
   * element are represented using lists of {@link CVTerm} objects, and the
   * the MIRIAM biological qualifiers are represented using
   * values whose
   * names begin with <code>BQB_</code> in the interface class
   * {@link libsbmlConstants}.
   * <p>
   * This method searches the controlled-vocabulary annotations
   * (i.e., the list of {@link CVTerm} objects) on the present object, then out of
   * those that have biological qualifiers, looks for an annotation to the
   * given <code>resource</code>.  If such an annotation is found, it returns the
   * type of biological qualifier associated with that resource as a 
   * value whose name
   * begins with <code>BQB_</code> from the interface
   * class {@link libsbmlConstants}.
   * <p>
   * @param resource string representing the resource; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   * <p>
   * @return the qualifier associated with the resource,
   * or {@link  libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN} if the
   * resource does not exist.
   * <p>
   * * @note The set of MIRIAM biological qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQB_</code> constants defined in {@link libsbmlConstants}
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * <p>
   */
 public";


%javamethodmodifiers SBase::getResourceModelQualifier(std::string resource) "
  /**
   * Returns the MIRIAM <em>model qualifier</em> associated with the
   * given resource.
   * <p>
   * In <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM</a>,
   * qualifiers are an optional means of indicating the relationship
   * between a model component and its annotations.  There are two broad
   * kinds of annotations: <em>model</em> and <em>biological</em>.  The
   * former kind is used to qualify the relationship between a model
   * component and another modeling object.  An example qualifier is
   * \'isDerivedFrom\', to indicate that a given component of the model is
   * derived from the modeling object represented by the referenced
   * resource.  MIRIAM defines <a target=\'_blank\'
   * href=\'http://www.ebi.ac.uk/miriam/main/qualifiers/\'>numerous
   * relationship qualifiers</a> to enable different software tools to
   * qualify model annotations in the same standardized way.  In libSBML,
   * the MIRIAM controlled-vocabulary annotations on an SBML model element
   * are represented using lists of {@link CVTerm} objects, and the 
   * the MIRIAM model qualifiers are represented using
   * values whose
   * names begin with <code>BQM_</code> in the interface class
   * {@link libsbmlConstants}.
   * <p>
   * This method method searches the controlled-vocabulary annotations
   * (i.e., the list of {@link CVTerm} objects) on the present object, then out of
   * those that have model qualifiers, looks for an annotation to the given
   * <code>resource</code>.  If such an annotation is found, it returns the type of
   * type of model qualifier associated with that resource as a 
   * value whose name
   * begins with <code>BQM_</code> from the interface
   * class {@link libsbmlConstants}.
   * <p>
   * @param resource string representing the resource; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   * <p>
   * @return the model qualifier
   * type associated with the resource, or {@link 
   * libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN} if the resource
   * does not exist.
   * <p>
   * * @note The set of MIRIAM model qualifiers grows over
   * time, although relatively slowly.  The values are up to date with
   * MIRIAM at the time of a given libSBML release.  The set of values in
   * list of <code>BQM_</code> constants defined in {@link libsbmlConstants}
   * may be expanded in later libSBML releases, to match
   * the values defined by MIRIAM at that later time.
   * <p>
   */
 public";


%javamethodmodifiers SBase::getModel() const "
  /**
   * Returns the {@link Model} object in which the current object is located.
   * <p>
   * @return the parent {@link Model} of this SBML object.
   * <p>
   * @see #getParentSBMLObject()
   * @see #getSBMLDocument()
   */
 public";


%javamethodmodifiers SBase::getLevel() const "
  /**
   * Returns the SBML Level of the {@link SBMLDocument} object containing this
   * object.
   * <p>
   * @return the SBML level of this SBML object.
   * <p>
   * @see #getVersion()
   * @see #getNamespaces()
   * @see #getPackageVersion()
   */
 public";


%javamethodmodifiers SBase::getVersion() const "
  /**
   * Returns the Version within the SBML Level of the {@link SBMLDocument} object
   * containing this object.
   * <p>
   * @return the SBML version of this SBML object.
   * <p>
   * @see #getLevel()
   * @see #getNamespaces()
   */
 public";


%javamethodmodifiers SBase::getPackageVersion() const "
  /**
   * Returns the Version of the SBML Level&nbsp;3 package to which this
   * element belongs to.
   * <p>
   * @return the version of the SBML Level&nbsp;3 package to which this
   * element belongs. The value <code>0</code> will be returned if this element
   * belongs to the SBML Level&nbsp;3 Core package.
   * <p>
   * @see #getLevel()
   * @see #getVersion()
   */
 public";


%javamethodmodifiers SBase::getPackageName() const "
  /**
   * Returns the name of the SBML Level&nbsp;3 package in which this
   * element is defined.
   * <p>
   * @return the name of the SBML package in which this element is defined.
   * The string <code>&quot;core&quot;</code> will be returned if this
   * element is defined in SBML Level&nbsp;3 Core. The string
   * <code>&quot;unknown&quot;</code> will be returned if this element is
   * not defined in any SBML package.
   */
 public";


%javamethodmodifiers SBase::getTypeCode() const "
  /**
   * Returns the libSBML type code for this object.
   * <p>
   * This method may return the type code of this SBML object, or it may
   * return {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}.  This
   * is because subclasses of {@link SBase} are not required to implement this
   * method to return a type code.  This method is meant primarily for the
   * LibSBML C interface, in which class and subclass information is not
   * readily available.
   * <p>
   * @return the SBML object type code
   * of this SBML object or
   * {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (the default).
   * <p>
   * @see #getElementName()
   * @see #getPackageName()
   */
 public";


%javamethodmodifiers SBase::hasValidLevelVersionNamespaceCombination "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s level/version and namespace values correspond to a valid
   * SBML specification.
   * <p>
   * The valid combinations of SBML Level, Version and Namespace as of this
   * release of libSBML are the following:
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level1\'</code>
   * <li> Level&nbsp;2 Version&nbsp;1: <code>\'http://www.sbml.org/sbml/level2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level2/version2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;3: <code>\'http://www.sbml.org/sbml/level2/version3\'</code>
   * <li> Level&nbsp;2 Version&nbsp;4: <code>\'http://www.sbml.org/sbml/level2/version4\'</code>
   * <li> Level&nbsp;3 Version&nbsp;1 Core: <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>
   * </ul>
   * <p>
   * @return <code>true</code> if the level, version and namespace values of this 
   * SBML object correspond to a valid set of values, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBase::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * This is overridden by subclasses to return a string appropriate to the
   * SBML component.  For example, {@link Model} defines it as returning 
   * <code>\'model\'</code>, {@link CompartmentType} defines it as returning <code>\'compartmentType\'</code>,
   * and so on.
   */
 public";


%javamethodmodifiers SBase::toSBML "
  /**
   * Returns a string consisting of a partial SBML corresponding to just
   * this object.
   * <p>
   * @return the partial SBML that describes this SBML object.
   * <p>
   * @warning This is primarily provided for testing and debugging
   * purposes.  It may be removed in a future version of libSBML.
   */
 public";


%javamethodmodifiers SBase::getPlugin(const std::string& package) "
  /**
   * Returns a plugin object (extension interface) for an SBML Level&nbsp;3
   * package extension with the given package name or URI.
   * <p>
   * @param package the name or URI of the package
   * <p>
   * @return the plugin object (the libSBML extension interface) of
   * a package extension with the given package name or URI.
   */
 public";


%javamethodmodifiers SBase::getPlugin(const std::string& package) const "
  /**
   * Returns a plugin object (extension interface) for an SBML Level&nbsp;3
   * package extension with the given package name or URI.
   * <p>
   * @param package the name or URI of the package
   * <p>
   * @return the plugin object (the {@link libsbml} extension interface) of a
   * package extension with the given package name or URI.
   */
 public";


%javamethodmodifiers SBase::getNumPlugins() const "
  /**
   * Returns the number of plugin objects (extenstion interfaces) for SBML
   * Level&nbsp;3 package extensions known.
   * <p>
   * @return the number of plugin objects (extension interfaces) of
   * package extensions known by this instance of libSBML.
   */
 public";


%javamethodmodifiers SBase::enablePackage(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables or disables the given SBML Level&nbsp;3 package
   * <p>
   * This method enables or disables the specified package on this object
   * and other objects connected by child-parent links in the same
   * {@link SBMLDocument} object.
   * <p>
   * @param pkgURI the URI of the package
   * <p>
   * @param pkgPrefix the XML prefix of the package
   * <p>
   * @param flag whether to enable (<code>true</code>) or disable (<code>false</code>) the package
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_PKG_UNKNOWN LIBSBML_PKG_UNKNOWN }
   * <li> {@link  libsbmlConstants#LIBSBML_PKG_VERSION_MISMATCH LIBSBML_PKG_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_PKG_CONFLICTED_VERSION LIBSBML_PKG_CONFLICTED_VERSION }
   */
 public";


%javamethodmodifiers SBase::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses in which one or more child elements are defined 
   * must override this function.
   * <p>
   * @see setSBMLDocument
   * @see connectToChild
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::isPkgURIEnabled(const std::string& pkgURI) const "
  /**
   * Predicate returning <code>true</code> if an SBML Level&nbsp;3 package with the
   * given URI is enabled with this object.
   * <p>
   * @param pkgURI the URI of the package
   * <p>
   * @return <code>true</code> if the given package is enabled with this object, @c 
   * false otherwise.
   * <p>
   * @see #isPkgEnabled(String pkgName)
   */
 public";


%javamethodmodifiers SBase::isPkgEnabled(const std::string& pkgName) const "
  /**
   * Predicate returning <code>true</code> if the given SBML Level&nbsp;3 package is
   * enabled with this object.
   * <p>
   * The search ignores the package version.
   * <p>
   * @param pkgName the name of the package
   * <p>
   * @return <code>true</code> if the given package is enabled with this object, 
   * <code>false</code> otherwise.
   * <p>
   * @see #isPkgURIEnabled(String pkgURI)
   */
 public";


%javamethodmodifiers SBase::writeExtensionElements(XMLOutputStream& stream) const "
  /**
   * <p>
   * Writes out contained SBML objects of package extensions (if any)
   * as XML elements.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::read(XMLInputStream& stream) "
  /**
   * Reads (initializes) this SBML object by reading from XMLInputStream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::write(XMLOutputStream& stream) const "
  /**
   * Writes (serializes) this SBML object by writing it to XMLOutputStream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::hasRequiredAttributes() const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::hasRequiredElements() const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setSBMLNamespacesAndOwn(SBMLNamespaces * sbmlns) "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getSBMLNamespaces() const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::removeDuplicateAnnotations "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkMathMLNamespace(const XMLToken elem) "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.  For example:
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::SBase(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link SBase} object with the given SBML level, version.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::SBase(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link SBase} object with the given {@link SBMLNamespaces}.
   * Only subclasses may create {@link SBase} objects.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::SBase(const SBase& orig) "
  /**
  * Copy constructor. Creates a copy of this {@link SBase} object.
  <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::createObject(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to create, store, and then
   * return an SBML object corresponding to the next {@link XMLToken} in the
   * XMLInputStream.
   * <p>
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::hasValidLevelVersionNamespaceCombination(int typecode, XMLNamespaces *xmlns) "
  /**
   * Predicate returning <code>true</code> if this
   * object\'s level/version and namespace values correspond to a valid
   * SBML specification.
   * <p>
   * The valid combinations of SBML Level, Version and Namespace as of this
   * release of libSBML are the following:
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level1\'</code>
   * <li> Level&nbsp;2 Version&nbsp;1: <code>\'http://www.sbml.org/sbml/level2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;2: <code>\'http://www.sbml.org/sbml/level2/version2\'</code>
   * <li> Level&nbsp;2 Version&nbsp;3: <code>\'http://www.sbml.org/sbml/level2/version3\'</code>
   * <li> Level&nbsp;2 Version&nbsp;4: <code>\'http://www.sbml.org/sbml/level2/version4\'</code>
   * <li> Level&nbsp;3 Version&nbsp;1 Core: <code>\'http://www.sbml.org/sbml/level3/version1/core\'</code>
   * </ul>
   * <p>
   * @param typecode the typecode for this element
   * @param xmlns the namespaces used by this element.
   * <p>
   * @note  This function is provided as convenience method to be called from constructors. This 
   *        allows to use it in scenarios where the namespaces or typecode have not yet been initialized. 
   * <p>
   * @return <code>true</code> if the level, version and namespace values of this 
   * SBML object correspond to a valid set of values, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getElementPosition() const "
  /**
   * The SBML XML Schema is written such that the order of child elements
   * is significant.  LibSBML can read elements out of order.  If you
   * override this method to indicate the ordinal position of element with
   * respect to its siblings, libSBML will log an error if the element is
   * read out of order.
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings or <code>-1</code> (the default) to indicate the position is not
   * significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getErrorLog "
  /**
   * @return the {@link SBMLErrorLog} used to log errors during while reading and
   * validating SBML.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::logError(  unsigned int       id , const unsigned int level   = 2 , const unsigned int version = 3 , const std::string& details = "" ) "
  /**
   * Convenience method for easily logging problems from within method
   * implementations.
   * <p>
   * This is essentially a short form of getErrorLog()->logError(...)
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::logUnknownAttribute( const std::string& attribute, const unsigned int level, const unsigned int version, const std::string& element ) "
  /**
   * Helper to log a common type of error.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::logUnknownElement( const std::string& element, const unsigned int level, const unsigned int version ) "
  /**
   * Helper to log a common type of error.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::logEmptyString( const std::string& attribute, const unsigned int level, const unsigned int version, const std::string& element) "
  /**
   * Helper to log a common type of error.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to add the list of
   * expected attributes. Be sure to call your parents implementation 
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   * <p>
   *   {@link SBase#writeAttributes(stream)};
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   * <p>
   * (NOTICE) this function doesn\'t write xmlns attributes.
   * Be sure to implement wirteXMLNS() function to write xmlns attributes.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::writeXMLNS(XMLOutputStream& stream) const "
  /**
   * <p>
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream. 
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::syncAnnotation "
  /**
   * Synchronizes the annotation of this SBML object.
   * <p>
   * Annotation element (XMLNode mAnnotation) is synchronized with the 
   * current {@link CVTerm} objects (List mCVTerm).
   * Currently, this method is called in getAnnotation, isSetAnnotation,
   * and writeElements methods.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkOrderAndLogError(SBase* object, int expected) "
  /**
   * Checks that the SBML element appears in the expected order.
   * <p>
   * If <code>object</code> is not in the expected position, an error is logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkListOfPopulated(SBase* object) "
  /**
   * Checks that an SBML {@link ListOf} element is populated.  
   * If a listOf element has been declared with no elements, 
   * an error is logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkUnitSyntax(unsigned int flag = 0) "
  /**
   * Checks the syntax of the unit attribute.
   * The syntax of an unit is of type UnitSId which is defined as:
   * <p>
   *  - letter .= \'a\'..\'z\',\'A\'..\'Z\'
   *  - digit  .= \'0\'..\'9\'
   *  - idChar .= letter | digit | \'_\'
   *  - UnitSId    .= ( letter | \'_\' ) idChar*
   * <p>
   * If the syntax of the unit attribute of this object is incorrect, 
   * an error is logged
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkDefaultNamespace(const XMLNamespaces* xmlns, const std::string& elementName, const std::string& prefix = "") "
  /**
   * Checks that the given default namespace in the given element is valid.
   * If the given default namespace is not valid, an error is logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkAnnotation "
  /**
   * Checks the annotation does not declare an sbml namespace.
   * If the annotation declares an sbml namespace an error is logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::checkXHTML(const XMLNode *) "
  /**
   * Checks that the XHTML is valid.
   * If the xhtml does not conform to the specification of valid xhtml within
   * an sbml document, an error is logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::loadPlugins(SBMLNamespaces *sbmlns) "
  /**
   * Checks that the XHTML is valid.
   * If the xhtml does not conform to the specification of valid xhtml within
   * an sbml document, an error is logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::createExtensionObject(XMLInputStream& stream) "
  /**
   * Create, store, and then return an SBML object of package extensions
   * corresponding to the next {@link XMLToken} in the XMLInputStream.
   * <p>
   * @return the SBML object of package extensions corresponding to next 
   * {@link XMLToken} in the XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setElementNamespace(const std::string &uri) "
  /**
   * Sets the XML namespace to which this element belongs to.
   * For example, all elements that belong to SBML Level 3 Version 1 Core
   * must set the namespace to \'http://www.sbml.org/sbml/level3/version1/core\'; 
   * all elements that belong to Layout Extension Version 1 for SBML Level 3
   * Version 1 Core must set the namespace to 
   * \'http://www.sbml.org/sbml/level3/version1/layout/version1/\'
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getElementNamespace() const "
  /**
   * Gets the XML namespace (URI) to which this element belongs to.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::readExtensionAttributes(const XMLAttributes& attributes) "
  /**
   * Read attributes of package extensions from the given {@link XMLAttributes} 
   * set into their specific fields. 
   * <p>
   * Be sure to call your parents implementation of this function as well.  
   * For example:
   * <p>
   *   {@link SBase#reaeExtensionAttributes(attributes)};
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::writeExtensionAttributes(XMLOutputStream& stream) const "
  /**
   * Write attributes of package extensions to the XMLOutputStream.  
   * <p>
   * Be sure to call your parents implementation of this function as well.  
   * For example:
   * <p>
   *   {@link SBase#writeExtensionAttributes(stream)};
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::storeUnknownExtAttribute(const std::string& element, const XMLAttributes& xattr, unsigned int index) "
  /**
   * Stores the given attribute to the list of ignored attributes if
   * the given attribute belongs to some unknown package extension.
   * Unknown attribute error will be logged if the \'required\' attribute
   * of the package is \'true\' in {@link SBMLDocument} element.
   * <p>
   * The stored attributes will be written out as-is when writing the 
   * {@link SBMLDocument} to a string or a file (i.e. Attributes and elements of 
   * unknown package extensions will not be lost when reading/writing 
   * a file/sting containing them.)
   * <p>
   * @param element the string of element which contains the given attribute
   * @param xattr the {@link XMLAttributes} object which is contained in the given 
   * element
   * @param index the index of the target attribute in the given {@link XMLAttributes}
   * object.
   * <p>
   * @return true will be returned if the given attribute belongs
   * to some unknown package extension, otherwise false will be returned.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::storeUnknownExtElement(XMLInputStream &stream) "
  /**
   * Stores the element of next token if the element belongs to some 
   * unknown package extension. Unknown element error will be logged if
   * the \'required\' attribute of the package is \'true\' in {@link SBMLDocument} 
   * element.
   * <p>
   * The stored elements will be written out as-is when writing the 
   * {@link SBMLDocument} to a string or a file (i.e. Attributes and elements of 
   * unknown package extensions will not be lost when reading/writing 
   * a file/sting containing them.)
   * <p>
   * @return true will be returned if the element of next token belongs
   * to some unknown package extension, otherwise false will be returned.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getPrefix() const "
  /**
   * Return the prefix of this element.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getRootElement "
  /**
   * Returns the root element of the node tree to which this element is connected.
   * <p>
   * @note The root element may not be an {@link SBMLDocument} element. For example,
   * this element is the root element if this element doesn\'t have a parent
   * SBML object (i.e. mParentSBMLObject is null)
   * <p>
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::setSBaseFields(const XMLToken& element) "
  /**
   * Stores the location (line and column) and any XML namespaces (for
   * roundtripping) declared on this SBML (XML) element.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::readAnnotation(XMLInputStream& stream) "
  /**
   * @return true if read an <annotation> element from the stream
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::removeDuplicatedResources(CVTerm *term, QualifierType_t type) "
  /**
   * removes resources from the term object that alread exist on this object 
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::addTermToExistingBag(CVTerm *term, QualifierType_t type) "
 /**
  * adds the given term to an existing bag. Returns 1 if added, 0 otherwise. 
  <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::readNotes(XMLInputStream& stream) "
  /**
   * @return true if read a <notes> element from the stream
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBase::getHasBeenDeleted "
  /**
   * @return true if read a <notes> element from the stream
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) ListOf "
/** 
 * Parent class for the various SBML \'ListOfXYZ\' classes.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * SBML defines various ListOf___ classes that are containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the attributes and subelements of
 * {@link SBase}, such as \'metaid\' as and \'annotation\'.  The ListOf___ classes do
 * not add any attributes of their own.
 * <p>
 * The {@link ListOf} class in libSBML is a utility class that serves as the parent
 * class for implementing the ListOf__ classes.  It provides methods for
 * working generically with the various SBML lists of objects in a program.
 * LibSBML uses this separate list class rather than ordinary
 * Java lists,
 * so that it can provide the methods and features associated with {@link SBase}.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers ListOf::ListOf(unsigned int level   = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
  /**
   * Creates a new {@link ListOf} object.
   * <p>
   * @param level the SBML Level; if not assigned, defaults to the
   * value of SBML_DEFAULT_LEVEL.
   * <p>
   * @param version the Version within the SBML Level; if not assigned,
   * defaults to the value of SBML_DEFAULT_VERSION.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers ListOf::ListOf(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOf} with {@link SBMLNamespaces} object.
   * <p>
   * @param sbmlns the set of namespaces that this {@link ListOf} should contain.
   */
 public";


%javamethodmodifiers ListOf::ListOf(const ListOf& orig) "
  /**
   * Copy constructor;  creates a copy of this {@link ListOf}.
   * <p>
   * @param orig the {@link ListOf} instance to copy.
   */
 public";


%javamethodmodifiers ListOf::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next item in the
   * list.
   */
 public";


%javamethodmodifiers ListOf::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOf}.
   * <p>
   * @return a (deep) copy of this {@link ListOf}.
   */
 public";


%javamethodmodifiers ListOf::append(const SBase* item) "
  /**
   * Adds item to the end of this {@link ListOf}.
   * <p>
   * This variant of the method makes a clone of the <code>item</code> handed to it.
   * This means that when the {@link ListOf} is destroyed, the original items will
   * not be destroyed.
   * <p>
   * @param item the item to be added to the list.
   * <p>
   * @see #appendAndOwn(SBase item)
   */
 public";


%javamethodmodifiers ListOf::appendAndOwn(SBase* item) "
  /**
   * Adds item to the end of this {@link ListOf}.
   * <p>
   * This variant of the method does not clone the <code>item</code> handed to it;
   * instead, it assumes ownership of it.  This means that when the {@link ListOf}
   * is destroyed, the item will be destroyed along with it.
   * <p>
   * @param item the item to be added to the list.
   * <p>
   * @see #append(SBase item)
   */
 public";


%javamethodmodifiers ListOf::get "
  /**
   * Get an item from the list.
   * <p>
   * @param n the index number of the item to get.
   * <p>
   * @return the nth item in this {@link ListOf} items.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOf::get(unsigned int n) "
  /**
   * Get an item from the list.
   * <p>
   * @param n the index number of the item to get.
   * <p>
   * @return the nth item in this {@link ListOf} items.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOf::get(const std::string& sid) const "
  /**
   * Get an item from the list based on its identifier.
   * <p>
   * @param sid a string representing the the identifier of the item to get.
   * <p>
   * @return item in this {@link ListOf} items with the given id or <code>null</code> if no such
   * item exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOf::get(const std::string& sid) "
  /**
   * Get an item from the list based on its identifier.
   * <p>
   * @param sid a string representing the the identifier of the item to get.
   * <p>
   * @return item in this {@link ListOf} items with the given id or <code>null</code> if no such
   * item exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOf::clear(bool doDelete = true) "
  /**
   * Removes all items in this {@link ListOf} object.
   * <p>
   * If <code>doDelete</code> is <code>true</code> (default), all items in this {@link ListOf} object
   * are deleted and cleared, and thus the caller doesn\'t have to delete
   * those items.  Otherwise, all items are just cleared from this {@link ListOf}
   * object and the caller is responsible for deleting all items.  (In that
   * case, pointers to all items should be stored elsewhere before calling
   * this function.)
   * <p>
   * @param doDelete if <code>true</code> (default), all items are deleted and cleared.
   * Otherwise, all items are just cleared and not deleted.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers ListOf::remove(unsigned int n) "
  /**
   * Removes the <em>n</em>th item from this {@link ListOf} items and returns a
   * pointer to it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOf::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOf} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOf::size() const "
  /**
   * Get the size of this {@link ListOf}.
   * <p>
   * @return the number of items in this {@link ListOf} items.
   */
 public";


%javamethodmodifiers ListOf::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   * <p>
   * @param d the {@link SBMLDocument} that should become the parent of this
   * {@link ListOf}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::getTypeCode() const "
  /**
   * Returns the libSBML type code for this object, namely, 
   * <code>SBML_LIST_OF.</code>
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOf::getItemTypeCode() const "
  /**
   * Get the type code of the objects contained in this {@link ListOf}.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   */
 public";


%javamethodmodifiers ListOf::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link ListOf}, is
   * always <code>\'listOf\'.</code>
   * <p>
   * @return the XML name of this element.
   */
 public";


%javamethodmodifiers ListOf::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   * <p>
   *   {@link SBase#writeAttributes(stream)};
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOf::isValidTypeForList(SBase * item) "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.  For example:
   * <p>
   *   {@link SBase#writeAttributes(stream)};
   *   stream.writeAttribute( \'id\'  , mId   );
   *   stream.writeAttribute( \'name\', mName );
   *   ...
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Model "
/** 
 * LibSBML implementation of SBML\'s Model construct.
 * <p>
 * In an SBML model definition, a single object of class {@link Model} serves as
 * the overall container for the lists of the various model components.
 * All of the lists are optional, but if a given list container is present
 * within the model, the list must not be empty; that is, it must have
 * length one or more.  The following are the components and lists
 * permitted in different Levels and Versions of SBML in
 * version 5.0.0

 * of libSBML:
 * <ul>
 * <li> In SBML Level 1, the components are: {@link UnitDefinition}, {@link Compartment},
 * {@link Species}, {@link Parameter}, {@link Rule}, and {@link Reaction}.  Instances of the classes are
 * placed inside instances of classes {@link ListOfUnitDefinitions},
 * {@link ListOfCompartments}, {@link ListOfSpecies}, {@link ListOfParameters}, {@link ListOfRules}, and
 * {@link ListOfReactions}.
 * <p>
 * <li> In SBML Level 2 Version 1, the components are: {@link FunctionDefinition},
 * {@link UnitDefinition}, {@link Compartment}, {@link Species}, {@link Parameter}, {@link Rule}, {@link Reaction} and
 * {@link Event}.  Instances of the classes are placed inside instances of classes
 * {@link ListOfFunctionDefinitions}, {@link ListOfUnitDefinitions}, {@link ListOfCompartments},
 * {@link ListOfSpecies}, {@link ListOfParameters}, {@link ListOfRules}, {@link ListOfReactions}, and
 * {@link ListOfEvents}.
 * <p>
 * <li> In SBML Level 2 Versions 2, 3 and 4, the components are:
 * {@link FunctionDefinition}, {@link UnitDefinition}, {@link CompartmentType}, {@link SpeciesType},
 * {@link Compartment}, {@link Species}, {@link Parameter}, {@link InitialAssignment}, {@link Rule}, {@link Constraint},
 * {@link Reaction} and {@link Event}.  Instances of the classes are placed inside
 * instances of classes {@link ListOfFunctionDefinitions}, {@link ListOfUnitDefinitions},
 * {@link ListOfCompartmentTypes}, {@link ListOfSpeciesTypes}, {@link ListOfCompartments},
 * {@link ListOfSpecies}, {@link ListOfParameters}, {@link ListOfInitialAssignments}, {@link ListOfRules},
 * {@link ListOfConstraints}, {@link ListOfReactions}, and {@link ListOfEvents}.
 * <p>
 * <li> In SBML Level 3 Version 1, the components are: {@link FunctionDefinition},
 * {@link UnitDefinition}, {@link Compartment}, {@link Species}, {@link Parameter}, {@link InitialAssignment},
 * {@link Rule}, {@link Constraint}, {@link Reaction} and {@link Event}.  Instances of the classes are
 * placed inside instances of classes {@link ListOfFunctionDefinitions},
 * {@link ListOfUnitDefinitions}, {@link ListOfCompartments}, {@link ListOfSpecies},
 * {@link ListOfParameters}, {@link ListOfInitialAssignments}, {@link ListOfRules},
 * {@link ListOfConstraints}, {@link ListOfReactions}, and {@link ListOfEvents}.  
 * </ul>
 * <p>
 * Although all the lists are optional, there are dependencies between SBML
 * components such that defining some components requires defining others.
 * An example is that defining a species requires defining a compartment,
 * and defining a reaction requires defining a species.  The dependencies
 * are explained in more detail in the SBML specifications.
 * <p>
 * In addition to the above lists and attributes, the {@link Model} class in both
 * SBML Level&nbsp;2 and Level&nbsp;3 has the usual two attributes of \'id\'
 * and \'name\', and both are optional.  As is the case for other SBML
 * components with \'id\' and \'name\' attributes, they must be used according
 * to the guidelines described in the SBML specifications.  (Within the
 * frameworks of SBML Level&nbsp;2 and Level&nbsp;3 Version&nbsp;1 Core, a
 * {@link Model} object identifier has no assigned meaning, but extension packages
 * planned for SBML Level&nbsp;3 are likely to make use of this
 * identifier.)
 * <p>
 * Finally, SBML Level&nbsp;3 has introduced a number of additional {@link Model}
 * attributes.  They are discussed in a separate section below.
 * <p>
 * <p>
 * <h2>Approaches to creating objects using the libSBML API</h2>
 * <p>
 * LibSBML provides two main mechanisms for creating objects: class
 * constructors
 * (e.g., <a href=\'org/sbml/{@link libsbml}/Species.html\'>{@link Species}()</a> ), 
 * and <code>create<span class=\'placeholder\'><em>Object</em></span>()</code>
 * methods (such as {@link Model#createSpecies()}) provided by certain <span
 * class=\'placeholder\'><em>Object</em></span> classes such as {@link Model}.  These
 * multiple mechanisms are provided by libSBML for flexibility and to
 * support different use-cases, but they also have different implications
 * for the overall model structure.
 * <p>
 * In general, the recommended approach is to use the <code>create<span
 * class=\'placeholder\'><em>Object</em></span>()</code> methods.  These
 * methods both create an object <em>and</em> link it to the parent in one step.
 * Here is an example:<div class=\'fragment\'><pre>
// Create an {@link SBMLDocument} object in Level 3 Version 1 format:

{@link SBMLDocument} sbmlDoc = new {@link SBMLDocument}(3, 1);

// Create a {@link Model} object inside the {@link SBMLDocument} object and set
// its identifier.  The call returns a pointer to the {@link Model} object
// created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).  Note that
// the call to setId() returns a status code, and a real program
// should check this status code to make sure everything went okay.

{@link Model} model = sbmlDoc.createModel();
model.setId(&#34;BestModelEver&#34;);

// Create a {@link Species} object inside the {@link Model} and set its identifier.
// Similar to the lines above, this call returns a pointer to the {@link Species}
// object created, and methods called on that object affect the attributes
// of the object attached to the model (as expected).  Note that, like
// with {@link Model}, the call to setId() returns a status code, and a real program
// should check this status code to make sure everything went okay.

{@link Species} sp = model.createSpecies();
sp.setId(&#34;BestSpeciesEver&#34;);
</pre></div>
 * <p>
 * <p>
 * The <code>create<span
 * class=\'placeholder\'><em>Object</em></span>()</code> methods return a
 * pointer to the object created, but they also add the object to the
 * relevant list of object instances contained in the parent.  (These lists
 * become the <code>&lt;listOf<span
 * class=\'placeholder\'><em>Object</em></span>s&gt;</code> elements in the
 * finished XML rendition of SBML.)  In the example above,
 * {@link Model#createSpecies()} adds the created species directly to the
 * <code>&lt;listOfSpecies<i></i>&gt;</code> list in the model.  Subsequently,
 * methods called on the species change the species in the model (which is
 * what is expected in most situations).
 * <p>
 * <h2>Consistency and adherence to SBML specifications</h2>
 * <p>
 * To make it easier for applications to do whatever they need,
 * libSBML version 5.0.0

 * is relatively lax when it comes to enforcing correctness and
 * completeness of models <em>during</em> model construction and editing.
 * Essentially, libSBML <em>will</em> <em>not</em> in most cases check automatically
 * that a model\'s components have valid attribute values, or that the
 * overall model is consistent and free of errors&mdash;even obvious errors
 * such as duplication of identifiers.  This allows applications great
 * leeway in how they build their models, but it means that software
 * authors must take deliberate steps to ensure that the model will be, in
 * the end, valid SBML.  These steps include such things as keeping track
 * of the identifiers used in a model, manually performing updates in
 * certain situations where an entity is referenced in more than one place
 * (e.g., a species that is referenced by multiple {@link SpeciesReference}
 * objects), and so on.
 * <p>
 * That said, libSBML does provide powerful features for deliberately
 * performing validation of SBML when an application decides it is time to
 * do so.  The interfaces to these facilities are on the {@link SBMLDocument}
 * class, in the form of {@link SBMLDocument#checkInternalConsistency()} and
 * {@link SBMLDocument#checkConsistency()}.  Please refer to the documentation for
 * {@link SBMLDocument} for more information about this.
 * <p>
 * While applications may play fast and loose and live like free spirits
 * during the construction and editing of SBML models, they should always
 * make sure to call {@link SBMLDocument#checkInternalConsistency()} and/or
 * {@link SBMLDocument#checkConsistency()} before writing out the final version of
 * an SBML model.
 * <p>
 * <p>
 * <h2>{@link Model} attributes introduced in SBML Level&nbsp;3</h2>
 * <p>
 * As mentioned above, the {@link Model} class has a number of optional attributes
 * in SBML Level&nbsp;3 Version&nbsp;1 Core.  These are \'substanceUnits\',
 * \'timeUnits\', \'volumeUnits\', \'areaUnits\', \'lengthUnits\', \'extentUnits\',
 * and \'conversionFactor.  The following provide more information about
 * them.
 * <p>
 * <h3>The \'substanceUnits\' attribute</h3>
 * <p>
 * The \'substanceUnits\' attribute is used to specify the unit of
 * measurement associated with substance quantities of {@link Species} objects that
 * do not specify units explicitly.  If a given {@link Species} object definition
 * does not specify its unit of substance quantity via the \'substanceUnits\'
 * attribute on the {@link Species} object instance, then that species inherits the
 * value of the {@link Model} \'substanceUnits\' attribute.  If the {@link Model} does not
 * define a value for this attribute, then there is no unit to inherit, and
 * all species that do not specify individual \'substanceUnits\' attribute
 * values then have <em>no</em> declared units for their quantities.  The
 * SBML Level&nbsp;3 Version&nbsp;1 Core specification provides more
 * details.
 * <p>
 * Note that when the identifier of a species appears in a model\'s
 * mathematical expressions, the unit of measurement associated with that
 * identifier is <em>not solely determined</em> by setting \'substanceUnits\'
 * on {@link Model} or {@link Species}.  Please see the discussion about units given in
 * the documentation for the {@link Species} class.
 * <p>
 * <p>
 * <h3>The \'timeUnits\' attribute</h3>
 * <p>
 * The \'timeUnits\' attribute on SBML Level&nbsp;3\'s {@link Model} object is used to
 * specify the unit in which time is measured in the model.  This attribute
 * on {@link Model} is the <em>only</em> way to specify a unit for time in a model.
 * It is a global attribute; time is measured in the model everywhere in
 * the same way.  This is particularly relevant to {@link Reaction} and {@link RateRule}
 * objects in a model: all {@link Reaction} and {@link RateRule} objects in SBML define
 * per-time values, and the unit of time is given by the \'timeUnits\'
 * attribute on the {@link Model} object instance.  If the {@link Model} \'timeUnits\'
 * attribute has no value, it means that the unit of time is not defined
 * for the model\'s reactions and rate rules.  Leaving it unspecified in an
 * SBML model does not result in an invalid model in SBML Level&nbsp;3;
 * however, as a matter of best practice, we strongly recommend that all
 * models specify units of measurement for time.
 * <p>
 * <p>
 * <h3>The \'volumeUnits\', \'areaUnits\', and \'lengthUnits\' attributes</h3>
 * <p>
 * The attributes \'volumeUnits\', \'areaUnits\' and \'lengthUnits\' together are
 * used to set the units of measurements for the sizes of {@link Compartment}
 * objects in an SBML Level&nbsp;3 model when those objects do not
 * otherwise specify units.  The three attributes correspond to the most
 * common cases of compartment dimensions: \'volumeUnits\' for compartments
 * having a \'spatialDimensions\' attribute value of <code>\'3\'</code>, \'areaUnits\' for
 * compartments having a \'spatialDimensions\' attribute value of <code>\'2\'</code>, and
 * \'lengthUnits\' for compartments having a \'spatialDimensions\' attribute
 * value of <code>\'1\'.</code>  The attributes are not applicable to compartments
 * whose \'spatialDimensions\' attribute values are <em>not</em> one of <code>\'1\'</code>, 
 * <code>\'2\'</code> or <code>\'3\'.</code>
 * <p>
 * If a given {@link Compartment} object instance does not provide a value for its
 * \'units\' attribute, then the unit of measurement of that compartment\'s
 * size is inherited from the value specified by the {@link Model} \'volumeUnits\',
 * \'areaUnits\' or \'lengthUnits\' attribute, as appropriate based on the
 * {@link Compartment} object\'s \'spatialDimensions\' attribute value.  If the {@link Model}
 * object does not define the relevant attribute, then there are no units
 * to inherit, and all {@link Compartment} objects that do not set a value for
 * their \'units\' attribute then have <em>no</em> units associated with
 * their compartment sizes.
 * <p>
 * The use of three separate attributes is a carry-over from SBML
 * Level&nbsp;2.  Note that it is entirely possible for a model to define a
 * value for two or more of the attributes \'volumeUnits\', \'areaUnits\' and
 * \'lengthUnits\' simultaneously, because SBML models may contain
 * compartments with different numbers of dimensions.
 * <p>
 * <p>
 * <h3>The \'extentUnits\' attribute</h3>
 * <p>
 * Reactions are processes that occur over time.  These processes involve
 * events of some sort, where a single ``reaction event\'\' is one in which
 * some set of entities (known as reactants, products and modifiers in
 * SBML) interact, once.  The <em>extent</em> of a reaction is a measure of
 * how many times the reaction has occurred, while the time derivative of
 * the extent gives the instantaneous rate at which the reaction is
 * occurring.  Thus, what is colloquially referred to as the \'rate of the
 * reaction\' is in fact equal to the rate of change of reaction extent.
 * <p>
 * In SBML Level&nbsp;3, the combination of \'extentUnits\' and \'timeUnits\'
 * defines the units of kinetic laws in SBML and establishes how the
 * numerical value of each {@link KineticLaw} object\'s mathematical formula is
 * meant to be interpreted in a model.  The units of the kinetic laws are
 * taken to be \'extentUnits\' divided by \'timeUnits\'.
 * <p>
 * Note that this embodies an important principle in SBML Level&nbsp;3
 * models: <em>all reactions in an SBML model must have the same units</em>
 * for the rate of change of extent.  In other words, the units of all
 * reaction rates in the model <em>must be the same</em>.  There is only
 * one global value for \'extentUnits\' and one global value for \'timeUnits\'.
 * <p>
 * <p>
 * <h3>The \'conversionFactor\' attribute</h3>
 * <p>
 * The attribute \'conversionFactor\' in SBML Level&nbsp;3\'s {@link Model} object
 * defines a global value inherited by all {@link Species} object instances that do
 * not define separate values for their \'conversionFactor\' attributes.  The
 * value of this attribute must refer to a {@link Parameter} object instance
 * defined in the model.  The {@link Parameter} object in question must be a
 * constant; ie it must have its \'constant\' attribute value set to 
 * <code>\'true\'.</code>
 * <p>
 * If a given {@link Species} object definition does not specify a conversion
 * factor via the \'conversionFactor\' attribute on {@link Species}, then the species
 * inherits the conversion factor specified by the {@link Model} \'conversionFactor\'
 * attribute.  If the {@link Model} does not define a value for this attribute,
 * then there is no conversion factor to inherit.  More information about
 * conversion factors is provided in the SBML Level&nbsp;3 Version&nbsp;1
 * specification.
 */
"

%javamethodmodifiers Model::Model(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Model} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Model}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Model}
   * <p>
   * @note Upon the addition of a {@link Model} object to an {@link SBMLDocument}
   * (e.g., using {@link SBMLDocument#setModel(Model m)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link Model} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link Model} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Model::Model(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Model} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Model} object to an {@link SBMLDocument} (e.g.,
   * using {@link SBMLDocument#setModel(Model m)}), the SBML XML namespace of the document 
   * <em>overrides</em> the value used when creating the {@link Model} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link Model} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Model::Model(const Model& orig) "
  /**
  * Copy constructor; creates a (deep) copy of the given {@link Model} object.
  */
 public";


%javamethodmodifiers Model::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Constraint}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers Model::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Model} object.
   * <p>
   * @return a (deep) copy of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link Model}.
   * <p>
   * @return the id of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link Model}.
   * <p>
   * @return the name of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getSubstanceUnits() const "
  /**
   * Returns the value of the \'substanceUnits\' attribute of this {@link Model}.
   * <p>
   * @return the substanceUnits of this {@link Model}.
   * <p>
   * @note The \'substanceUnits\' attribute is available in
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::getTimeUnits() const "
  /**
   * Returns the value of the \'timeUnits\' attribute of this {@link Model}.
   * <p>
   * @return the timeUnits of this {@link Model}.
   * <p>
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::getVolumeUnits() const "
  /**
   * Returns the value of the \'volumeUnits\' attribute of this {@link Model}.
   * <p>
   * @return the volumeUnits of this {@link Model}.
   * <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::getAreaUnits() const "
  /**
   * Returns the value of the \'areaUnits\' attribute of this {@link Model}.
   * <p>
   * @return the areaUnits of this {@link Model}.
   * <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::getLengthUnits() const "
  /**
   * Returns the value of the \'lengthUnits\' attribute of this {@link Model}.
   * <p>
   * @return the lengthUnits of this {@link Model}.
   * <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::getExtentUnits() const "
  /**
   * Returns the value of the \'extentUnits\' attribute of this {@link Model}.
   * <p>
   * @return the extentUnits of this {@link Model}.
   * <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::getConversionFactor() const "
  /**
   * Returns the value of the \'conversionFactor\' attribute of this {@link Model}.
   * <p>
   * @return the conversionFactor of this {@link Model}.
   * <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Model::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Model::isSetSubstanceUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'substanceUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'substanceUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetTimeUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'timeUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'timeUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetVolumeUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'volumeUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'volumeUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetAreaUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'areaUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'areaUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetLengthUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'lengthUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'lengthUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetExtentUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'extentUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'extentUnits\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::isSetConversionFactor() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Model}\'s \'conversionFactor\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'conversionFactor\' attribute of this {@link Model} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link Model}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Model::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link Model}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Model::setSubstanceUnits(const std::string& units) "
  /**
   * Sets the value of the \'substanceUnits\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new substanceUnits for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setTimeUnits(const std::string& units) "
  /**
   * Sets the value of the \'timeUnits\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new timeUnits for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setVolumeUnits(const std::string& units) "
  /**
   * Sets the value of the \'volumeUnits\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new volumeUnits for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setAreaUnits(const std::string& units) "
  /**
   * Sets the value of the \'areaUnits\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new areaUnits for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setLengthUnits(const std::string& units) "
  /**
   * Sets the value of the \'lengthUnits\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new lengthUnits for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setExtentUnits(const std::string& units) "
  /**
   * Sets the value of the \'extentUnits\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new extentUnits for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::setConversionFactor(const std::string& units) "
  /**
   * Sets the value of the \'conversionFactor\' attribute of this {@link Model}.
   * <p>
   * The string in <code>units</code> is copied.
   * <p>
   * @param units the new conversionFactor for the {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetId "
  /**
   * Unsets the value of the \'id\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Model::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Model::unsetSubstanceUnits "
  /**
   * Unsets the value of the \'substanceUnits\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'substanceUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetTimeUnits "
  /**
   * Unsets the value of the \'timeUnits\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'timeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetVolumeUnits "
  /**
   * Unsets the value of the \'volumeUnits\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'volumeUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetAreaUnits "
  /**
   * Unsets the value of the \'areaUnits\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'areaUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetLengthUnits "
  /**
   * Unsets the value of the \'lengthUnits\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'lengthUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetExtentUnits "
  /**
   * Unsets the value of the \'extentUnits\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'extentUnits\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::unsetConversionFactor "
  /**
   * Unsets the value of the \'conversionFactor\' attribute of this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'conversionFactor\' attribute is available in 
   * SBML Level&nbsp;3 but is not present on {@link Model} in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Model::addFunctionDefinition(const FunctionDefinition* fd) "
  /**
   * Adds a copy of the given {@link FunctionDefinition} object to this {@link Model}.
   * <p>
   * @param fd the {@link FunctionDefinition} to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createFunctionDefinition()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createFunctionDefinition()
   */
 public";


%javamethodmodifiers Model::addUnitDefinition(const UnitDefinition* ud) "
  /**
   * Adds a copy of the given {@link UnitDefinition} object to this {@link Model}.
   * <p>
   * @param ud the {@link UnitDefinition} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createUnitDefinition()} for
   * a method that does not lead to these issues.
   * <p>
   * @see #createUnitDefinition()
   */
 public";


%javamethodmodifiers Model::addCompartmentType(const CompartmentType* ct) "
  /**
   * Adds a copy of the given {@link CompartmentType} object to this {@link Model}.
   * <p>
   * @param ct the {@link CompartmentType} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createCompartmentType()}
   * for a method that does not lead to these issues.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   * <p>
   * @see #createCompartmentType()
   */
 public";


%javamethodmodifiers Model::addSpeciesType(const SpeciesType* st) "
  /**
   * Adds a copy of the given {@link SpeciesType} object to this {@link Model}.
   * <p>
   * @param st the {@link SpeciesType} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createSpeciesType()} for a
   * method that does not lead to these issues.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   * <p>
   * @see #createSpeciesType()
   */
 public";


%javamethodmodifiers Model::addCompartment(const Compartment* c) "
  /**
   * Adds a copy of the given {@link Compartment} object to this {@link Model}.
   * <p>
   * @param c the {@link Compartment} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createCompartment()} for a
   * method that does not lead to these issues.
   * <p>
   * @see #createCompartment()
   */
 public";


%javamethodmodifiers Model::addSpecies(const Species* s) "
  /**
   * Adds a copy of the given {@link Species} object to this {@link Model}.
   * <p>
   * @param s the {@link Species} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createSpecies()} for a
   * method that does not lead to these issues.
   * <p>
   * @see #createSpecies()
   */
 public";


%javamethodmodifiers Model::addParameter(const Parameter* p) "
  /**
   * Adds a copy of the given {@link Parameter} object to this {@link Model}.
   * <p>
   * @param p the {@link Parameter} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createParameter()} for a
   * method that does not lead to these issues.
   * <p>
   * @see #createParameter()
   */
 public";


%javamethodmodifiers Model::addInitialAssignment(const InitialAssignment* ia) "
  /**
   * Adds a copy of the given {@link InitialAssignment} object to this {@link Model}.
   * <p>
   * @param ia the {@link InitialAssignment} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createInitialAssignment()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createInitialAssignment()
   */
 public";


%javamethodmodifiers Model::addRule(const Rule* r) "
  /**
   * Adds a copy of the given {@link Rule} object to this {@link Model}.
   * <p>
   * @param r the {@link Rule} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see the methods
   * {@link Model#createAlgebraicRule()}, {@link Model#createAssignmentRule()} and
   * {@link Model#createRateRule()} for methods that do not lead to these issues.
   * <p>
   * @see #createAlgebraicRule()
   * @see #createAssignmentRule()
   * @see #createRateRule()
   */
 public";


%javamethodmodifiers Model::addConstraint(const Constraint* c) "
  /**
   * Adds a copy of the given {@link Constraint} object to this {@link Model}.
   * <p>
   * @param c the {@link Constraint} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createConstraint()} for a
   * method that does not lead to these issues.
   * <p>
   * @see #createConstraint()
   */
 public";


%javamethodmodifiers Model::addReaction(const Reaction* r) "
  /**
   * Adds a copy of the given {@link Reaction} object to this {@link Model}.
   * <p>
   * @param r the {@link Reaction} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createReaction()} for a
   * method that does not lead to these issues.
   * <p>
   * @see #createReaction()
   */
 public";


%javamethodmodifiers Model::addEvent(const Event* e) "
  /**
   * Adds a copy of the given {@link Event} object to this {@link Model}.
   * <p>
   * @param e the {@link Event} object to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Model}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Model}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Model#createEvent()} for a method
   * that does not lead to these issues.
   * <p>
   * @see #createEvent()
   */
 public";


%javamethodmodifiers Model::createFunctionDefinition "
  /**
   * Creates a new {@link FunctionDefinition} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link FunctionDefinition} object created
   * <p>
   * @see #addFunctionDefinition(FunctionDefinition fd)
   */
 public";


%javamethodmodifiers Model::createUnitDefinition "
  /**
   * Creates a new {@link UnitDefinition} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link UnitDefinition} object created
   * <p>
   * @see #addUnitDefinition(UnitDefinition ud)
   */
 public";


%javamethodmodifiers Model::createUnit "
  /**
   * Creates a new {@link Unit} object within the last {@link UnitDefinition} object
   * created in this model and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the {@link UnitDefinition} was created is not
   * significant.  If a {@link UnitDefinition} object does not exist in this model,
   * a new {@link Unit} is <em>not</em> created and <code>null</code> is returned instead.
   * <p>
   * @return the {@link Unit} object created
   * <p>
   * @see #addUnitDefinition(UnitDefinition ud)
   */
 public";


%javamethodmodifiers Model::createCompartmentType "
  /**
   * Creates a new {@link CompartmentType} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link CompartmentType} object created
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   * <p>
   * @see #addCompartmentType(CompartmentType ct)
   */
 public";


%javamethodmodifiers Model::createSpeciesType "
  /**
   * Creates a new {@link SpeciesType} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link SpeciesType} object created
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   * <p>
   * @see #addSpeciesType(SpeciesType st)
   */
 public";


%javamethodmodifiers Model::createCompartment "
  /**
   * Creates a new {@link Compartment} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link Compartment} object created
   * <p>
   * @see #addCompartment(Compartment c)
   */
 public";


%javamethodmodifiers Model::createSpecies "
  /**
   * Creates a new {@link Species} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link Species} object created
   * <p>
   * @see #addSpecies(Species s)
   */
 public";


%javamethodmodifiers Model::createParameter "
  /**
   * Creates a new {@link Parameter} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link Parameter} object created
   * <p>
   * @see #addParameter(Parameter p)
   */
 public";


%javamethodmodifiers Model::createInitialAssignment "
  /**
   * Creates a new {@link InitialAssignment} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link InitialAssignment} object created
   * <p>
   * @see #addInitialAssignment(InitialAssignment ia)
   */
 public";


%javamethodmodifiers Model::createAlgebraicRule "
  /**
   * Creates a new {@link AlgebraicRule} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link AlgebraicRule} object created
   * <p>
   * @see #addRule(Rule r)
   */
 public";


%javamethodmodifiers Model::createAssignmentRule "
  /**
   * Creates a new {@link AssignmentRule} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link AssignmentRule} object created
   * <p>
   * @see #addRule(Rule r)
   */
 public";


%javamethodmodifiers Model::createRateRule "
  /**
   * Creates a new {@link RateRule} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link RateRule} object created
   * <p>
   * @see #addRule(Rule r)
   */
 public";


%javamethodmodifiers Model::createConstraint "
  /**
   * Creates a new {@link Constraint} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link Constraint} object created
   * <p>
   * @see #addConstraint(Constraint c)
   */
 public";


%javamethodmodifiers Model::createReaction "
  /**
   * Creates a new {@link Reaction} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link Reaction} object created
   * <p>
   * @see #addReaction(Reaction r)
   */
 public";


%javamethodmodifiers Model::createReactant "
  /**
   * Creates a new {@link SpeciesReference} object for a reactant inside the last
   * {@link Reaction} object in this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Reaction} object was created and added
   * to this {@link Model} is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a {@link Reaction}
   * does not exist for this model, a new {@link SpeciesReference} is <em>not</em>
   * created and <code>null</code> is returned instead.
   * <p>
   * @return the {@link SpeciesReference} object created
   */
 public";


%javamethodmodifiers Model::createProduct "
  /**
   * Creates a new {@link SpeciesReference} object for a product inside the last
   * {@link Reaction} object in this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Reaction} object was created and added
   * to this {@link Model} is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a {@link Reaction}
   * does not exist for this model, a new {@link SpeciesReference} is <em>not</em>
   * created and <code>null</code> is returned instead.
   * <p>
   * @return the {@link SpeciesReference} object created
   */
 public";


%javamethodmodifiers Model::createModifier "
  /**
   * Creates a new {@link ModifierSpeciesReference} object for a modifier species
   * inside the last {@link Reaction} object in this {@link Model}, and returns a pointer
   * to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Reaction} object was created and added
   * to this {@link Model} is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a {@link Reaction}
   * does not exist for this model, a new {@link ModifierSpeciesReference} is 
   * <em>not</em> created and <code>null</code> is returned instead.
   * <p>
   * @return the {@link SpeciesReference} object created
   */
 public";


%javamethodmodifiers Model::createKineticLaw "
  /**
   * Creates a new {@link KineticLaw} inside the last {@link Reaction} object created in
   * this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Reaction} object was created and added
   * to this {@link Model} is not significant.  It could have been created in a
   * variety of ways, for example using createReaction().  If a {@link Reaction}
   * does not exist for this model, or a {@link Reaction} exists but already has a
   * {@link KineticLaw}, a new {@link KineticLaw} is <em>not</em> created and <code>null</code> is returned
   * instead.
   * <p>
   * @return the {@link KineticLaw} object created
   */
 public";


%javamethodmodifiers Model::createKineticLawParameter "
  /**
   * Creates a new local {@link Parameter} inside the {@link KineticLaw} object of the last
   * {@link Reaction} created inside this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The last {@link KineticLaw} object in this {@link Model} could have been created in a
   * variety of ways.  For example, it could have been added using
   * createKineticLaw(), or it could be the result of using
   * {@link Reaction#createKineticLaw()} on the {@link Reaction} object created by a
   * createReaction().  If a {@link Reaction} does not exist for this model, or the
   * last {@link Reaction} does not contain a {@link KineticLaw} object, a new {@link Parameter} is
   * <em>not</em> created and <code>null</code> is returned instead.
   * <p>
   * @return the {@link Parameter} object created
   */
 public";


%javamethodmodifiers Model::createKineticLawLocalParameter "
  /**
   * Creates a new {@link LocalParameter} inside the {@link KineticLaw} object of the last
   * {@link Reaction} created inside this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The last {@link KineticLaw} object in this {@link Model} could have been created in a
   * variety of ways.  For example, it could have been added using
   * createKineticLaw(), or it could be the result of using
   * {@link Reaction#createKineticLaw()} on the {@link Reaction} object created by a
   * createReaction().  If a {@link Reaction} does not exist for this model, or the
   * last {@link Reaction} does not contain a {@link KineticLaw} object, a new {@link Parameter} is
   * <em>not</em> created and <code>null</code> is returned instead.
   * <p>
   * @return the {@link Parameter} object created
   */
 public";


%javamethodmodifiers Model::createEvent "
  /**
   * Creates a new {@link Event} inside this {@link Model} and returns it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * @return the {@link Event} object created
   */
 public";


%javamethodmodifiers Model::createEventAssignment "
  /**
   * Creates a new {@link EventAssignment} inside the last {@link Event} object created in
   * this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Event} object in this model was created
   * is not significant.  It could have been created in a variety of ways,
   * for example by using createEvent().  If no {@link Event} object exists in this
   * {@link Model} object, a new {@link EventAssignment} is <em>not</em> created and <code>null</code> is
   * returned instead.
   * <p>
   * @return the {@link EventAssignment} object created
   */
 public";


%javamethodmodifiers Model::createTrigger "
  /**
   * Creates a new {@link Trigger} inside the last {@link Event} object created in
   * this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Event} object in this model was created
   * is not significant.  It could have been created in a variety of ways,
   * for example by using createEvent().  If no {@link Event} object exists in this
   * {@link Model} object, a new {@link Trigger} is <em>not</em> created and <code>null</code> is
   * returned instead.
   * <p>
   * @return the {@link Trigger} object created
   */
 public";


%javamethodmodifiers Model::createDelay "
  /**
   * Creates a new {@link Delay} inside the last {@link Event} object created in
   * this {@link Model}, and returns a pointer to it.
   * <p>
   * The SBML Level and Version of the enclosing {@link Model} object, as well as
   * any SBML package namespaces, are used to initialize this
   * object\'s corresponding attributes.
   * <p>
   * The mechanism by which the last {@link Event} object in this model was created
   * is not significant.  It could have been created in a variety of ways,
   * for example by using createEvent().  If no {@link Event} object exists in this
   * {@link Model} object, a new {@link Delay} is <em>not</em> created and <code>null</code> is
   * returned instead.
   * <p>
   * @return the {@link Delay} object created
   */
 public";


%javamethodmodifiers Model::setAnnotation(const XMLNode* annotation) "
  /**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   * <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   * <p>
   * @param annotation an XML structure that is to be used as the content
   * of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #appendAnnotation(XMLNode annotation)
   */
 public";


%javamethodmodifiers Model::setAnnotation(const std::string& annotation) "
  /**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   * <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   * <p>
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #appendAnnotation(String annotation)
   */
 public";


%javamethodmodifiers Model::appendAnnotation(const XMLNode* annotation) "
  /**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   * <p>
   * The content in <code>annotation</code> is copied.  Unlike setAnnotation(), this
   * method allows other annotations to be preserved when an application
   * adds its own data.
   * <p>
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #setAnnotation(XMLNode annotation)
   */
 public";


%javamethodmodifiers Model::appendAnnotation(const std::string& annotation) "
  /**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   * <p>
   * The content in <code>annotation</code> is copied.  Unlike setAnnotation(), this 
   * method allows other annotations to be preserved when an application
   * adds its own data.
   * <p>
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #setAnnotation(String annotation)
   */
 public";


%javamethodmodifiers Model::getListOfFunctionDefinitions() const "
  /**
   * Get the {@link ListOfFunctionDefinitions} object in this {@link Model}.
   * <p>
   * @return the list of FunctionDefinitions for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfFunctionDefinitions "
  /**
   * Get the {@link ListOfFunctionDefinitions} object in this {@link Model}.
   * <p>
   * @return the list of FunctionDefinitions for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfUnitDefinitions() const "
  /**
   * Get the {@link ListOfUnitDefinitions} object in this {@link Model}.
   * <p>
   * @return the list of UnitDefinitions for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfUnitDefinitions "
  /**
   * Get the {@link ListOfUnitDefinitions} object in this {@link Model}.
   * <p>
   * @return the list of UnitDefinitions for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfCompartmentTypes() const "
  /**
   * Get the {@link ListOfCompartmentTypes} object in this {@link Model}.
   * <p>
   * @return the list of CompartmentTypes for this {@link Model}.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getListOfCompartmentTypes "
  /**
   * Get the {@link ListOfCompartmentTypes} object in this {@link Model}.
   * <p>
   * @return the list of CompartmentTypes for this {@link Model}.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getListOfSpeciesTypes() const "
  /**
   * Get the {@link ListOfSpeciesTypes} object in this {@link Model}.
   * <p>
   * @return the list of SpeciesTypes for this {@link Model}.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getListOfSpeciesTypes "
  /**
   * Get the {@link ListOfSpeciesTypes} object in this {@link Model}.
   * <p>
   * @return the list of SpeciesTypes for this {@link Model}.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getListOfCompartments() const "
  /**
   * Get the {@link ListOfCompartments} object in this {@link Model}.
   * <p>
   * @return the list of Compartments for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfCompartments "
  /**
   * Get the {@link ListOfCompartments} object in this {@link Model}.
   * <p>
   * @return the list of Compartments for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfSpecies() const "
  /**
   * Get the {@link ListOfSpecies} object in this {@link Model}.
   * <p>
   * @return the list of {@link Species} for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfSpecies "
  /**
   * Get the {@link ListOfSpecies} object in this {@link Model}.
   * <p>
   * @return the list of {@link Species} for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfParameters() const "
  /**
   * Get the {@link ListOfParameters} object in this {@link Model}.
   * <p>
   * @return the list of Parameters for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfParameters "
  /**
   * Get the {@link ListOfParameters} object in this {@link Model}.
   * <p>
   * @return the list of Parameters for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfInitialAssignments() const "
  /**
   * Get the {@link ListOfInitialAssignments} object in this {@link Model}.
   * <p>
   * @return the list of InitialAssignments for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfInitialAssignments "
  /**
   * Get the {@link ListOfInitialAssignments} object in this {@link Model}.
   * <p>
   * @return the list of {@link InitialAssignment} for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfRules() const "
  /**
   * Get the {@link ListOfRules} object in this {@link Model}.
   * <p>
   * @return the list of Rules for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfRules "
  /**
   * Get the {@link ListOfRules} object in this {@link Model}.
   * <p>
   * @return the list of Rules for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfConstraints() const "
  /**
   * Get the {@link ListOfConstraints} object in this {@link Model}.
   * <p>
   * @return the list of Constraints for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfConstraints "
  /**
   * Get the {@link ListOfConstraints} object in this {@link Model}.
   * <p>
   * @return the list of Constraints for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfReactions() const "
  /**
   * Get the {@link ListOfReactions} object in this {@link Model}.
   * <p>
   * @return the list of Reactions for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfReactions "
  /**
   * Get the {@link ListOfReactions} object in this {@link Model}.
   * <p>
   * @return the list of Reactions for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfEvents() const "
  /**
   * Get the {@link ListOfEvents} object in this {@link Model}.
   * <p>
   * @return the list of Events for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getListOfEvents "
  /**
   * Get the {@link ListOfEvents} object in this {@link Model}.
   * <p>
   * @return the list of Events for this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getFunctionDefinition "
  /**
   * Get the nth FunctionDefinitions object in this {@link Model}.
   * <p>
   * @return the nth {@link FunctionDefinition} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getFunctionDefinition(unsigned int n) "
  /**
   * Get the nth FunctionDefinitions object in this {@link Model}.
   * <p>
   * @return the nth {@link FunctionDefinition} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getFunctionDefinition(const std::string& sid) const "
  /**
   * Get a {@link FunctionDefinition} object based on its identifier.
   * <p>
   * @return the {@link FunctionDefinition} in this {@link Model} with the identifier
   * <code>sid</code> or <code>null</code> if no such {@link FunctionDefinition} exists.
   */
 public";


%javamethodmodifiers Model::getFunctionDefinition(const std::string& sid) "
  /**
   * Get a {@link FunctionDefinition} object based on its identifier.
   * <p>
   * @return the {@link FunctionDefinition} in this {@link Model} with the identifier
   * <code>sid</code> or <code>null</code> if no such {@link FunctionDefinition} exists.
   */
 public";


%javamethodmodifiers Model::getUnitDefinition "
  /**
   * Get the nth {@link UnitDefinition} object in this {@link Model}.
   * <p>
   * @return the nth {@link UnitDefinition} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getUnitDefinition(unsigned int n) "
  /**
   * Get the nth {@link UnitDefinition} object in this {@link Model}.
   * <p>
   * @return the nth {@link UnitDefinition} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getUnitDefinition(const std::string& sid) const "
  /**
   * Get a {@link UnitDefinition} based on its identifier.
   * <p>
   * @return the {@link UnitDefinition} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link UnitDefinition} exists.
   */
 public";


%javamethodmodifiers Model::getUnitDefinition(const std::string& sid) "
  /**
   * Get a {@link UnitDefinition} based on its identifier.
   * <p>
   * @return the {@link UnitDefinition} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link UnitDefinition} exists.
   */
 public";


%javamethodmodifiers Model::getCompartmentType "
  /**
   * Get the nth {@link CompartmentType} object in this {@link Model}.
   * <p>
   * @return the nth {@link CompartmentType} of this {@link Model}.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getCompartmentType(unsigned int n) "
  /**
   * Get the nth {@link CompartmentType} object in this {@link Model}.
   * <p>
   * @return the nth {@link CompartmentType} of this {@link Model}.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getCompartmentType(const std::string& sid) const "
  /**
   * Get a {@link CompartmentType} object based on its identifier.
   * <p>
   * @return the {@link CompartmentType} in this {@link Model} with the identifier <code>sid</code>
   * or <code>null</code> if no such {@link CompartmentType} exists.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getCompartmentType(const std::string& sid) "
  /**
   * Get a {@link CompartmentType} object based on its identifier.
   * <p>
   * @return the {@link CompartmentType} in this {@link Model} with the identifier <code>sid</code>
   * or <code>null</code> if no such {@link CompartmentType} exists.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getSpeciesType "
  /**
   * Get the nth {@link SpeciesType} object in this {@link Model}.
   * <p>
   * @return the nth {@link SpeciesType} of this {@link Model}.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getSpeciesType(unsigned int n) "
  /**
   * Get the nth {@link SpeciesType} object in this {@link Model}.
   * <p>
   * @return the nth {@link SpeciesType} of this {@link Model}.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getSpeciesType(const std::string& sid) const "
  /**
   * Get a {@link SpeciesType} object based on its identifier.
   * <p>
   * @return the {@link SpeciesType} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link SpeciesType} exists.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getSpeciesType(const std::string& sid) "
  /**
   * Get a {@link SpeciesType} object based on its identifier.
   * <p>
   * @return the {@link SpeciesType} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link SpeciesType} exists.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getCompartment "
  /**
   * Get the nth {@link Compartment} object in this {@link Model}.
   * <p>
   * @return the nth {@link Compartment} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getCompartment(unsigned int n) "
  /**
   * Get the nth {@link Compartment} object in this {@link Model}.
   * <p>
   * @return the nth {@link Compartment} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getCompartment(const std::string& sid) const "
  /**
   * Get a {@link Compartment} object based on its identifier.
   * <p>
   * @return the {@link Compartment} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link Compartment} exists.
   */
 public";


%javamethodmodifiers Model::getCompartment(const std::string& sid) "
  /**
   * Get a {@link Compartment} object based on its identifier.
   * <p>
   * @return the {@link Compartment} in this {@link Model} with the identifier <code>sid</code> or
   * <code>null</code> if no such {@link Compartment} exists.
   */
 public";


%javamethodmodifiers Model::getSpecies "
  /**
   * Get the nth {@link Species} object in this {@link Model}.
   * <p>
   * @return the nth {@link Species} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getSpecies(unsigned int n) "
  /**
   * Get the nth {@link Species} object in this {@link Model}.
   * <p>
   * @return the nth {@link Species} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getSpecies(const std::string& sid) const "
  /**
   * Get a {@link Species} object based on its identifier.
   * <p>
   * @return the {@link Species} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Species} exists.
   */
 public";


%javamethodmodifiers Model::getSpecies(const std::string& sid) "
  /**
   * Get a {@link Species} object based on its identifier.
   * <p>
   * @return the {@link Species} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Species} exists.
   */
 public";


%javamethodmodifiers Model::getParameter "
  /**
   * Get the nth {@link Parameter} object in this {@link Model}.
   * <p>
   * @return the nth {@link Parameter} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getParameter(unsigned int n) "
  /**
   * Get the nth {@link Parameter} object in this {@link Model}.
   * <p>
   * @return the nth {@link Parameter} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getParameter(const std::string& sid) const "
  /**
   * Get a {@link Parameter} object based on its identifier.
   * <p>
   * @return the {@link Parameter} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Parameter} exists.
   */
 public";


%javamethodmodifiers Model::getParameter(const std::string& sid) "
  /**
   * Get a {@link Parameter} object based on its identifier.
   * <p>
   * @return the {@link Parameter} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Parameter} exists.
   */
 public";


%javamethodmodifiers Model::getInitialAssignment "
  /**
   * Get the nth {@link InitialAssignment} object in this {@link Model}.
   * <p>
   * @return the nth {@link InitialAssignment} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getInitialAssignment(unsigned int n) "
  /**
   * Get the nth {@link InitialAssignment} object in this {@link Model}.
   * <p>
   * @return the nth {@link InitialAssignment} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getInitialAssignment(const std::string& symbol) const "
  /**
   * Get an {@link InitialAssignment} object based on the symbol to which it
   * assigns a value.
   * <p>
   * @return the {@link InitialAssignment} in this {@link Model} with the given \'symbol\'
   * attribute value or <code>null</code> if no such {@link InitialAssignment} exists.
   */
 public";


%javamethodmodifiers Model::getInitialAssignment(const std::string& symbol) "
  /**
   * Get an {@link InitialAssignment} object based on the symbol to which it
   * assigns a value.
   * <p>
   * @return the {@link InitialAssignment} in this {@link Model} with the given \'symbol\'
   * attribute value or <code>null</code> if no such {@link InitialAssignment} exists.
   */
 public";


%javamethodmodifiers Model::getRule "
  /**
   * Get the nth {@link Rule} object in this {@link Model}.
   * <p>
   * @return the nth {@link Rule} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getRule(unsigned int n) "
  /**
   * Get the nth {@link Rule} object in this {@link Model}.
   * <p>
   * @return the nth {@link Rule} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getRule(const std::string& variable) const "
  /**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   * <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */
 public";


%javamethodmodifiers Model::getRule(const std::string& variable) "
  /**
   * Get a {@link Rule} object based on the variable to which it assigns a value.
   * <p>
   * @return the {@link Rule} in this {@link Model} with the given \'variable\' attribute
   * value or <code>null</code> if no such {@link Rule} exists.
   */
 public";


%javamethodmodifiers Model::getConstraint "
  /**
   * Get the nth {@link Constraint} object in this {@link Model}.
   * <p>
   * @return the nth {@link Constraint} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getConstraint(unsigned int n) "
  /**
   * Get the nth {@link Constraint} object in this {@link Model}.
   * <p>
   * @return the nth {@link Constraint} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getReaction "
  /**
   * Get the nth {@link Reaction} object in this {@link Model}.
   * <p>
   * @return the nth {@link Reaction} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getReaction(unsigned int n) "
  /**
   * Get the nth {@link Reaction} object in this {@link Model}.
   * <p>
   * @return the nth {@link Reaction} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getReaction(const std::string& sid) const "
  /**
   * Get a {@link Reaction} object based on its identifier.
   * <p>
   * @return the {@link Reaction} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Reaction} exists.
   */
 public";


%javamethodmodifiers Model::getReaction(const std::string& sid) "
  /**
   * Get a {@link Reaction} object based on its identifier.
   * <p>
   * @return the {@link Reaction} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link Reaction} exists.
   */
 public";


%javamethodmodifiers Model::getSpeciesReference(const std::string& sid) "
  /**
   * Get a {@link SpeciesReference} object based on its identifier.
   * <p>
   * @return the {@link SpeciesReference} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link SpeciesReference} exists.
   */
 public";


%javamethodmodifiers Model::getSpeciesReference(const std::string& sid) const "
  /**
   * Get a {@link SpeciesReference} object based on its identifier.
   * <p>
   * @return the {@link SpeciesReference} in this {@link Model} with the identifier <code>sid</code> or <code>null</code>
   * if no such {@link SpeciesReference} exists.
   */
 public";


%javamethodmodifiers Model::getEvent "
  /**
   * Get the nth {@link Event} object in this {@link Model}.
   * <p>
   * @return the nth {@link Event} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getEvent(unsigned int n) "
  /**
   * Get the nth {@link Event} object in this {@link Model}.
   * <p>
   * @return the nth {@link Event} of this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getEvent(const std::string& sid) const "
  /**
   * Get an {@link Event} object based on its identifier.
   * <p>
   * @return the {@link Event} in this {@link Model} with the identifier <code>sid</code> or <code>null</code> if
   * no such {@link Event} exists.
   */
 public";


%javamethodmodifiers Model::getEvent(const std::string& sid) "
  /**
   * Get an {@link Event} object based on its identifier.
   * <p>
   * @return the {@link Event} in this {@link Model} with the identifier <code>sid</code> or <code>null</code> if
   * no such {@link Event} exists.
   */
 public";


%javamethodmodifiers Model::getNumFunctionDefinitions() const "
  /**
   * Get the number of {@link FunctionDefinition} objects in this {@link Model}.
   * <p>
   * @return the number of FunctionDefinitions in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumUnitDefinitions() const "
  /**
   * Get the number of {@link UnitDefinition} objects in this {@link Model}.
   * <p>
   * @return the number of UnitDefinitions in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumCompartmentTypes() const "
  /**
   * Get the number of {@link CompartmentType} objects in this {@link Model}.
   * <p>
   * @return the number of CompartmentTypes in this {@link Model}.
   * <p>
   * @note The {@link CompartmentType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getNumSpeciesTypes() const "
  /**
   * Get the number of {@link SpeciesType} objects in this {@link Model}.
   * <p>
   * @return the number of SpeciesTypes in this {@link Model}.
   * <p>
   * @note The {@link SpeciesType} object class is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.  It is not available in
   * Level&nbsp;1 nor Level&nbsp;3.
   */
 public";


%javamethodmodifiers Model::getNumCompartments() const "
  /**
   * Get the number of {@link Compartment} objects in this {@link Model}.
   * <p>
   * @return the number of Compartments in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumSpecies() const "
  /**
   * Get the number of Specie objects in this {@link Model}.
   * <p>
   * @return the number of {@link Species} in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumSpeciesWithBoundaryCondition() const "
  /**
   * Get the number of {@link Species} in this {@link Model} having their
   * \'boundaryCondition\' attribute value set to <code>true.</code>
   * <p>
   * @return the number of {@link Species} in this {@link Model} with boundaryCondition set
   * to true.
   */
 public";


%javamethodmodifiers Model::getNumParameters() const "
  /**
   * Get the number of {@link Parameter} objects in this {@link Model}.
   * <p>
   * @return the number of Parameters in this {@link Model}.  Parameters defined in
   * KineticLaws are not included.
   */
 public";


%javamethodmodifiers Model::getNumInitialAssignments() const "
  /**
   * Get the number of {@link InitialAssignment} objects in this {@link Model}.
   * <p>
   * @return the number of InitialAssignments in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumRules() const "
  /**
   * Get the number of {@link Rule} objects in this {@link Model}.
   * <p>
   * @return the number of Rules in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumConstraints() const "
  /**
   * Get the number of {@link Constraint} objects in this {@link Model}.
   * <p>
   * @return the number of Constraints in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumReactions() const "
  /**
   * Get the number of {@link Reaction} objects in this {@link Model}.
   * <p>
   * @return the number of Reactions in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::getNumEvents() const "
  /**
   * Get the number of {@link Event} objects in this {@link Model}.
   * <p>
   * @return the number of Events in this {@link Model}.
   */
 public";


%javamethodmodifiers Model::isBoolean(const ASTNode* node) const "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertL1ToL2 "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertL1ToL3 "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertL2ToL3 "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertL2ToL1(bool strict = false) "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertL3ToL1 "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertL3ToL2 "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::addModifiers "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::addConstantAttribute "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::setSpatialDimensions(double dims = 3.0) "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::addDefinitionsForDefaultUnits "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertParametersToLocals(unsigned int level, unsigned int version) "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::setSpeciesReferenceConstantValueAndStoichiometry "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::removeMetaId "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::removeSBOTerms "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::removeHasOnlySubstanceUnits "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::removeSBOTermsNotInL2V2 "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::removeDuplicateTopLevelAnnotations "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::removeParameterRuleUnits "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertStoichiometryMath "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::assignRequiredValues "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::dealWithModelUnits "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::dealWithStoichiometry "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::convertToL2Strict "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::setSBMLDocument(SBMLDocument* d) "
  /**
   * Predicate returning <code>true</code> if the
   * given {@link ASTNode} is a boolean.
   * <p>
   * Often times, this question can be answered with the {@link ASTNode}\'s own
   * isBoolean() method, but if the AST is an expression that calls a
   * function defined in the {@link Model}\'s {@link ListOfFunctionDefinitions}, the model
   * is needed for lookup context.
   * <p>
   * @return true if the given {@link ASTNode} is a boolean.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Model::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Model}, is
   * always <code>\'model\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'model\'.</code>
   */
 public";


%javamethodmodifiers Model::getElementPosition() const "
  /**
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::populateListFormulaUnitsData "
  /**
   * Populates the list of FormulaDataUnits with the units derived 
   * for the model. The list contains elements of class
   * FormulaUnitsData. 
   * <p>
   * The first element of the list refers to the default units
   * of \'substance per time\' derived from the model and has the
   * unitReferenceId \'subs_per_time\'. This facilitates the comparison of units
   * derived from mathematical formula with the expected units.
   * <p>
   * The next elements of the list record the units of the 
   * compartments and species established from either explicitly
   * declared or default units.
   * <p>
   * The next elements record the units of any parameters.
   * <p>
   * Subsequent elements of the list record the units derived for
   * each mathematical expression encountered within the model.
   * <p>
   * @note This function is utilised by the {@link Unit} Consistency Validator.
   * The list is populated prior to running the validation and thus
   * the consistency of units can be checked by accessing the members
   * of the list and comparing the appropriate data.
   */
 public";


%javamethodmodifiers Model::isPopulatedListFormulaUnitsData "
  /**
   * Predicate returning <code>true</code> if 
   * the list of FormulaUnitsData is populated.
   * <p>
   * @return <code>true</code> if the list of FormulaUnitsData is populated, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Model::addFormulaUnitsData(const FormulaUnitsData* fud) "
  /**
   * Adds a copy of the given FormulaUnitsData object to this {@link Model}.
   * <p>
   * @param fud the FormulaUnitsData to add
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::createFormulaUnitsData "
  /**
   * Creates a new FormulaUnitsData inside this {@link Model} and returns it.
   * <p>
   * @return the FormulaUnitsData object created
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getFormulaUnitsData "
  /**
   * Get the nth FormulaUnitsData object in this {@link Model}.
   * <p>
   * @return the nth FormulaUnitsData of this {@link Model}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getFormulaUnitsData(unsigned int n) "
  /**
   * Get the nth FormulaUnitsData object in this {@link Model}.
   * <p>
   * @return the nth FormulaUnitsData of this {@link Model}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getFormulaUnitsData(const std::string& sid, int typecode) const "
  /**
   * Get a FormulaUnitsData object based on its unitReferenceId and typecode.
   * <p>
   * @return the FormulaUnitsData in this {@link Model} with the unitReferenceId <code>sid</code> 
   * and the typecode (int) <code>typecode</code> or <code>null</code>
   * if no such FormulaUnitsData exists.
   * <p>
   * @note The typecode (int) parameter is necessary as the unitReferenceId
   * of the FormulaUnitsData need not be unique. For example if a {@link Species}
   * with id \'s\' is assigned by an {@link AssignmentRule} there will be two 
   * elements of the FormulaUnitsData list with the unitReferenceId \'s\'; 
   * one with
   * typecode \'SBML_SPECIES\' referring to the units related to the species, 
   * the other with typecode \'SBML_ASSIGNMENT_RULE\' referring to the units
   * derived from the math element of the {@link AssignmentRule}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getFormulaUnitsData(const std::string& sid, int) "
  /**
   * Get a FormulaUnitsData object based on its unitReferenceId and typecode.
   * <p>
   * @return the FormulaUnitsData in this {@link Model} with the unitReferenceId <code>sid</code> 
   * and the typecode (int) <code>typecode</code> or <code>null</code>
   * if no such FormulaUnitsData exists.
   * <p>
   * @note The typecode (int) parameter is necessary as the unitReferenceId
   * of the FormulaUnitsData need not be unique. For example if a {@link Species}
   * with id \'s\' is assigned by an {@link AssignmentRule} there will be two 
   * elements of the FormulaUnitsData list with the unitReferenceId \'s\'; 
   * one with
   * typecode \'SBML_SPECIES\' referring to the units related to the species, 
   * the other with typecode \'SBML_ASSIGNMENT_RULE\' referring to the units
   * derived from the math element of the {@link AssignmentRule}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getNumFormulaUnitsData() const "
  /**
   * Get the number of FormulaUnitsData objects in this {@link Model}.
   * <p>
   * @return the number of FormulaUnitsData in this {@link Model}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getListFormulaUnitsData "
  /**
   * Get the list of FormulaUnitsData object in this {@link Model}.
   * <p>
   * @return the list of FormulaUnitsData for this {@link Model}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::getListFormulaUnitsData() const "
  /**
   * Get the list of FormulaUnitsData object in this {@link Model}.
   * <p>
   * @return the list of FormulaUnitsData for this {@link Model}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Model} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Model} object are:
   * listOfCompartments (L1 only); listOfSpecies (L1V1 only);
   * listOfReactions(L1V1 only)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Model::removeFunctionDefinition(unsigned int n) "
  /**
   * Removes the nth {@link FunctionDefinition} object from this {@link Model} object and 
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link FunctionDefinition} object to remove
   * <p>
   * @return the {@link FunctionDefinition} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeFunctionDefinition(const std::string& sid) "
  /**
   * Removes the {@link FunctionDefinition} object with the given identifier from this {@link Model} 
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link FunctionDefinition} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link FunctionDefinition} object to remove
   * <p>
   * @return the {@link FunctionDefinition} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link FunctionDefinition}
   * object with the identifier exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeUnitDefinition(unsigned int n) "
  /**
   * Removes the nth {@link UnitDefinition} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link UnitDefinition} object to remove
   * <p>
   * @return the {@link UnitDefinition} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeUnitDefinition(const std::string& sid) "
  /**
   * Removes the {@link UnitDefinition} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link UnitDefinition} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link UnitDefinition} object to remove
   * <p>
   * @return the {@link UnitDefinition} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link UnitDefinition}
   * object with the identifier exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeCompartmentType(unsigned int n) "
  /**
   * Removes the nth {@link CompartmentType} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link CompartmentType} object to remove
   * <p>
   * @return the ComapartmentType object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeCompartmentType(const std::string& sid) "
  /**
   * Removes the {@link CompartmentType} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link CompartmentType} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the object to remove
   * <p>
   * @return the {@link CompartmentType} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link CompartmentType}
   * object with the identifier exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeSpeciesType(unsigned int n) "
  /**
   * Removes the nth {@link SpeciesType} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link SpeciesType} object to remove
   * <p>
   * @return the {@link SpeciesType} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeSpeciesType(const std::string& sid) "
  /**
   * Removes the {@link SpeciesType} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link SpeciesType} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link SpeciesType} object to remove
   * <p>
   * @return the {@link SpeciesType} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link SpeciesType}
   * object with the identifier exists in this {@link Model} object.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeCompartment(unsigned int n) "
  /**
   * Removes the nth {@link Compartment} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Compartment} object to remove
   * <p>
   * @return the {@link Compartment} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeCompartment(const std::string& sid) "
  /**
   * Removes the {@link Compartment} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link Compartment} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link Compartment} object to remove
   * <p>
   * @return the {@link Compartment} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Compartment}
   * object with the identifier exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeSpecies(unsigned int n) "
  /**
   * Removes the nth {@link Species} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Species} object to remove
   * <p>
   * @return the {@link Species} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeSpecies(const std::string& sid) "
  /**
   * Removes the {@link Species} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link Species} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link Species} object to remove
   * <p>
   * @return the {@link Species} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Species}
   * object with the identifier exists in this {@link Model} object.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeParameter(unsigned int n) "
  /**
   * Removes the nth {@link Parameter} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Parameter} object to remove
   * <p>
   * @return the {@link Parameter} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeParameter(const std::string& sid) "
  /**
   * Removes the {@link Parameter} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link Parameter} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link Parameter} object to remove
   * <p>
   * @return the {@link Parameter} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Parameter}
   * object with the identifier exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeInitialAssignment(unsigned int n) "
  /**
   * Removes the nth {@link InitialAssignment} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link InitialAssignment} object to remove
   * <p>
   * @return the {@link InitialAssignment} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeInitialAssignment(const std::string& symbol) "
  /**
   * Removes the {@link InitialAssignment} object with the given \'symbol\' attribute 
   * from this {@link Model} object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link InitialAssignment} objects in this {@link Model} object have the
   * \'symbol\' attribute <code>symbol</code>, then <code>null</code> is returned.
   * <p>
   * @param symbol the \'symbol\' attribute of the {@link InitialAssignment} object to remove
   * <p>
   * @return the {@link InitialAssignment} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link InitialAssignment}
   * object with the \'symbol\' attribute exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeRule(unsigned int n) "
  /**
   * Removes the nth {@link Rule} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Rule} object to remove
   * <p>
   * @return the {@link Rule} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeRule(const std::string& variable) "
  /**
   * Removes the {@link Rule} object with the given \'variable\' attribute from this {@link Model} 
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link Rule} objects in this {@link Model} object have the \'variable\' attribute
   * <code>variable</code>, then <code>null</code> is returned.
   * <p>
   * @param variable the \'variable\' attribute of the {@link Rule} object to remove
   * <p>
   * @return the {@link Rule} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Rule}
   * object with the \'variable\' attribute exists in this {@link Model} object.
   */
 public";


%javamethodmodifiers Model::removeConstraint(unsigned int n) "
  /**
   * Removes the nth {@link Constraint} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Constraint} object to remove
   * <p>
   * @return the {@link Constraint} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeReaction(unsigned int n) "
  /**
   * Removes the nth {@link Reaction} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Reaction} object to remove
   * <p>
   * @return the {@link Reaction} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeReaction(const std::string& sid) "
  /**
   * Removes the {@link Reaction} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link Reaction} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link Reaction} object to remove
   * <p>
   * @return the {@link Reaction} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Reaction}
   * object with the identifier exists in this {@link Model} object.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeEvent(unsigned int n) "
  /**
   * Removes the nth {@link Event} object from this {@link Model} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Event} object to remove
   * <p>
   * @return the {@link Event} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Model::removeEvent(const std::string& sid) "
  /**
   * Removes the {@link Event} object with the given identifier from this {@link Model}
   * object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link Event} objects in this {@link Model} object have the identifier 
   * <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the {@link Event} object to remove
   * <p>
   * @return the {@link Event} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Event}
   * object with the identifier exists in this {@link Model} object.
   * <p>
   */
 public";


%javamethodmodifiers Model::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Model::syncAnnotation "
  /**
   * Synchronizes the annotation of this SBML object.
   * <p>
   * Annotation element (XMLNode mAnnotation) is synchronized with the
   * current {@link CVTerm} objects (List mCVTerm), {@link ModelHistory} object 
   * (ModelHistory mHistory) and ListOfLayouts object (ListOfLayouts mLayouts).
   * Currently, this method is called in getAnnotation, isSetAnnotation,
   * and writeElements methods.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SBMLDocument "
/** 
 * Container for an SBML document and interface for global operations
 * on SBML documents.
 * <p>
 * LibSBML uses the class {@link SBMLDocument} as a top-level
 * container for storing SBML content and data associated with it (such as
 * warnings and error messages).  The two primary means of reading an SBML
 * model, {@link SBMLReader#readSBML(String filename)} and
 * {@link SBMLReader#readSBMLFromString(String xml)}, both return an {@link SBMLDocument}
 * object.  From there, callers can inquire about any errors encountered
 * (e.g., using {@link SBMLDocument#getNumErrors()}), access the {@link Model} object, and
 * perform other actions such as consistency-checking and model
 * translation.
 * <p>
 * <p>
 * When creating fresh models programmatically, the starting point is
 * typically the creation of an {@link SBMLDocument} object instance.  The
 * {@link SBMLDocument} constructor accepts arguments for the SBML Level and
 * Version of the model to be created.  After creating the {@link SBMLDocument}
 * object, calling programs then typically call {@link SBMLDocument#createModel()}
 * almost immediately, and then proceed to call the methods on the {@link Model}
 * object to fill out the model\'s contents.
 * <p>
 * {@link SBMLDocument} corresponds roughly to the class <i>Sbml</i> defined in the
 * SBML Level&nbsp;2 specification and <i>SBML</i> in the Level&nbsp;3
 * specification.  It does not have a direct correspondence in SBML
 * Level&nbsp;1.  (However, to make matters simpler for applications,
 * libSBML creates an {@link SBMLDocument} no matter whether the model is
 * Level&nbsp;1, Level&nbsp;2 or Level&nbsp;3.)  In its barest form, when written out in
 * XML format for (e.g.) SBML Level&nbsp;2 Version&nbsp;4, the corresponding
 * structure is the following:
 * <div class=\'fragment\'><pre>
&lt;sbml xmlns=\'http://www.sbml.org/sbml/level2/version4\' level=\'2\' version=\'4\'&gt;
  ...
&lt;/sbml&gt;</pre></div>
 * <p>
 * {@link SBMLDocument} is derived from {@link SBase}, and therefore contains the usual {@link SBase}
 * attributes (in SBML Level&nbsp;2 and Level&nbsp;3) of \'metaid\' and \'sboTerm\', as
 * well as the subelements \'notes\' and \'annotation\'.  It also contains the
 * attributes \'level\' and \'version\' indicating the Level and Version of the
 * SBML data structure.  These can be accessed using the methods defined by
 * the {@link SBase} class for that purpose.
 * <p>
 * <h2>Checking consistency and adherence to SBML specifications</h2>
 * <p>
 * One of the most important features of libSBML is its ability to perform
 * SBML validation to ensure that a model adheres to the SBML specification
 * for whatever Level+Version combination the model uses.  {@link SBMLDocument}
 * provides the methods for running consistency-checking and validation
 * rules on the SBML content.
 * <p>
 * First, a brief explanation of the rationale is in order.  In libSBML
 * versions up to and including the version&nbsp;3.3.x series, the
 * individual methods for creating and setting attributes and other
 * components were quite lenient, and allowed a caller to compose SBML
 * entities that might not, in the end, represent valid SBML.  This allowed
 * applications the freedom to do things such as save incomplete models
 * (which is useful when models are being developed over long periods of
 * time).  In the version&nbsp;4.x series, libSBML is somewhat stricter,
 * but still permits structures to be created independently and the results
 * to be combined in a separate step.  In all these cases, it means that a
 * separate validation step is necessary when a calling program finally
 * wants to finish a complete SBML document.
 * <p>
 * The primary interface to this validation facility is {@link SBMLDocument}\'s
 * {@link SBMLDocument#checkInternalConsistency()} and
 * {@link SBMLDocument#checkConsistency()}.  The former verifies the basic
 * internal consistency and syntax of an SBML document, and the latter
 * implements more elaborate validation rules (both those defined by the
 * SBML specifications, as well as additional rules offered by libSBML).
 * <p>
 * The checks performed by {@link SBMLDocument#checkInternalConsistency()} are
 * hardwired and cannot be changed by calling programs, but the validation
 * performed by {@link SBMLDocument#checkConsistency()} is under program control
 * using the method {@link SBMLDocument#setConsistencyChecks(int categ, boolean
 * onoff)}.  Applications can selectively disable specific kinds of checks
 * that they may not be interested by calling
 * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)} with
 * appropriate parameters.
 * <p>
 * <p>
 * These methods have slightly different relevance depending on whether a
 * model is created programmaticaly from scratch, or whether it is read in
 * from a file or data stream.  The following table summarizes the possible
 * scenarios.
 * <p>
 * <center>
 * <table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray; font-size: 14px;\'>
 *      <th align=\'left\' width=\'200\'>Scenario</th>
 *      <th align=\'left\'>Relevant methods</th>
 *  </tr>
 * <tr><td>Creating a model from scratch</td>
 * <td>Before writing out the model:<ol>
 * <p>
 * <li style=\'margin-bottom: 0.5em\'>Call
 * {@link SBMLDocument#checkInternalConsistency()}, then inquire about the results by
 * calling {@link SBMLDocument#getNumErrors()}</li>
 * <p>
 * <li style=\'margin-bottom: 0.5em\'>
 * Call {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}  to configure which checks
 * will be performed by {@link SBMLDocument#checkConsistency()}</li>
 * <p>
 * <li>Call {@link SBMLDocument#checkConsistency()}, then inquire about the results by
 * calling {@link SBMLDocument#getNumErrors()}</li>
 * </ol>
 * </td>
 * <tr><td>Reading a model from a file or data stream</td>
 * <td>After reading the model:<ol>
 * <p>
 * <li style=\'margin-bottom: 0.5em\'>Basic consistency checks will have been
 * performed automatically by libSBML upon reading the content&mdash;only need
 * to inquire about the results by using {@link SBMLDocument#getNumErrors()}</li>
 * <p>
 * <li style=\'margin-bottom: 0.5em\'>
 * Call {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}  to configure which
 * checks are performed by {@link SBMLDocument#checkConsistency()}</li>
 * <p>
 * <li>Call {@link SBMLDocument#checkConsistency()}, then inquire about the results
 * by calling {@link SBMLDocument#getNumErrors()}</li>
 * </ol>
 * </td>
 * </table>
 * </center>
 * <p>
 * <p>
 * <p>
 * <h2>Converting documents between Levels and Versions of SBML</h2>
 * <p>
 * LibSBML provides facilities for limited translation of SBML between
 * Levels and Versions of the SBML specifications.  The method for doing is
 * is {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)} .  In 
 * general, models can be converted upward without difficulty (e.g., from
 * SBML Level&nbsp;1 to Level&nbsp;2, or from an earlier Version of
 * Level&nbsp;2 to the latest Version of Level&nbsp;2).  Sometimes models
 * can be translated downward as well, if they do not use constructs
 * specific to more advanced Levels of SBML.
 * <p>
 * Calling {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)}  will not <em>necessarily</em> lead
 * to a successful conversion.  The method will return a boolean value
 * to indicate success or failure.  Callers must check the error log (see 
 * next section) attached to the {@link SBMLDocument} object after calling
 * {@link SBMLDocument#setLevelAndVersion(long lev, long ver)}  in order to assess whether any
 * problems arose.
 * <p>
 * If an application is interested in translating to a lower Level and/or
 * Version of SBML within a Level, the following methods allow for prior
 * assessment of whether there is sufficient compatibility to make a
 * translation possible:
 * <ul>
 * <li> {@link SBMLDocument#checkL1Compatibility()},
 * <li> {@link SBMLDocument#checkL2v1Compatibility()},
 * <li> {@link SBMLDocument#checkL2v2Compatibility()},
 * <li> {@link SBMLDocument#checkL2v3Compatibility()}, 
 * <li> {@link SBMLDocument#checkL2v4Compatibility()}, and
 * <li> {@link SBMLDocument#checkL3v1Compatibility()}.
 * </ul>
 * <p>
 * Some changes between Versions of SBML Level&nbsp;2 may lead to
 * unexpected behaviors when attempting conversions in either direction.
 * For example, SBML Level&nbsp;2 Version&nbsp;4 relaxed the requirement
 * for consistency in units of measurement between expressions annd
 * quantities in a model.  As a result, a model written in Version&nbsp;4,
 * if converted to Version&nbsp;3 with no other changes, may fail
 * validation as a Version&nbsp;3 model because Version&nbsp;3 imposed
 * stricter requirements on unit consistency.
 * <p>
 * Other changes between SBML Level 2 and Level 3 make downward conversions
 * challenging.  In some cases, it means that a model converted to
 * Level&nbsp;2 from Level&nbsp;3 will contain attributes that were not
 * explicitly given in the Level&nbsp;3 model, because in Level&nbsp;2
 * these attributes may have been optional or have default values.
 * <p>
 * <h2>Error handling</h2>
 * <p>
 * Upon reading a model, {@link SBMLDocument} logs any problems encountered while
 * reading the model from the file or data stream.  The log contains
 * objects that record diagnostic information about any notable issues that
 * arose.  Whether the problems are warnings or errors, they are both
 * reported through a single common interface involving the object class
 * {@link SBMLError}.
 * <p>
 * The methods {@link SBMLDocument#getNumErrors()}, {@link SBMLDocument#getError(long n)}  and
 * {@link SBMLDocument#printErrors()} allow callers to interact with the warnings
 * or errors logged.  Alternatively, callers may retrieve the entire log as
 * an {@link SBMLErrorLog} object using the method {@link SBMLDocument#getErrorLog()}.
 * The {@link SBMLErrorLog} object provides some alternative methods for
 * interacting with the set of errors and warnings.  In either case,
 * applications typically should first call {@link SBMLDocument#getNumErrors()} to
 * find out if any issues have been logged after specific libSBML
 * operations such as the ones discussed in the sections above.  If they
 * have, then an application will should proceed to inspect the individual
 * reports using either the direct interfaces on {@link SBMLDocument} or using the
 * methods on the {@link SBMLErrorLog} object.
 * <p>
 * <p>
 * <p>
 */
"

%javamethodmodifiers SBMLDocument::getDefaultLevel "
  /**
   * The default SBML Level of new {@link SBMLDocument} objects.
   * <p>
   * This \'default Level\' corresponds to the most recent SBML specification
   * Level available at the time libSBML version 5.0.0

   * was released.  For this copy of libSBML, the value is <code>3</code>.
   * The default Level is used by {@link SBMLDocument} if no Level is explicitly
   * specified at the time of the construction of an {@link SBMLDocument} instance.
   * <p>
   * @return an integer indicating the most recent SBML specification Level
   * <p>
   * @see #getDefaultVersion()
   */
 public";


%javamethodmodifiers SBMLDocument::getDefaultVersion "
  /**
   * The default Version of new {@link SBMLDocument} objects.
   * <p>
   * This \'default Version\' corresponds to the most recent Version
   * within the most recent Level of SBML available at the time libSBML
   * version 5.0.0

   * was released.  For this copy of libSBML, the value is <code>1</code>
   * (where the default Level of SBML is <code>3</code>).  The default
   * Version is used by {@link SBMLDocument} if no Version is explicitly specified
   * at the time of the construction of an {@link SBMLDocument} instance.
   * <p>
   * @return an integer indicating the most recent SBML specification
   * Version
   * <p>
   * @see #getDefaultLevel()
   */
 public";


%javamethodmodifiers SBMLDocument::SBMLDocument(unsigned int level = 0, unsigned int version = 0) "
  /**
   * Creates a new {@link SBMLDocument}, optionally with given values for the SBML
   * Level and Version.
   * <p>
   * If <em>both</em> the SBML Level and Version attributes are not
   * specified, the SBML document is treated as having the latest Level and
   * Version of SBML as determined by {@link SBMLDocument#getDefaultLevel()} and
   * {@link SBMLDocument#getDefaultVersion()}; <em>however</em>, the {@link SBMLDocument}
   * object is otherwise left blank.  In particular, the blank {@link SBMLDocument}
   * object has no associated XML attributes, including (but not limited
   * to) an XML namespace declaration.  The XML namespace declaration is
   * not added until the model is written out, <em>or</em> the method
   * {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)}
   * is called.  This may be important to keep in mind
   * if an application needs to add additional XML namespace declarations
   * on the <code>&lt;sbml&gt;</code> element.  Application writers should
   * either provide values for <code>level</code> and <code>version</code> on the call to this
   * constructor, or else call
   * {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)}
   * shortly after creating the {@link SBMLDocument} object.
   * <p>
   * @param level an integer for the SBML Level
   * <p>
   * @param version an integer for the Version within the SBML Level
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   * <p>
   * @see SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)
   * @see #getDefaultLevel()
   * @see #getDefaultVersion()
   */
 public";


%javamethodmodifiers SBMLDocument::SBMLDocument(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link SBMLDocument} using the given {@link SBMLNamespaces} object 
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   */
 public";


%javamethodmodifiers SBMLDocument::SBMLDocument(const SBMLDocument& rhs) "
  /**
   * Copy constructor; creates a copy of this {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers SBMLDocument::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link SBMLDocument}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers SBMLDocument::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SBMLDocument}.
   * <p>
   * @return a (deep) copy of this {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers SBMLDocument::getModel() const "
  /**
   * Returns the {@link Model} object stored in this {@link SBMLDocument}.
   * <p>
   * It is important to note that this method <em>does not create</em> a
   * {@link Model} instance.  The model in the {@link SBMLDocument} must have been created
   * at some prior time, for example using {@link SBMLDocument#createModel()} 
   * or {@link SBMLDocument#setModel(Model m)}.
   * This method returns <code>null</code> if a model does not yet exist.
   * <p>
   * @return the {@link Model} contained in this {@link SBMLDocument}.
   * <p>
   * @see #createModel()
   */
 public";


%javamethodmodifiers SBMLDocument::getModel "
  /**
   * Returns the {@link Model} object stored in this {@link SBMLDocument}.
   * <p>
   * It is important to note that this method <em>does not create</em> a
   * {@link Model} instance.  The model in the {@link SBMLDocument} must have been created
   * at some prior time, for example using {@link SBMLDocument#createModel()} 
   * or {@link SBMLDocument#setModel(Model m)}.
   * This method returns <code>null</code> if a model does not yet exist.
   * <p>
   * @return the {@link Model} contained in this {@link SBMLDocument}.
   * <p>
   * @see #createModel()
   */
 public";


%javamethodmodifiers SBMLDocument::expandFunctionDefinitions "
  /**
   * Removes {@link FunctionDefinition} constructs from the document and expands
   * any instances of their use within <code>&lt;math&gt;</code> elements.
   * <p>
   * For example, suppose a {@link Model} contains a {@link FunctionDefinition} with
   * identifier <code>\'f\'</code> representing the math expression: <em>f(x, y) = x *
   * y</em>.  Suppose further that there is a reaction in which the
   * <code>&lt;math&gt;</code> element of the {@link KineticLaw} object contains
   * <code>f(s, p)</code>, where <code>s</code> and <code>p</code> are other identifiers
   * defined in the model.  The outcome of invoking this method is that the
   * <code>&lt;math&gt;</code> of the {@link KineticLaw} now represents the
   * expression <em>s * p</em> and the model no longer contains any
   * {@link FunctionDefinition} objects.
   * <p>
   * @return bool <code>true</code> if the transformation was successful, 
   * <code>false</code>, otherwise.
   * <p>
   * @note This function will check the consistency of a model before
   * attemptimg the transformation.  If the model is not valid SBML, the
   * transformation will not be performed and the function will return 
   * <code>false.</code>
   */
 public";


%javamethodmodifiers SBMLDocument::expandInitialAssignments "
  /**
   * Removes {@link InitialAssignment} constructs from the document and
   * replaces them with appropriate values.
   * <p>
   * For example, suppose a {@link Model} contains a {@link InitialAssignment} to a symbol
   * <code>\'k\'</code> where <code>\'k\'</code> is the identifier of a {@link Parameter}.  The outcome of
   * invoking this method is that the \'value\' attribute of the {@link Parameter}
   * definition is set to the result calculated using the {@link InitialAssignment}
   * object\'s <code>&lt;math&gt;</code> formula, and the corresponding
   * {@link InitialAssignment} is then removed from the {@link Model}.
   * <p>
   * @return bool <code>true</code> if the transformation was successful, 
   * <code>false</code>, otherwise.
   * <p>
   * @note This function will check the consistency of a model before
   * attemptimg the transformation.  If the model is not valid SBML, the
   * transformation will not be performed and the function will return 
   * <code>false.</code>  As part of that process, this method will check that it has
   * values for any components referred to by the <code>&lt;math&gt;</code>
   * elements of {@link InitialAssignment} objects.  In cases where not all of the
   * values have been declared (e.g., if the mathematical expression refers
   * to model entities that have no declared values), the {@link InitialAssignment}
   * in question will <em>not</em> be removed and this method will return 
   * <code>false.</code>
   */
 public";


%javamethodmodifiers SBMLDocument::setLevelAndVersion(unsigned int level, unsigned int version, bool strict = true) "
  /**
   * Sets the SBML Level and Version of this {@link SBMLDocument} instance,
   * attempting to convert the model as needed.
   * <p>
   * This method is the principal way in libSBML to convert models between
   * Levels and Versions of SBML.  Generally, models can be converted
   * upward without difficulty (e.g., from SBML Level&nbsp;1 to
   * Level&nbsp;2, or from an earlier Version of Level&nbsp;2 to the latest
   * Version of Level&nbsp;2).  Sometimes models can be translated downward
   * as well, if they do not use constructs specific to more advanced
   * Levels of SBML.
   * <p>
   * Before calling this method, callers may check compatibility directly
   * using the methods {@link SBMLDocument#checkL1Compatibility()},
   * {@link SBMLDocument#checkL2v1Compatibility()},
   * {@link SBMLDocument#checkL2v2Compatibility()},
   * {@link SBMLDocument#checkL2v3Compatibility()},
   * {@link SBMLDocument#checkL2v4Compatibility()}, and
   * {@link SBMLDocument#checkL3v1Compatibility()}.
   * <p>
   * The valid combinations of SBML Level and Version as of this release
   * of libSBML are the following: 
   * <ul>
   * <li> Level&nbsp;1 Version&nbsp;2
   * <li> Level&nbsp;2 Version&nbsp;1
   * <li> Level&nbsp;2 Version&nbsp;2
   * <li> Level&nbsp;2 Version&nbsp;3
   * <li> Level&nbsp;2 Version&nbsp;4
   * <li> Level&nbsp;3 Version&nbsp;1
   * </ul>
   * <p>
   * Strict conversion applies the additional criteria that both the
   * source and the target model must be consistent SBML.  Users can
   * control the consistency checks that are applied using the
   * {@link SBMLDocument#setConsistencyChecksForConversion(int categ, boolean onoff)} method.  If either
   * the source or the potential target model have validation errors, the
   * conversion is not performed.  When a strict conversion is successful,
   * the underlying SBML object model is altered to reflect the new level
   * and version.  Thus, information that cannot be converted
   * (e.g. sboTerms) will be lost.
   * <p>
   * @param level the desired SBML Level
   * <p>
   * @param version the desired Version within the SBML Level
   * <p>
   * @param strict boolean indicating whether to check consistency
   * of both the source and target model when performing
   * conversion (defaults to <code> true </code>)
   * <p>
   * @note Calling this method will not <em>necessarily</em> lead to a successful
   * conversion.  If the conversion fails, it will be logged in the error
   * list associated with this {@link SBMLDocument}.  Callers should consult
   * getNumErrors() to find out if the conversion succeeded without
   * problems.  For conversions from Level&nbsp;2 to Level&nbsp;1, callers
   * can also check the Level of the model after calling this method to
   * find out whether it is Level&nbsp;1.  (If the conversion to
   * Level&nbsp;1 failed, the Level of this model will be left unchanged.)
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   * <p>
   * @see #checkL1Compatibility()
   * @see #checkL2v1Compatibility()
   * @see #checkL2v2Compatibility()
   * @see #checkL2v3Compatibility()
   * @see #checkL2v4Compatibility()
   * @see #checkL3v1Compatibility()
   * @see #checkL3v1Compatibility()
   */
 public";


%javamethodmodifiers SBMLDocument::setModel(const Model* m) "
  /**
   * Sets the {@link Model} for this {@link SBMLDocument} to a copy of the given {@link Model}.
   * <p>
   * @param m the new {@link Model} to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <p>
   * @see #createModel()
   * @see #getModel()
   */
 public";


%javamethodmodifiers SBMLDocument::createModel(const std::string& sid = "") "
  /**
   * Creates a new {@link Model} inside this {@link SBMLDocument}, and returns a pointer to
   * it.
   * <p>
   * In SBML Level&nbsp;2, the use of an identifier on a {@link Model} object is
   * optional.  This method takes an optional argument, <code>sid</code>, for setting
   * the identifier.  If not supplied, the identifier attribute on the
   * {@link Model} instance is not set.
   * <p>
   * @param sid the identifier of the new {@link Model} to create.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   * <p>
   * @see #getModel()
   * @see SBMLDocument#setModel(Model m)
   */
 public";


%javamethodmodifiers SBMLDocument::setConsistencyChecks(SBMLErrorCategory_t category, bool apply) "
  /**
   * Controls the consistency checks that are performed when
   * {@link SBMLDocument#checkConsistency()} is called.
   * <p>
   * This method works by adding or subtracting consistency checks from the
   * set of all possible checks that {@link SBMLDocument#checkConsistency()} knows
   * how to perform.  This method may need to be called multiple times in
   * order to achieve the desired combination of checks.  The first
   * argument (<code>category</code>) in a call to this method indicates the category
   * of consistency/error checks that are to be turned on or off, and the
   * second argument (<code>apply</code>, a boolean) indicates whether to turn it on
   * (value of <code>true</code>) or off (value of <code>false</code>).
   * <p>
   * * The possible categories (values to the argument <code>category</code>) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class {@link libsbmlConstants}.
   * The following are the possible choices:
   * <p>
   * <ul>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_GENERAL_CONSISTENCY
   * LIBSBML_CAT_GENERAL_CONSISTENCY}: Correctness and consistency
   * of specific SBML language constructs.  Performing this set of checks
   * is highly recommended.  With respect to the SBML specification, these
   * concern failures in applying the validation rules numbered 2xxxx in
   * the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1
   * specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY
   * LIBSBML_CAT_IDENTIFIER_CONSISTENCY}: Correctness and
   * consistency of identifiers used for model entities.  An example of
   * inconsistency would be using a species identifier in a reaction rate
   * formula without first having declared the species.  With respect to
   * the SBML specification, these concern failures in applying the
   * validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
   * and Level&nbsp;3 Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY
   * LIBSBML_CAT_UNITS_CONSISTENCY}: Consistency of measurement
   * units associated with quantities in a model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 105xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY
   * LIBSBML_CAT_MATHML_CONSISTENCY}: Syntax of MathML constructs.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 102xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_SBO_CONSISTENCY
   * LIBSBML_CAT_SBO_CONSISTENCY}: Consistency and validity of SBO
   * identifiers (if any) used in the model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_OVERDETERMINED_MODEL
   * LIBSBML_CAT_OVERDETERMINED_MODEL}: Static analysis of whether
   * the system of equations implied by a model is mathematically
   * overdetermined.  With respect to the SBML specification, this is
   * validation rule #10601 in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and
   * Level&nbsp;3 Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_MODELING_PRACTICE
   * LIBSBML_CAT_MODELING_PRACTICE}: Additional checks for
   * recommended good modeling practice. (These are tests performed by
   * libSBML and do not have equivalent SBML validation rules.)
   * </ul>
   * <p>
   * <em>By default, all validation checks are applied</em> to the model in
   * an {@link SBMLDocument} object <em>unless</em>
   * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}
   * is called to indicate that only a subset should be applied.  Further,
   * this default (i.e., performing all checks) applies separately to
   * <em>each new {@link SBMLDocument} object</em> created.  In other words, each
   * time a model is read using {@link SBMLReader#readSBML(String filename)},
   * {@link SBMLReader#readSBMLFromString(String xml)},
   * or the global functions readSBML() and readSBMLFromString(), a new
   * {@link SBMLDocument} is created and for that document, a call to
   * {@link SBMLDocument#checkConsistency()} will default to applying all possible checks.
   * Calling programs must invoke
   * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}
   * for each such new model if they wish to change the consistency checks
   * applied.
   * <p>
   * @param category a value drawn from * the set of SBML error categories indicating the
   * consistency checking/validation to be turned on or off.
   * <p>
   * @param apply a boolean indicating whether the checks indicated by
   * <code>category</code> should be applied or not.
   * <p>
   * @see SBMLDocument#checkConsistency()
   */
 public";


%javamethodmodifiers SBMLDocument::setConsistencyChecksForConversion(SBMLErrorCategory_t category, bool apply) "
  /**
   * Controls the consistency checks that are performed when
   * {@link SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)} is called.
   * <p>
   * This method works by adding or subtracting consistency checks from the
   * set of all possible checks that may be performed to avoid conversion
   * to or from an invalid document.  This method may need to be called 
   * multiple times in
   * order to achieve the desired combination of checks.  The first
   * argument (<code>category</code>) in a call to this method indicates the category
   * of consistency/error checks that are to be turned on or off, and the
   * second argument (<code>apply</code>, a boolean) indicates whether to turn it on
   * (value of <code>true</code>) or off (value of <code>false</code>).
   * <p>
   * * The possible categories (values to the argument <code>category</code>) are the
   * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>
   * in the interface class {@link libsbmlConstants}.
   * The following are the possible choices:
   * <p>
   * <ul>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_GENERAL_CONSISTENCY
   * LIBSBML_CAT_GENERAL_CONSISTENCY}: Correctness and consistency
   * of specific SBML language constructs.  Performing this set of checks
   * is highly recommended.  With respect to the SBML specification, these
   * concern failures in applying the validation rules numbered 2xxxx in
   * the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1
   * specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY
   * LIBSBML_CAT_IDENTIFIER_CONSISTENCY}: Correctness and
   * consistency of identifiers used for model entities.  An example of
   * inconsistency would be using a species identifier in a reaction rate
   * formula without first having declared the species.  With respect to
   * the SBML specification, these concern failures in applying the
   * validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
   * and Level&nbsp;3 Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY
   * LIBSBML_CAT_UNITS_CONSISTENCY}: Consistency of measurement
   * units associated with quantities in a model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 105xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY
   * LIBSBML_CAT_MATHML_CONSISTENCY}: Syntax of MathML constructs.
   * With respect to the SBML specification, these concern failures in
   * applying the validation rules numbered 102xx in the Level&nbsp;2
   * Versions&nbsp;2&ndash;4 and Level&nbsp;3 Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_SBO_CONSISTENCY
   * LIBSBML_CAT_SBO_CONSISTENCY}: Consistency and validity of SBO
   * identifiers (if any) used in the model.  With respect to the SBML
   * specification, these concern failures in applying the validation rules
   * numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and Level&nbsp;3
   * Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_OVERDETERMINED_MODEL
   * LIBSBML_CAT_OVERDETERMINED_MODEL}: Static analysis of whether
   * the system of equations implied by a model is mathematically
   * overdetermined.  With respect to the SBML specification, this is
   * validation rule #10601 in the Level&nbsp;2 Versions&nbsp;2&ndash;4 and
   * Level&nbsp;3 Version&nbsp;1 specifications.
   * <p>
   * <li> {@link  libsbmlConstants#LIBSBML_CAT_MODELING_PRACTICE
   * LIBSBML_CAT_MODELING_PRACTICE}: Additional checks for
   * recommended good modeling practice. (These are tests performed by
   * libSBML and do not have equivalent SBML validation rules.)
   * </ul>
   * <p>
   * <em>By default, all validation checks are applied</em> to the model in
   * an {@link SBMLDocument} object <em>unless</em>
   * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}
   * is called to indicate that only a subset should be applied.  Further,
   * this default (i.e., performing all checks) applies separately to
   * <em>each new {@link SBMLDocument} object</em> created.  In other words, each
   * time a model is read using {@link SBMLReader#readSBML(String filename)},
   * {@link SBMLReader#readSBMLFromString(String xml)},
   * or the global functions readSBML() and readSBMLFromString(), a new
   * {@link SBMLDocument} is created and for that document, a call to
   * {@link SBMLDocument#checkConsistency()} will default to applying all possible checks.
   * Calling programs must invoke
   * {@link SBMLDocument#setConsistencyChecks(int categ, boolean onoff)}
   * for each such new model if they wish to change the consistency checks
   * applied.
   * <p>
   * @param category a value drawn from * the set of SBML error categories indicating the consistency
   * checking/validation to be turned on or off.
   * <p>
   * @param apply a boolean indicating whether the checks indicated by
   * <code>category</code> should be applied or not.
   * <p>
   * @see SBMLDocument#setLevelAndVersion(long lev, long ver, boolean strict)
   */
 public";


%javamethodmodifiers SBMLDocument::checkConsistency "
  /**
   * Performs consistency checking and validation on this SBML document.
   * <p>
   * If this method returns a nonzero value (meaning, one or more
   * consistency checks have failed for SBML document), the failures may be
   * due to warnings <em>or</em> errors.  Callers should inspect the severity
   * flag in the individual {@link SBMLError} objects returned by
   * {@link SBMLDocument#getError(long n)} to determine the nature of the failures.
   * <p>
   * @return the number of failed checks (errors) encountered.
   * <p>
   * @see SBMLDocument#checkInternalConsistency()
   */
 public";


%javamethodmodifiers SBMLDocument::checkInternalConsistency "
  /**
   * Performs consistency checking on libSBML\'s internal representation of 
   * an SBML {@link Model}.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   * <p>
   * The distinction between this method and
   * {@link SBMLDocument#checkConsistency()} is that this method reports on
   * fundamental syntactic and structural errors that violate the XML
   * Schema for SBML; by contrast, {@link SBMLDocument#checkConsistency()}
   * performs more elaborate model verifications and also validation
   * according to the validation rules written in the appendices of the
   * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 specification documents.
   * <p>
   * @see SBMLDocument#checkConsistency()
   */
 public";


%javamethodmodifiers SBMLDocument::checkL1Compatibility "
  /**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;1 and can be converted
   * to Level&nbsp;1.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   */
 public";


%javamethodmodifiers SBMLDocument::checkL2v1Compatibility "
  /**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;1 and can
   * be converted to Level&nbsp;2 Version&nbsp;1.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   */
 public";


%javamethodmodifiers SBMLDocument::checkL2v2Compatibility "
  /**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;2 and can
   * be converted to Level&nbsp;2 Version&nbsp;2.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   */
 public";


%javamethodmodifiers SBMLDocument::checkL2v3Compatibility "
  /**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;3 and can
   * be converted to Level&nbsp;2 Version&nbsp;3.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   */
 public";


%javamethodmodifiers SBMLDocument::checkL2v4Compatibility "
  /**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;2 Version&nbsp;4 and can
   * be converted to Level&nbsp;2 Version&nbsp;4.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   */
 public";


%javamethodmodifiers SBMLDocument::checkL3v1Compatibility "
  /**
   * Performs a set of consistency checks on the document to establish
   * whether it is compatible with SBML Level&nbsp;3 Version&nbsp;1 and can
   * be converted to Level&nbsp;3 Version&nbsp;1.
   * <p>
   * Callers should query the results of the consistency check by calling
   * {@link SBMLDocument#getError(long n)}.
   * <p>
   * @return the number of failed checks (errors) encountered.
   */
 public";


%javamethodmodifiers SBMLDocument::getError "
  /**
   * Returns the nth error or warning encountered during parsing,
   * consistency checking, or attempted translation of this model.
   * <p>
   * Callers can use method {@link XMLError#getSeverity()} on the result to assess
   * the severity of the problem.  The possible severity levels range from
   * informational messages to fatal errors.
   * <p>
   * @return the error or warning indexed by integer <code>n</code>, or return 
   * <code>null</code> if <code>n &gt; (getNumErrors() - 1)</code>.
   * <p>
   * @param n the integer index of the error sought.
   * <p>
   * @see SBMLDocument#getNumErrors()
   */
 public";


%javamethodmodifiers SBMLDocument::getNumErrors() const "
  /**
   * Returns the number of errors or warnings encountered during parsing,
   * consistency checking, or attempted translation of this model.
   * <p>
   * @return the number of errors or warnings encountered
   * <p>
   * @see SBMLDocument#getError(long n)
   */
 public";


%javamethodmodifiers SBMLDocument::printErrors(std::ostream& stream = std::cerr) const "
  /**
   * Prints to the given output stream all the errors or warnings
   * encountered during parsing, consistency checking, or attempted
   * translation of this model.
   * <p>
   * If no errors have occurred, i.e., <code>getNumErrors() == 0</code>, no
   * output will be sent to the stream.
   * <p>
   * The format of the output is:
   * <div class=\'fragment\'><pre>
   N error(s):
     line NNN: (id) message
 </pre></div>
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers SBMLDocument::setSBMLDocument(SBMLDocument* d) "
  /**
   * No-op; it is provided for consistency with the method available on
   * other libSBML object classes but has no effect on {@link SBMLDocument}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::enablePackageInternal(const std::string& pkgURI,const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see SBMLDocument#getElementName()
   */
 public";


%javamethodmodifiers SBMLDocument::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link SBMLDocument},
   * is always <code>\'sbml\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'sbml\'.</code>
   */
 public";


%javamethodmodifiers SBMLDocument::getErrorLog "
  /**
   * Returns the list of errors or warnings logged during parsing, 
   * consistency checking, or attempted translation of this model.
   * <p>
   * @return the {@link SBMLErrorLog} used for this {@link SBMLDocument}
   * <p>
   * @see SBMLDocument#getNumErrors()
   */
 public";


%javamethodmodifiers SBMLDocument::getNamespaces() const "
  /**
   * Returns a list of XML Namespaces associated with the XML content
   * of this SBML document.
   * <p>
   * @return the XML Namespaces associated with this SBML object
   */
 public";


%javamethodmodifiers SBMLDocument::enableDefaultNS(const std::string& package, bool flag) "
  /**
   * Set/Unset default namespace (i.e. add xmlns=\'...\' attribute) to
   * each top level element defined in the given package extension.
   * No prefix will be written when writing elements defined in the
   * given package extension if \'true\' is given as second argument.
   * <p>
   * @param package the name or URI of the package extension.
   * @param flag bool value
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION }
   */
 public";


%javamethodmodifiers SBMLDocument::isEnabledDefaultNS(const std::string& package) "
  /**
   * Returns <code>true</code> if a default namespace (i.e. add xmlns=\'...\' attribute) 
   * is added to each top level element defined in the given package extension,
   * otherwise returns <code>false.</code>
   * <p>
   * @param package the name or URI of the package extension.
   * <p>
   * @return a boolean 
   */
 public";


%javamethodmodifiers SBMLDocument::setPkgRequired(const std::string& package, bool flag) "
  /**
   * Sets the required attribute of the given package extension.
   * <p>
   * @note the name of package must not be given if the package is
   *       not enabled.
   * <p>
   * @param package the name or URI of the package extension.
   * @param flag bool value
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_PKG_UNKNOWN_VERSION LIBSBML_PKG_UNKNOWN_VERSION }
   */
 public";


%javamethodmodifiers SBMLDocument::getPkgRequired(const std::string& package) "
  /**
   * Returnes the required attribute of the given package extension.
   * <p>
   * @note the name of package must not be given if the package is
   *       not enabled.
   * <p>
   * @param package the name or URI of the package extension.
   * <p>
   * @return boolean flag indicating whether the package is flagged as
   * being required.
   */
 public";


%javamethodmodifiers SBMLDocument::isSetPkgRequired(const std::string& package) "
  /**
   * Returnes <code>true</code> if the required attribute of the given package extension
   * is defined, otherwise returns <code>false.</code>
   * <p>
   * @note the name of package must not be given if the package is
   *       not enabled.
   * <p>
   * @param package the name or URI of the package extension.
   * <p>
   * @return a boolean
   */
 public";


%javamethodmodifiers SBMLDocument::isIgnoredPkg(const std::string& pkgURI) "
  /**
   * Returnes <code>true</code> if the given package extension is one of ignored
   * packages (i.e. the package is defined in this document but the package
   * is not available), otherwise returns <code>false.</code>
   * <p>
   * @param pkgURI the URI of the package extension.
   * <p>
   * @return a boolean
   */
 public";


%javamethodmodifiers SBMLDocument::getElementPosition() const "
  /**
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::writeXMLNS(XMLOutputStream& stream) const "
  /**
   * <p>
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::conversion_errors(unsigned int errors, bool strictUnits = true) "
  /**
   * <p>
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::hasStrictUnits "
  /**
   * <p>
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::hasStrictSBO "
  /**
   * <p>
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocument::expandFD_errors(unsigned int errors) "
  /**
   * <p>
   * Subclasses should override this method to write their xmlns attriubutes
   * (if any) to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) FunctionDefinition "
/** 
 * LibSBML implementation of SBML\'s FunctionDefinition construct.
 * <p>
 * The {@link FunctionDefinition} structure associates an identifier with a
 * function definition.  This identifier can then be used as the function
 * called in subsequent MathML content elsewhere in an SBML model.
 * <p>
 * {@link FunctionDefinition} has one required attribute, \'id\', to give the
 * function a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A {@link FunctionDefinition} instance can also have
 * an optional \'name\' attribute of type <code>string.</code>  Identifiers and names
 * must be used according to the guidelines described in the SBML
 * specification (e.g., Section 3.3 in the Level 2 Version 4
 * specification).
 * <p>
 * {@link FunctionDefinition} has a required \'math\' subelement containing a MathML
 * expression defining the function body.  The content of this element can
 * only be a MathML \'lambda\' element.  The \'lambda\' element must begin with
 * zero or more \'bvar\' elements, followed by any other of the elements in
 * the MathML subset allowed in SBML Level 2 <em>except</em> \'lambda\' (i.e., a
 * \'lambda\' element cannot contain another \'lambda\' element).  This is the
 * only place in SBML where a \'lambda\' element can be used.  The function
 * defined by a {@link FunctionDefinition} is only available for use in other
 * MathML elements that <em>follow</em> the {@link FunctionDefinition} definition in the
 * model.  (These restrictions prevent recursive and mutually-recursive
 * functions from being expressed.)
 * <p>
 * A further restriction on the content of \'math\' is that it cannot contain
 * references to variables other than the variables declared to the
 * \'lambda\' itself.  That is, the contents of MathML \'ci\' elements inside
 * the body of the \'lambda\' can only be the variables declared by its
 * \'bvar\' elements, or the identifiers of other {@link FunctionDefinition}
 * instances in the model.  This means must be written so that all
 * variables or parameters used in the MathML content are passed to them
 * via their function parameters.  In SBML Level&nbsp;2, this restriction
 * applies also to the MathML <code>csymbol</code> elements for <em>time</em> and 
 * <em>delay</em>; in SBML Level&nbsp;3, it additionally applies to the <code>csymbol</code>
 * element for <em>avogadro</em>.
 * <p>
 * @note Function definitions (also informally known as user-defined
 * functions) were introduced in SBML Level 2.  They have purposefully
 * limited capabilities.  A function cannot reference parameters or other
 * model quantities outside of itself; values must be passed as parameters
 * to the function.  Moreover, recursive and mutually-recursive functions
 * are not permitted.  The purpose of these limitations is to balance power
 * against complexity of implementation.  With the restrictions as they
 * are, function definitions could be implemented as textual
 * substitutions&mdash;they are simply macros.  Software implementations
 * therefore do not need the full function-definition machinery typically
 * associated with programming languages.
 * <br><br>
 * Another important point to note is {@link FunctionDefinition} does not
 * have a separate attribute for defining the units of the value returned
 * by the function.  The units associated with the function\'s return value,
 * when the function is called from within MathML expressions elsewhere in
 * SBML, are simply the overall units of the expression in
 * {@link FunctionDefinition}\'s \'math\' subelement when applied to the arguments
 * supplied in the call to the function.  Ascertaining these units requires
 * performing dimensional analysis on the expression.  (Readers may wonder
 * why there is no attribute.  The reason is that having a separate
 * attribute for declaring the units would not only be redundant, but also
 * lead to the potential for having conflicting information.  In the case
 * of a conflict between the declared units and those of the value actually
 * returned by the function, the only logical resolution rule would be to
 * assume that the correct units are those of the expression anyway.)
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) ListOfFunctionDefinitions "
/** 
 * LibSBML implementation of SBML\'s ListOfFunctionDefinitions construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers FunctionDefinition::FunctionDefinition(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link FunctionDefinition} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link FunctionDefinition}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link FunctionDefinition}
   * <p>
   * @note Upon the addition of a {@link FunctionDefinition} object to an
   * {@link SBMLDocument} (e.g., using {@link Model#addFunctionDefinition(FunctionDefinition f)}), the SBML
   * Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link FunctionDefinition} object
   * via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link FunctionDefinition} is
   * an important aid to producing valid SBML.  Knowledge of the intented
   * SBML Level and Version determine whether it is valid to assign a
   * particular value to an attribute, or whether it is valid to add an
   * object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers FunctionDefinition::FunctionDefinition(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link FunctionDefinition} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link FunctionDefinition} object to an
   * {@link SBMLDocument} (e.g., using {@link Model#addFunctionDefinition(FunctionDefinition f)}), the SBML
   * XML namespace of the document <em>overrides</em> the value used when
   * creating the {@link FunctionDefinition} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link FunctionDefinition} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers FunctionDefinition::FunctionDefinition(const FunctionDefinition& orig) "
  /**
   * Copy constructor; creates a copy of this {@link FunctionDefinition}.
   */
 public";


%javamethodmodifiers FunctionDefinition::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link FunctionDefinition}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link FunctionDefinition} in
   * the list of function definitions.
   */
 public";


%javamethodmodifiers FunctionDefinition::clone() const "
  /**
   * Creates and returns a deep copy of this {@link FunctionDefinition}.
   * <p>
   * @return a (deep) copy of this {@link FunctionDefinition}.
   */
 public";


%javamethodmodifiers FunctionDefinition::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link FunctionDefinition}.
   * <p>
   * @return the id of this {@link FunctionDefinition}.
   */
 public";


%javamethodmodifiers FunctionDefinition::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link FunctionDefinition}.
   * <p>
   * @return the name of this {@link FunctionDefinition}.
   */
 public";


%javamethodmodifiers FunctionDefinition::getMath() const "
  /**
   * Get the mathematical formula of this {@link FunctionDefinition}.
   * <p>
   * @return an {@link ASTNode}, the value of the \'math\' subelement of this
   * {@link FunctionDefinition}
   */
 public";


%javamethodmodifiers FunctionDefinition::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link FunctionDefinition}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link FunctionDefinition} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers FunctionDefinition::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link FunctionDefinition}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link FunctionDefinition} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers FunctionDefinition::isSetMath() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link FunctionDefinition}\'s \'math\' subelement contains a value.
   * <p>
   * @return <code>true</code> if the \'math\' for this {@link FunctionDefinition} is set,
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers FunctionDefinition::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link FunctionDefinition}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link FunctionDefinition}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers FunctionDefinition::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link FunctionDefinition}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link FunctionDefinition}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers FunctionDefinition::setMath(const ASTNode* math) "
  /**
   * Sets the \'math\' subelement of this {@link FunctionDefinition} to the Abstract
   * Syntax Tree given in <code>math</code>.
   * <p>
   * @param math an AST containing the mathematical expression to
   * be used as the formula for this {@link FunctionDefinition}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers FunctionDefinition::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link FunctionDefinition}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers FunctionDefinition::getArgument "
  /**
   * Get the <code>n</code>th argument to this function.
   * <p>
   * Callers should first find out the number of arguments to the function
   * by calling getNumArguments().
   * <p>
   * @param n an integer index for the argument sought.
   * <p>
   * @return the nth argument (bound variable) passed to this
   * {@link FunctionDefinition}.
   * <p>
   * @see #getNumArguments()
   */
 public";


%javamethodmodifiers FunctionDefinition::getArgument(const std::string& name) const "
  /**
   * Get the argument named <code>name</code> to this {@link FunctionDefinition}.
   * <p>
   * @param name the exact name (case-sensitive) of the sought-after
   * argument
   * <p>
   * @return the argument (bound variable) having the given name, or <code>null</code> if
   * no such argument exists.
   */
 public";


%javamethodmodifiers FunctionDefinition::getBody() const "
  /**
   * Get the mathematical expression that is the body of this
   * {@link FunctionDefinition} object.
   * <p>
   * @return the body of this {@link FunctionDefinition} as an Abstract Syntax
   * Tree, or <code>null</code> if no body is defined.
   */
 public";


%javamethodmodifiers FunctionDefinition::getBody "
  /**
   * Get the mathematical expression that is the body of this
   * {@link FunctionDefinition} object.
   * <p>
   * @return the body of this {@link FunctionDefinition} as an Abstract Syntax
   * Tree, or <code>null</code> if no body is defined.
   */
 public";


%javamethodmodifiers FunctionDefinition::getNumArguments() const "
  /**
   * Get the number of arguments (bound variables) taken by this
   * {@link FunctionDefinition}.
   * <p>
   * @return the number of arguments (bound variables) that must be passed
   * to this {@link FunctionDefinition}.
   */
 public";


%javamethodmodifiers FunctionDefinition::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers FunctionDefinition::getElementName() const "
  /**
   * Returns the XML element name of this object, which for
   * {@link FunctionDefinition}, is always <code>\'functionDefinition\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'functionDefinition\'.</code>
   */
 public";


%javamethodmodifiers FunctionDefinition::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers FunctionDefinition::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link FunctionDefinition} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link FunctionDefinition} object are:
   * <li> \'id\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers FunctionDefinition::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link FunctionDefinition} object
   * have been set.
   * <p>
   * @note The required elements for a {@link FunctionDefinition} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers FunctionDefinition::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers FunctionDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers FunctionDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers FunctionDefinition::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers FunctionDefinition::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers FunctionDefinition::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::ListOfFunctionDefinitions(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfFunctionDefinitions} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::ListOfFunctionDefinitions(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfFunctionDefinitions} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfFunctionDefinitions} object to be created.
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfFunctionDefinitions} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfFunctionDefinitions}.
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link FunctionDefinition} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfFunctionDefinitions}, the XML element name is 
   * <code>\'listOfFunctionDefinitions\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfFunctionDefinitions\'.</code>
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::get(unsigned int n) "
  /**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}.
   * <p>
   * @param n the index number of the {@link FunctionDefinition} to get.
   * <p>
   * @return the nth {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::get "
  /**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}.
   * <p>
   * @param n the index number of the {@link FunctionDefinition} to get.
   * <p>
   * @return the nth {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::get(const std::string& sid) "
  /**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link FunctionDefinition} to get.
   * <p>
   * @return {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}
   * with the given id or <code>null</code> if no such
   * {@link FunctionDefinition} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::get(const std::string& sid) const "
  /**
   * Get a {@link FunctionDefinition} from the {@link ListOfFunctionDefinitions}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link FunctionDefinition} to get.
   * <p>
   * @return {@link FunctionDefinition} in this {@link ListOfFunctionDefinitions}
   * with the given id or <code>null</code> if no such
   * {@link FunctionDefinition} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfFunctionDefinitions} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfFunctionDefinitions} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the
   * {@link ListOfFunctionDefinitions} in a model is (in SBML Level 2 Version 4)
   * the first ListOf___.  (However, it differs for different Levels and
   * Versions of SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfFunctionDefinitions::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitKind_equals(UnitKind_t uk1, UnitKind_t uk2) "
/**
 * Tests for logical equality between two given <code>UNIT_KIND_</code>
 * code values.
 * <p>
 * This function behaves exactly like C\'s <code>==</code> operator, except
 * for the following two cases:
 * <ul>
 * <li>{@link  libsbmlConstants#UNIT_KIND_LITER UNIT_KIND_LITER} <code>==</code> {@link  libsbmlConstants#UNIT_KIND_LITRE UNIT_KIND_LITRE}
 * <li>{@link  libsbmlConstants#UNIT_KIND_METER UNIT_KIND_METER} <code>==</code> {@link  libsbmlConstants#UNIT_KIND_METRE UNIT_KIND_METRE}
 * </ul>
 * <p>
 * In the two cases above, C equality comparison would yield <code>false</code>
 * (because each of the above is a distinct enumeration value), but
 * this function returns <code>true.</code>
 * <p>
 * @param uk1 a <code>UNIT_KIND_</code> value 
 * @param uk2 a second <code>UNIT_KIND_</code> value to compare to <code>uk1</code>
 * <p>
 * @return nonzero (for <code>true</code>) if <code>uk1</code> is logically equivalent to 
 * <code>uk2</code>, zero (for <code>false</code>) otherwise.
 * <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 */
 public";


%javamethodmodifiers UnitKind_forName(const char *name) "
/**
 * Converts a text string naming a kind of unit to its corresponding
 * libSBML <code>UNIT_KIND_</code> constant/enumeration value.
 * <p>
 * @param name a string, the name of a predefined base unit in SBML
 * <p>
 * @return a value the set of <code>UNIT_KIND_</code> codes
 * defined in class {@link libsbmlConstants}, corresponding to the string
 * <code>name</code> (determined in a case-insensitive manner).
 * <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 */
 public";


%javamethodmodifiers UnitKind_toString(UnitKind_t uk) "
/**
 * Converts a unit code to a text string equivalent.
 * <p>
 * @param uk a value from the set of <code>UNIT_KIND_</code> codes
 * defined in the class {@link libsbmlConstants}
 * <p>
 * <p>
 * @return the name corresponding to the given unit code.
 * <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 * <p>
 * @warning The string returned is a static data value.  The caller does not
 * own the returned string and is therefore not allowed to modify it.
 */
 public";


%javamethodmodifiers UnitKind_isValidUnitKindString(const char *str, unsigned int level, unsigned int version) "
/**
 * Predicate for testing whether a given string corresponds to a
 * predefined libSBML unit code.
 * <p>
 * @param str a text string naming a base unit defined by SBML
 * @param level the Level of SBML
 * @param version the Version within the Level of SBML
 * <p>
 * @return nonzero (for <code>true</code>) if string is the name of a valid
 * <code>UNIT_KIND_</code> value, zero (for <code>false</code>) otherwise.
 * <p>
 * @note For more information about the libSBML unit codes, please refer to
 * the class documentation for {@link Unit}.
 */
 public";


%typemap(javaimports) Unit "
/** 
 * LibSBML implementation of SBML\'s Unit construct.
 * <p>
 * The SBML unit definition facility uses two classes of objects,
 * {@link UnitDefinition} and {@link Unit}.  The approach to defining units in SBML is
 * compositional; for example, <em>meter second<sup> &ndash;2</sup></em> is
 * constructed by combining a {@link Unit} object representing <em>meter</em> with
 * another {@link Unit} object representing <em>second<sup> &ndash;2</sup></em>.
 * The combination is wrapped inside a {@link UnitDefinition}, which provides for
 * assigning an identifier and optional name to the combination.  The
 * identifier can then be referenced from elsewhere in a model.  Thus, the
 * {@link UnitDefinition} class is the container, and {@link Unit} instances are placed
 * inside {@link UnitDefinition} instances.
 * <p>
 * A {@link Unit} structure has four attributes named \'kind\', \'exponent\', \'scale\'
 * and \'multiplier\'.  It represents a (possibly transformed) reference to a
 * base unit.  The attribute \'kind\' on {@link Unit} indicates the chosen base unit.
 * Its value must be one of the text strings listed below; this list
 * corresponds to SBML Level&nbsp;3 Version&nbsp;1 Core:
 * <p>
 * <div class=\'code\'>
<div>
<ul style=\'list-style-type: none\'>
<li>ampere</li>
<li>avogadro</li>
<li>becquerel</li>
<li>candela</li>
<li>coulomb</li>
<li>dimensionless</li>
</ul>
</div>
<div style=\'margin-left: 10em; margin-top: -8.5em\'>
<ul style=\'list-style-type: none\'>
<li>farad</li>
<li>gram</li>
<li>gray</li>
<li>henry</li>
<li>hertz</li>
<li>item</li>
</ul>
</div>
<div style=\'margin-left: 19em; margin-top: -8.5em\'>
<ul style=\'list-style-type: none\'>
<li>joule</li>
<li>katal</li>
<li>kelvin</li>
<li>kilogram</li>
<li>litre</li>
<li>lumen</li>
</ul>
</div>
<div style=\'margin-left: 28em; margin-top: -8.5em\'>
<ul style=\'list-style-type: none\'>
<li>lux</li>
<li>metre</li>
<li>mole</li>
<li>newton</li>
<li>ohm</li>
<li>pascal</li>
</ul>
</div>
<div style=\'margin-left: 37em; margin-top: -8.5em\'>
<ul style=\'list-style-type: none\'>
<li>radian</li>
<li>second</li>
<li>siemens</li>
<li>sievert</li>
<li>steradian</li>
<li>tesla</li>
</ul>
</div>
<div style=\'margin-left: 46em; margin-top: -8.5em\'>
<ul style=\'list-style-type: none\'>
<li>volt</li>
<li>watt</li>
<li>weber</li>
</ul>
</div>
</div>
<br style=\'clear: both\'>
<p style=\'padding-bottom: 1em\'>

 * <p>
 * A few small differences exist between the Level&nbsp;3 list of base
 * units and the list defined in other Level/Version combinations of SBML.
 * Specifically, Levels of SBML before Level&nbsp;3 do not define 
 * <code>avogadro</code>; conversely, Level&nbsp;2 Version&nbsp;1 defines <code>Celsius</code>,
 * and Level&nbsp;1 defines <code>celsius</code>, <code>meter</code>, and <code>liter</code>, none of
 * which are available in Level&nbsp;3.  In libSBML, each of the predefined
 * base unit names is represented by an enumeration value whose name begins with the characters
 * <code>UNIT_KIND_</code>, discussed in a separate section below.
 * <p>
 * The attribute named \'exponent\' on {@link Unit} represents an exponent on the
 * unit.  In SBML Level&nbsp;2, the attribute is optional and has a default
 * value of <code>1</code> (one); in SBML Level&nbsp;3, the attribute is mandatory
 * and there is no default value.  A {@link Unit} structure also has an attribute
 * called \'scale\'; its value must be an integer exponent for a power-of-ten
 * multiplier used to set the scale of the unit.  For example, a unit
 * having a \'kind\' value of <code>gram</code> and a \'scale\' value of <code>-3</code> signifies
 * 10<sup>&nbsp;&ndash;3</sup> &#215; gram, or milligrams.  In SBML
 * Level&nbsp;2, the attribute is optional and has a default value of <code>0</code>
 * (zero), because 10<sup> 0</sup> = 1; in SBML Level&nbsp;3, the attribute
 * is mandatory and has no default value.  Lastly, the attribute named
 * \'multiplier\' can be used to multiply the unit by a real-numbered factor;
 * this enables the definition of units that are not power-of-ten multiples
 * of SI units.  For instance, a multiplier of 0.3048 could be used to
 * define <code>foot</code> as a measure of length in terms of a <code>metre.</code>  The
 * \'multiplier\' attribute is optional in SBML Level&nbsp;2, where it has a
 * default value of <code>1</code> (one); in SBML Level&nbsp;3, the attribute is
 * mandatory and has not default value.
 * <p>
 * * <h3><a class=\'anchor\' name=\'UnitKind_t\'>%Unit identification codes</a></h3>
 * <p>
 * <p>
 * As discussed above, SBML defines a set of base units which serves as the
 * starting point for new unit definitions.  This set of base units
 * consists of the SI units and a small number of additional convenience
 * units.
 * <p>
 * In SBML Level&nbsp;2 Versions before
 * Version&nbsp;3, there existed an enumeration of units called 
 * <code>UnitKind.</code>  In Version&nbsp;3, this enumeration was removed and the
 * identifier class <code>UnitSId</code> redefined to include the previous 
 * <code>UnitKind</code> values as reserved symbols.  This change has no net effect on
 * permissible models, their representation or their syntax.  The purpose
 * of the change in the SBML specification was simply to clean up an
 * inconsistency about the contexts in which these values were usable.
 * However, libSBML maintains UnitKind in the form of of a set of static
 * integer constants whose names begin with the characters
 * <code>UNIT_KIND_</code>.  These constants are defined in the class
 * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.
 * <p>
 * <p>
 * As a consequence of the fact that libSBML supports models in all Levels
 * and Versions of SBML, libSBML\'s set of <code>UNIT_KIND_</code> values is a union
 * of all the possible base unit names defined in the different SBML
 * specifications.  However, not every base unit is allowed in every
 * Level+Version combination of SBML.  Note in particular the following
 * exceptions:
 * <ul>
 * <li> The alternate spelling <code>\'meter\'</code> is included in
 * addition to the official SI spelling <code>\'metre\'.</code>  This spelling is only
 * permitted in SBML Level&nbsp;1 models.
 * <p>
 * <li> The alternate spelling <code>\'liter\'</code> is included in addition to the
 * official SI spelling <code>\'litre\'.</code>  This spelling is only permitted in
 * SBML Level&nbsp;1 models.
 * <p>
 * <li> The unit <code>\'Celsius\'</code> is included because of its presence in
 * specifications of SBML prior to SBML Level&nbsp;2 Version&nbsp;3.
 * <p>
 * <li> The unit <code>avogadro</code> was introduced in SBML Level&nbsp;3, and
 * is only permitted for use in SBML Level&nbsp;3 models.
 * </ul>
 * <p>
 * The table below lists the unit
 * constants defined in libSBML, and their meanings. 
 * <p>
 * <center>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr>
     <th align=\'left\' width=\'200\'>Enumerator</th>
     <th align=\'left\'>Meaning</th>
 </tr>
<tr><td><code>UNIT_KIND_AMPERE</code></td><td>The ampere unit.</td></tr>
<tr><td><code>UNIT_KIND_AVOGADRO</code></td><td>The unit
<code>dimensionless</code> multiplied by the numerical value of Avogadro\'s
constant. (<span class=\'warning\'>Only usable in SBML Level&nbsp;3 models.</span>)</td></tr>
<tr><td><code>UNIT_KIND_BECQUEREL</code></td><td>The becquerel unit.</td></tr>
<tr><td><code>UNIT_KIND_CANDELA</code></td><td>The candela unit.</td></tr>
<tr><td><code>UNIT_KIND_CELSIUS</code></td><td>The Celsius unit. (<span
class=\'warning\'>Only usable in SBML Level&nbsp;1 and SBML Level&nbsp;2
Version&nbsp;1 models.</span>)</td></tr>
<tr><td><code>UNIT_KIND_COULOMB</code></td><td>The coulomb unit.</td></tr>
<tr><td><code>UNIT_KIND_DIMENSIONLESS</code></td><td>A pseudo-unit
indicating a dimensionless quantity.</td></tr>
<tr><td><code>UNIT_KIND_FARAD</code></td><td>The farad unit.</td></tr>
<tr><td><code>UNIT_KIND_GRAM</code></td><td>The gram unit.</td></tr>
<tr><td><code>UNIT_KIND_GRAY</code></td><td>The gray unit.</td></tr>
<tr><td><code>UNIT_KIND_HENRY</code></td><td>The henry unit.</td></tr>
<tr><td><code>UNIT_KIND_HERTZ</code></td><td>The hertz unit.</td></tr>
<tr><td><code>UNIT_KIND_ITEM</code></td><td>A pseudo-unit representing a
single \'thing\'.</td></tr>
<tr><td><code>UNIT_KIND_JOULE</code></td><td>The joule unit.</td></tr>
<tr><td><code>UNIT_KIND_KATAL</code></td><td>The katal unit.</td></tr>
<tr><td><code>UNIT_KIND_KELVIN</code></td><td>The kelvin unit.</td></tr>
<tr><td><code>UNIT_KIND_KILOGRAM</code></td><td>The kilogram unit.</td></tr>
<tr><td><code>UNIT_KIND_LITER</code></td><td>Alternate spelling of litre.</td></tr>
<tr><td><code>UNIT_KIND_LITRE</code></td><td>The litre unit.</td></tr>
<tr><td><code>UNIT_KIND_LUMEN</code></td><td>The lumen unit.</td></tr>
<tr><td><code>UNIT_KIND_LUX</code></td><td>The lux unit.</td></tr>
<tr><td><code>UNIT_KIND_METER</code></td><td>Alternate spelling of metre.</td></tr>
<tr><td><code>UNIT_KIND_METRE</code></td><td>The metre unit.</td></tr>
<tr><td><code>UNIT_KIND_MOLE</code></td><td>The mole unit.</td></tr>
<tr><td><code>UNIT_KIND_NEWTON</code></td><td>The newton unit.</td></tr>
<tr><td><code>UNIT_KIND_OHM</code></td><td>The ohm unit.</td></tr>
<tr><td><code>UNIT_KIND_PASCAL</code></td><td>The pascal unit.</td></tr>
<tr><td><code>UNIT_KIND_RADIAN</code></td><td>The radian unit.</td></tr>
<tr><td><code>UNIT_KIND_SECOND</code></td><td>The second unit.</td></tr>
<tr><td><code>UNIT_KIND_SIEMENS</code></td><td>The siemens unit.</td></tr>
<tr><td><code>UNIT_KIND_SIEVERT</code></td><td>The sievert unit.</td></tr>
<tr><td><code>UNIT_KIND_STERADIAN</code></td><td>The steradian unit.</td></tr>
<tr><td><code>UNIT_KIND_TESLA</code></td><td>The tesla unit.</td></tr>
<tr><td><code>UNIT_KIND_VOLT</code></td><td>The volt unit.</td></tr>
<tr><td><code>UNIT_KIND_WATT</code></td><td>The watt unit.</td></tr>
<tr><td><code>UNIT_KIND_WEBER</code></td><td>The weber unit.</td></tr>
<tr><td><code>UNIT_KIND_INVALID</code></td><td>Marker used by libSBML
to indicate an invalid or unset unit.</td></tr>
</table>
</center>

 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfUnits "
/** 
 * LibSBML implementation of SBML\'s ListOfUnits construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * {@link ListOfUnits} is entirely contained within {@link UnitDefinition}.
 */
"

%javamethodmodifiers Unit::Unit(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Unit} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Unit}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Unit}
   * <p>
   * @note Upon the addition of a {@link Unit} object to an {@link SBMLDocument}, the SBML
   * Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link Unit} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link Unit} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Unit::Unit(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Unit} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Unit} object to an {@link SBMLDocument}, the SBML
   * XML namespace of the document <em>overrides</em> the value used when
   * creating the {@link Unit} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a {@link Unit} is
   * an important aid to producing valid SBML.  Knowledge of the intented
   * SBML Level and Version determine whether it is valid to assign a
   * particular value to an attribute, or whether it is valid to add an
   * object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Unit::Unit(const Unit& orig) "
  /**
  * Copy constructor; creates a copy of this {@link Unit}.
  */
 public";


%javamethodmodifiers Unit::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Unit}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Unit} in the list
   * of units within which this {@link Unit} is embedded (i.e., in the {@link ListOfUnits}
   * located in the enclosing {@link UnitDefinition} instance).
   */
 public";


%javamethodmodifiers Unit::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Unit}.
   * <p>
   * @return a (deep) copy of this {@link Unit}.
   */
 public";


%javamethodmodifiers Unit::initDefaults "
  /**
   * Initializes the fields of this {@link Unit} object to \'typical\' default
   * values.
   * <p>
   * The SBML {@link Unit} component has slightly different aspects and default
   * attribute values in different SBML Levels and Versions.  This method
   * sets the values to certain common defaults, based mostly on what they
   * are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'exponent\' to <code>1</code>
   * <li> Sets attribute \'scale\' to <code>0</code>
   * <li> Sets attribute \'multiplier\' to <code>1.0</code>
   * </ul>
   * <p>
   * The \'kind\' attribute is left unchanged.
   */
 public";


%javamethodmodifiers Unit::getKind() const "
  /**
   * Returns the \'kind\' of {@link Unit} this is.
   * <p>
   * * @return the value of the \'kind\' attribute of this {@link Unit} as a
   * value from the set of constants whose names begin
   * with <code>UNIT_KIND_</code> defined in the class
   * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.
   * <p>
   */
 public";


%javamethodmodifiers Unit::getExponent() const "
  /**
   * Returns the value of the \'exponent\' attribute of this unit.
   * <p>
   * @return the \'exponent\' value of this {@link Unit}, as an integer.
   */
 public";


%javamethodmodifiers Unit::getExponentAsDouble() const "
  /**
   * Returns the value of the \'exponent\' attribute of this unit.
   * <p>
   * @return the \'exponent\' value of this {@link Unit}, as a double.
   */
 public";


%javamethodmodifiers Unit::getScale() const "
  /**
   * Returns the value of the \'scale\' attribute of this unit.
   * <p>
   * @return the \'scale\' value of this {@link Unit}, as an integer.
   */
 public";


%javamethodmodifiers Unit::getMultiplier() const "
  /**
   * Returns the value of the \'multiplier\' attribute of this {@link Unit}.
   * <p>
   * @return the \'multiplier\' value of this {@link Unit}, as a double.
   */
 public";


%javamethodmodifiers Unit::getOffset() const "
  /**
   * Returns the value of the \'offset\' attribute of this {@link Unit}.
   * <p>
   * @warning The \'offset\' attribute is only available in SBML Level&nbsp;2
   * Version&nbsp;1.  This attribute is not present in SBML Level&nbsp;2
   * Version&nbsp;2 or above.  When producing SBML models using these later
   * specifications, modelers and software tools need to account for units
   * with offsets explicitly.  The SBML specification document offers a
   * number of suggestions for how to achieve this.  LibSBML methods such
   * as this one related to \'offset\' are retained for compatibility with
   * earlier versions of SBML Level&nbsp;2, but their use is strongly
   * discouraged.
   * <p>
   * @return the \'offset\' value of this {@link Unit}, as a double.
   */
 public";


%javamethodmodifiers Unit::isAmpere() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>ampere.</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>ampere</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isAvogadro() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>avogadro.</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>avogadro</code>, <code>false</code>
   * otherwise.
   * <p>
   * @note The unit <code>avogadro</code> was introduced in SBML Level&nbsp;3, and
   * is only permitted for use in SBML Level&nbsp;3 models.
   */
 public";


%javamethodmodifiers Unit::isBecquerel() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>becquerel</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>becquerel</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isCandela() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>candela</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>candela</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isCelsius() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>Celsius</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>Celsius</code>, <code>false</code>
   * otherwise. 
   * <p>
   * @warning The predefined unit <code>Celsius</code> was removed from the list of
   * predefined units in SBML Level&nbsp;2 Version&nbsp;2 at the same time
   * that the \'offset\' attribute was removed from {@link Unit} definitions.
   * LibSBML methods such as this one related to <code>Celsius</code> are retained in
   * order to support SBML Level&nbsp;2 Version&nbsp;1, but their use is
   * strongly discouraged.
   */
 public";


%javamethodmodifiers Unit::isCoulomb() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>coulomb</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>coulomb</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isDimensionless() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind 
   * <code>dimensionless.</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>dimensionless</code>, <code>false</code>
   * <p>
   * otherwise.
   */
 public";


%javamethodmodifiers Unit::isFarad() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>farad</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>farad</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isGram() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>gram</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>gram</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isGray() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>gray</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>gray</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isHenry() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>henry</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>henry</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isHertz() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>hertz</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>hertz</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isItem() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>item</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>item</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isJoule() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>joule</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>joule</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isKatal() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>katal</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>katal</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isKelvin() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>kelvin</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>kelvin</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isKilogram() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>kilogram</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>kilogram</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isLitre() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>litre</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>litre</code> or \'liter\', 
   * <code>false</code> 
   * otherwise.
   */
 public";


%javamethodmodifiers Unit::isLumen() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>lumen</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>lumen</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isLux() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>lux</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>lux</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isMetre() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>metre</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>metre</code> or \'meter\', 
   * <code>false</code> 
   * otherwise.
   */
 public";


%javamethodmodifiers Unit::isMole() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>mole</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>mole</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isNewton() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>newton</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>newton</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isOhm() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>ohm</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>ohm</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isPascal() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>pascal</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>pascal</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isRadian() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>radian</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>radian</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isSecond() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>second</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>second</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isSiemens() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>siemens</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>siemens</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isSievert() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>sievert</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>sievert</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isSteradian() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>steradian</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>steradian</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isTesla() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>tesla</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>tesla</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isVolt() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>volt</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>volt</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isWatt() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>watt</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>watt</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isWeber() const "
  /**
   * Predicate for testing whether this {@link Unit} is of the kind <code>weber</code>
   * <p>
   * @return <code>true</code> if the kind of this {@link Unit} is <code>weber</code>, <code>false</code>
   * otherwise. 
   */
 public";


%javamethodmodifiers Unit::isSetKind() const "
  /**
   * Predicate to test whether the \'kind\' attribute of this {@link Unit} is set.
   * <p>
   * @return <code>true</code> if the \'kind\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Unit::isSetExponent() const "
  /**
   * Predicate to test whether the \'exponent\' attribute of this {@link Unit} 
   * is set.
   * <p>
   * @return <code>true</code> if the \'exponent\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Unit::isSetScale() const "
  /**
   * Predicate to test whether the \'scale\' attribute of this {@link Unit} 
   * is set.
   * <p>
   * @return <code>true</code> if the \'scale\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Unit::isSetMultiplier() const "
  /**
   * Predicate to test whether the \'multiplier\' attribute of this {@link Unit} 
   * is set.
   * <p>
   * @return <code>true</code> if the \'multiplier\' attribute of this {@link Unit} is set, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Unit::setKind(UnitKind_t kind) "
  /**
   * Sets the \'kind\' attribute value of this {@link Unit}.
   * <p>
   * * @param kind a unit identifier chosen from the set of constants whose
   * names begin with <code>UNIT_KIND_</code> in <code><a
   * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.
   * <p>
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Unit::setExponent(int value) "
  /**
   * Sets the \'exponent\' attribute value of this {@link Unit}.
   * <p>
   * @param value the integer to which the attribute \'exponent\' should be set
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Unit::setExponent(double value) "
  /**
   * Sets the \'exponent\' attribute value of this {@link Unit}.
   * <p>
   * @param value the double to which the attribute \'exponent\' should be set
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers Unit::setScale(int value) "
  /**
   * Sets the \'scale\' attribute value of this {@link Unit}.
   * <p>
   * @param value the integer to which the attribute \'scale\' should be set
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers Unit::setMultiplier(double value) "
  /**
   * Sets the \'multipler\' attribute value of this {@link Unit}.
   * <p>
   * @param value the floating-point value to which the attribute
   * \'multiplier\' should be set
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Unit::setOffset(double value) "
  /**
   * Sets the \'offset\' attribute value of this {@link Unit}.
   * <p>
   * @param value the float-point value to which the attribute \'offset\'
   * should set
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @warning The \'offset\' attribute is only available in SBML Level&nbsp;2
   * Version&nbsp;1.  This attribute is not present in SBML Level&nbsp;2
   * Version&nbsp;2 or above.  When producing SBML models using these later
   * specifications, modelers and software tools need to account for units
   * with offsets explicitly.  The SBML specification document offers a
   * number of suggestions for how to achieve this.  LibSBML methods such
   * as this one related to \'offset\' are retained for compatibility with
   * earlier versions of SBML Level&nbsp;2, but their use is strongly
   * discouraged.
   */
 public";


%javamethodmodifiers Unit::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Unit::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Unit}, is
   * always <code>\'unit\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'unit\'.</code> 
   */
 public";


%javamethodmodifiers Unit::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isBuiltIn(const std::string& name, unsigned int level) "
  /**
   * Predicate to test whether a given string is the name of a
   * predefined SBML unit.
   * <p>
   * @param name a string to be tested against the predefined unit names
   * <p>
   * @param level the Level of SBML for which the determination should be
   * made.  This is necessary because there are a few small differences
   * in allowed units between SBML Level&nbsp;1 and Level&nbsp;2.
   * <p>
   * @return <code>true</code> if <code>name</code> is one of the five SBML predefined unit
   * identifiers (<code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
   * <code>\'time\'</code>), <code>false</code> otherwise.
   * <p>
   * @note The predefined unit identifiers <code>\'length\'</code> and <code>\'area\'</code> were
   * added in Level&nbsp;2 Version&nbsp;1
   */
 public";


%javamethodmodifiers Unit::isUnitKind(const std::string& name, unsigned int level, unsigned int version) "
  /**
   * Predicate to test whether a given string is the name of a valid
   * base unit in SBML (such as <code>\'gram\'</code> or <code>\'mole\'</code>).
   * <p>
   * This method exists because prior to SBML Level&nbsp;2 Version&nbsp;3,
   * an enumeration called <code>UnitKind</code> was defined by SBML.  This enumeration
   * was removed in SBML Level&nbsp;2 Version&nbsp;3 and its values were
   * folded into the space of values of a type called <code>UnitSId.</code>  This method
   * therefore has less significance in SBML Level&nbsp;2 Version&nbsp;3
   * and Level&nbsp;2 Version&nbsp;4, but remains for backward
   * compatibility and support for reading models in older Versions of
   * Level&nbsp;2.
   * <p>
   * @param name a string to be tested
   * <p>
   * @param level a long integer representing the SBML specification
   * Level 
   * <p>
   * @param version a long integer representing the SBML specification
   * Version
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   * <p>
   * @note The allowed unit names differ between SBML Levels&nbsp;1
   * and&nbsp;2 and again slightly between Level&nbsp;2 Versions&nbsp;1
   * and&nbsp;2.
   */
 public";


%javamethodmodifiers Unit::areIdentical(Unit * unit1, Unit * unit2) "
  /** 
  * Predicate returning <code>true</code> if two
  * {@link Unit} objects are identical.
  * <p>
  * Two {@link Unit} objects are considered to be <em>identical</em> if they match in
  * all attributes.  (Contrast this to the method areEquivalent(Unit u1, Unit u2), which
  * compares {@link Unit} objects only with respect to certain attributes.)
  * <p>
  * @param unit1 the first {@link Unit} object to compare
  * @param unit2 the second {@link Unit} object to compare
  * <p>
  * @return <code>true</code> if all the attributes of unit1 are identical
  * to the attributes of unit2, <code>false</code> otherwise.
  * <p>
  * @see #areEquivalent(Unit u1, Unit u2)
  */
 public";


%javamethodmodifiers Unit::areEquivalent(Unit * unit1, Unit * unit2) "
  /** 
  * Predicate returning <code>true</code> if 
  * {@link Unit} objects are equivalent.
  * <p>
  * Two {@link Unit} objects are considered to be <em>equivalent</em> either if (1) both
  * have a \'kind\' attribute value of <code>dimensionless</code>, or (2) their \'kind\',
  * \'exponent\' and (for SBML Level&nbsp;2 Version&nbsp;1) \'offset\'
  * attribute values are equal. (Contrast this to the method
  * areIdentical(Unit u1, Unit u2), which compares {@link Unit} objects with respect to all
  * attributes, not just the \'kind\' and \'exponent\'.)
  * <p>
  * @param unit1 the first {@link Unit} object to compare
  * @param unit2 the second {@link Unit} object to compare
  * <p>
  * @return <code>true</code> if the \'kind\' and \'exponent\' attributes of unit1 are
  * identical to the kind and exponent attributes of unit2, <code>false</code>
  * otherwise.
  * <p>
  * @see #areIdentical(Unit u1, Unit u2)
  */
 public";


%javamethodmodifiers Unit::removeScale(Unit * unit) "
  /** 
  * Manipulates the attributes of the {@link Unit} to express the unit with the 
  * value of the scale attribute reduced to zero.
  * <p>
  * For example, 1 millimetre can be expressed as a {@link Unit} with kind=
  * <code>\'metre\'</code> multiplier=<code>\'1\'</code> scale=<code>\'-3\'</code> exponent=<code>\'1\'.</code> It can also be
  * expressed as a {@link Unit} with kind=<code>\'metre\'</code>
  * multiplier=<code>\'0.001\'</code> scale=<code>\'0\'</code> exponent=<code>\'1\'.</code>
  * <p>
  * @param unit the {@link Unit} object to manipulate.
  * <p>
  * @return integer value indicating success/failure of the function.  The
  * possible values returned by this function are:
  * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
  * <p>
  * @see #convertToSI(Unit u)
  * @see #merge(Unit u1, Unit u2)
  */
 public";


%javamethodmodifiers Unit::merge(Unit * unit1, Unit * unit2) "
  /** 
  * Merges two {@link Unit} objects with the same \'kind\' attribute value into a
  * single {@link Unit}.
  * <p>
  * For example, the following,
  * <div class=\'fragment\'><pre>
  * &lt;unit kind=\'metre\' exponent=\'2\'/&gt;
  * &lt;unit kind=\'metre\' exponent=\'1\'/&gt;</pre></div>
  * would be merged to become
  * <div class=\'fragment\'><pre>
  * &lt;unit kind=\'metre\' exponent=\'3\'/&gt;</pre></div>
  * <p>
  * @param unit1 the first {@link Unit} object; the result of the operation is
  * left as a new version of this unit, modified in-place.
  * <p>
  * @param unit2 the second {@link Unit} object to merge with the first
  * <p>
  * @see #convertToSI(Unit u)
  * @see #removeScale(Unit u)
  */
 public";


%javamethodmodifiers Unit::convertToSI(const Unit * unit) "
  /**
  * Returns a {@link UnitDefinition} object containing the given <code>unit</code> converted
  * to the appropriate SI unit.
  * <p>
  * This method exists because some units can be expressed in terms of
  * others when the same physical dimension is involved.  For example, one
  * hertz is identical to 1&nbsp;sec<sup>-1</sup>, one litre is equivalent
  * to 1 cubic decametre, and so on.
  * <p>
  * @param unit the {@link Unit} object to convert to SI
  * <p>
  * @return a {@link UnitDefinition} object containing the SI unit.
  * <p>
  * @see #merge(Unit u1, Unit u2)
  */
 public";


%javamethodmodifiers Unit::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Unit} object are:
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Unit::setExponentUnitChecking(double value) "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Unit} object are:
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::getExponentUnitChecking "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Unit} object are:
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::getExponentUnitChecking() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Unit} object are:
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isUnitChecking "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Unit} object are:
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isUnitChecking() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Unit} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Unit} object are:
   * <li> \'kind\'
   * <li> \'exponent\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'multiplier\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <li> \'scale\' (required in SBML Level&nbsp;3; optional in Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isL1UnitKind(const std::string& name) "
  /**
   * Predicate to test whether a given string is the name of a valid
   * base unit in SBML Level 1 (such as <code>\'gram\'</code> or <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isL2V1UnitKind(const std::string& name) "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;2 Version&nbsp;1 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isL2UnitKind(const std::string& name) "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;2 Version&nbsp;2, 3 or 4 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isL3UnitKind(const std::string& name) "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;3 Version&nbsp;1 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isExplicitlySetExponent() const "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;3 Version&nbsp;1 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isExplicitlySetMultiplier() const "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;3 Version&nbsp;1 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isExplicitlySetScale() const "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;3 Version&nbsp;1 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Unit::isExplicitlySetOffset() const "
  /**
   * Predicate to test whether a given string is the name of a valid base
   * unit in SBML Level&nbsp;3 Version&nbsp;1 (such as <code>\'gram\'</code> or 
   * <code>\'mole\'</code>)
   * <p>
   * @param name a string to be tested
   * <p>
   * @return <code>true</code> if name is a valid SBML UnitKind, <code>false</code> otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfUnits::ListOfUnits(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfUnits} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfUnits::ListOfUnits(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfUnits} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfUnits} object to be created.
   */
 public";


%javamethodmodifiers ListOfUnits::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfUnits}.
   * <p>
   * @return a (deep) copy of this {@link ListOfUnits}.
   */
 public";


%javamethodmodifiers ListOfUnits::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfUnits::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Unit} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfUnits::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfUnits}, the XML element name is <code>\'listOfUnits\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfUnits\'.</code>
   */
 public";


%javamethodmodifiers ListOfUnits::get(unsigned int n) "
  /**
   * Get a {@link Unit} from the {@link ListOfUnits}.
   * <p>
   * @param n the index number of the {@link Unit} to get.
   * <p>
   * @return the nth {@link Unit} in this {@link ListOfUnits}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnits::get "
  /**
   * Get a {@link Unit} from the {@link ListOfUnits}.
   * <p>
   * @param n the index number of the {@link Unit} to get.
   * <p>
   * @return the nth {@link Unit} in this {@link ListOfUnits}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnits::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfUnits} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnits::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfUnits::createObject(XMLInputStream& stream) "
  /**
   * Create a {@link ListOfUnits} object corresponding to the next token
   * in the XML input stream.
   * <p>
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream, or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) UnitDefinition "
/** 
 * LibSBML implementation of SBML\'s UnitDefinition construct.
 * <p>
 * Units of measurement may be supplied in a number of contexts in an SBML
 * model.  The SBML unit definition facility uses two classes of objects,
 * {@link UnitDefinition} and {@link Unit}.  The approach to defining units in SBML is
 * compositional; for example, <em>meter second<sup> &ndash;2</sup></em> is
 * constructed by combining a {@link Unit} object representing <em>meter</em> with
 * another {@link Unit} object representing <em>second<sup> &ndash;2</sup></em>.
 * The combination is wrapped inside a {@link UnitDefinition}, which provides for
 * assigning an identifier and optional name to the combination.  The
 * identifier can then be referenced from elsewhere in a model.  Thus, the
 * {@link UnitDefinition} class is the container, and {@link Unit} instances are placed
 * inside {@link UnitDefinition} instances.
 * <p>
 * Two points are worth discussing in the context of SBML units.  First,
 * unit declarations in SBML models are <em>optional</em>.  The consequence of
 * this is that a model must be numerically self-consistent independently
 * of unit declarations, for the benefit of software tools that cannot
 * interpret or manipulate units.  {@link Unit} declarations in SBML are thus more
 * akin to a type of annotation; they can indicate intentions, and can be
 * used by model readers for checking the consistency of the model,
 * labeling simulation output, etc., but any transformations of values
 * implied by different units must be incorporated <em>explicitly</em> into a
 * model.
 * <p>
 * Second, the vast majority of situations that require new SBML unit
 * definitions involve simple multiplicative combinations of base units and
 * factors.  An example is <em>moles per litre per second</em>.  What
 * distinguishes these sorts of unit definitions from more complex ones is
 * that they may be expressed without the use of an additive offset from a
 * zero point.  The use of offsets complicates all unit definition systems,
 * yet in the domain of SBML, the real-life cases requiring offsets are few
 * (and in fact, to the best of our knowledge, only involve temperature).
 * Consequently, the SBML unit system has been consciously designed to
 * simplify implementation of unit support for the most common cases in
 * systems biology.  The cost of this simplification is to require units
 * with offsets to be handled explicitly by the modeler.
 * <p>
 * <h2>Summary of the {@link UnitDefinition} construct</h2>
 * <p>
 * {@link UnitDefinition} has two attributes and one subelement.  The two
 * attributes are \'id\' and \'name\', and the subelement is {@link ListOfUnits}.
 * <p>
 * The required attribute \'id\' and optional attribute \'name\' are both
 * strings.  The \'id\' attribute is used to give the defined unit a unique
 * identifier by which other parts of an SBML model definition can refer to
 * it.  The \'name\' attribute is intended to be used for giving the unit
 * definition an optional human-readable name.  Please see the <a
 * href=\'#unitdef-id\'>next section</a> for information about the values
 * permitted for \'id\'.
 * <p>
 * A {@link UnitDefinition} must contain exactly one {@link ListOfUnits}, and this list
 * must contain one or more {@link Unit} definitions; see the definitions of these
 * other object classes for more information about them.  The following
 * example illustrates a complete unit definition (when written in XML)
 * when they all the pieces are combined together.  This defines \'mmls\'
 * to be millimoles per litre per second.
 * <div class=\'fragment\'><pre>
 * &lt;listOfUnitDefinitions&gt;
 *     &lt;unitDefinition id=\'mmls\'&gt;
 *         &lt;listOfUnits&gt;
 *             &lt;unit kind=\'mole\'   scale=\'-3\'/&gt;
 *             &lt;unit kind=\'litre\'  exponent=\'-1\'/&gt;
 *             &lt;unit kind=\'second\' exponent=\'-1\'/&gt;
 *         &lt;/listOfUnits&gt;
 *     &lt;/unitDefinition&gt;
 * &lt;/listOfUnitDefinitions&gt;</pre></div>
 * <p>
 * <h2>Special considerations for {@link Unit} object identifiers</h2>
 * <p>
 * The attribute \'id\' in {@link UnitDefinition} cannot be given simply any value,
 * and the precise details of the values permitted differ slightly between
 * Levels of SBML:
 * <ul>
 * <p>
 * <li> The \'id\' of a {@link UnitDefinition} must <em>not</em> contain a value from the
 * list of SBML\'s predefined base unit names (i.e., the strings <code>gram</code>, 
 * <code>litre</code>, etc.).  In SBML Level&nbsp;3, this list consists of the
 * following:
 * <p>
 * <div class=\'code\'>
<div>
<ul style=\'list-style-type: none\'>
<li>ampere</li>
<li>avogadro</li>
<li>becquerel</li>
<li>candela</li>
<li>coulomb</li>
<li>dimensionless</li>
</ul>
</div>
<div style=\'margin-left: 10em; margin-top: -7.5em\'>
<ul style=\'list-style-type: none\'>
<li>farad</li>
<li>gram</li>
<li>gray</li>
<li>henry</li>
<li>hertz</li>
<li>item</li>
</ul>
</div>
<div style=\'margin-left: 19em; margin-top: -7.5em\'>
<ul style=\'list-style-type: none\'>
<li>joule</li>
<li>katal</li>
<li>kelvin</li>
<li>kilogram</li>
<li>litre</li>
<li>lumen</li>
</ul>
</div>
<div style=\'margin-left: 28em; margin-top: -7.5em\'>
<ul style=\'list-style-type: none\'>
<li>lux</li>
<li>metre</li>
<li>mole</li>
<li>newton</li>
<li>ohm</li>
<li>pascal</li>
</ul>
</div>
<div style=\'margin-left: 37em; margin-top: -7.5em\'>
<ul style=\'list-style-type: none\'>
<li>radian</li>
<li>second</li>
<li>siemens</li>
<li>sievert</li>
<li>steradian</li>
<li>tesla</li>
</ul>
</div>
<div style=\'margin-left: 46em; margin-top: -7.5em\'>
<ul style=\'list-style-type: none\'>
<li>volt</li>
<li>watt</li>
<li>weber</li>
</ul>
</div>
</div>
<br style=\'clear: both\'>
<p style=\'padding-bottom: 1.75em\'>

 * <p>
 * This list of predefined base units is nearly identical in SBML
 * Level&nbsp;2 Version&nbsp;4, the exception being that Level&nbsp;2 does
 * not define <code>avogadro.</code>  SBML Level&nbsp;2 Version&nbsp;1 (and <em>only</em>
 * this Level+Version combination) provides an additional predefined unit
 * name, <code>Celsius</code>, not available in Level&nbsp;3.  Finally, SBML
 * Level&nbsp;1 Versions&nbsp;2&ndash;3 provide two more additional
 * predefined unit names, <code>meter</code> and <code>liter.</code>  This is explained in
 * somewhat greater detail in the description of the {@link Unit} class.
 * <p>
 * <li> In SBML Level&nbsp;2 (all Versions), there is an additional set of
 * reserved identifiers: <code>substance</code>, <code>volume</code>, <code>area</code>, <code>length</code>, and
 * <code>time.</code>  Using one of these values for the attribute \'id\' of a
 * {@link UnitDefinition} has the effect of redefining the model-wide default units
 * for the corresponding quantities.  The list of special unit names in
 * SBML Level&nbsp;2 is given in the table below:
 * <p>
 *   <center>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr>
     <th align=\'left\'>Identifier</th>
     <th align=\'left\'>Possible scalable units</th>
     <th align=\'left\'>Default units</th>
 </tr>
<tr><td><code>substance</code></td><td>mole, item, gram, kilogram, dimensionless</td><td>mole</td></tr>
<tr><td><code>volume</code></td><td>litre, cubic metre, dimensionless</td><td>litre</td></tr>
<tr><td><code>area</code></td><td>square metre, dimensionless</td><td>square metre</td></tr>
<tr><td><code>length</code></td><td>metre, dimensionless</td><td>metre</td></tr>
<tr><td><code>time</code></td><td>second, dimensionless</td><td>second</td></tr>
</table>
</center>

 * <p>
 * Also, SBML Level&nbsp;2 imposes two limitations on redefining the
 * predefined unit <code>substance</code>, <code>volume</code>, <code>area</code>, <code>length</code>, and 
 * <code>time:</code> (1) The {@link UnitDefinition} of a predefined SBML unit can only contain
 * a single {@link Unit} object within it.  (2) The value of the \'kind\' attribute
 * in a {@link Unit} instance must be drawn from one of the values in the second
 * column of the table above.
 * <p>
 * The special unit names <code>substance</code>, <code>volume</code>, <code>area</code>, <code>length</code>, and
 * <code>time</code> are not defined by SBML Level&nbsp;3, which uses a different
 * approach to setting model-wide inherited units.
 * <p>
 * </ul>
 * <p>
 * <p>
 * <h2>Further comments about SBML\'s unit definition system</h2>
 * <p>
 * The vast majority of modeling situations requiring new SBML unit
 * definitions involve simple multiplicative combinations of base units and
 * factors.  An example of this might be <em>moles per litre per
 * second</em>.  What distinguishes these sorts of simpler unit definitions
 * from more complex ones is that they may be expressed without the use of
 * an additive offset from a zero point.  The use of offsets complicates
 * all unit definition systems, yet in the domain of SBML the real-life
 * cases requiring offsets are few (and in fact, to the best of our
 * knowledge, only involve temperature).  Consequently, the SBML unit
 * system has been consciously designed in a way that attempts to simplify
 * implementation of unit support for the most common cases in systems
 * biology.
 * <p>
 * As of SBML Level&nbsp;2 Version&nbsp;2, {@link Unit} no longer has the
 * attribute called \'offset\' introduced in SBML Level&nbsp;2
 * Version&nbsp;1.  It turned out that the general case involving units
 * with offsets was incorrectly defined, and few (if any) developers even
 * attempted to support offset-based units in their software.  In the
 * development of Level&nbsp;2 Version&nbsp;2, a consensus among SBML
 * developers emerged that a fully generalized unit scheme is <em>so</em>
 * confusing and complicated that it actually <em>impedes</em> interoperability.
 * SBML Level&nbsp;2 Version&nbsp;2, Version&nbsp;3 and Version&nbsp;4 acknowledge this
 * reality by reducing and simplifying the unit system, specifically by
 * removing the \'offset\' attribute on {@link Unit} and <code>Celsius</code> as a pre-defined
 * unit.
 * <p>
 * The following guidelines suggest methods for handling units that do
 * require the use of zero offsets for their definitions:
 * <ul>
 * <li> <em>Handling Celsius</em>.  A model in which certain quantities are
 *   temperatures measured in degrees Celsius can be converted
 *   straightforwardly to a model in which those temperatures are in
 *   kelvin.  A software tool could do this by performing a straightforward
 *   substitution using the following relationship: <em>T<sub> kelvin</sub> =
 *   T<sub>Celsius</sub> + 273.15</em>.  In every mathematical formula of the
 *   model where a quantity (call it <em>x</em>) in degrees Celsius appears,
 *   replace <em>x</em> with <em>x<sub>k</sub>+ 273.15</em>, where
 *   <em>x<sub>k</sub></em> is now in kelvin.  An alternative approach would 
 *   be to use a {@link FunctionDefinition} object to define a function encapsulating this
 *   relationship above and then using that in the rest of the model as
 *   needed.  Since Celsius is a commonly-used unit, software tools could
 *   help users by providing users with the ability to express temperatures
 *   in Celsius in the tools\' interfaces, and making substitutions
 *   automatically when writing out the SBML.
 * <p>
 * <li> <em>Other units requiring offsets</em>.  One approach to handling
 *   other kinds of units is to use a {@link FunctionDefinition} to define a function
 *   encapsulating the necessary mathematical relationship, then
 *   substituting a call to this function wherever the original quantity
 *   appeared in the model.  For example, here is a possible definition for
 *   converting Fahrenheit to Celsius degrees:
 *   <div class=\'fragment\'><pre>
 * &lt;functionDefinition id=\'Fahrenheit_to_kelvin\'&gt;
 *     &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
 *         &lt;lambda&gt;
 *             &lt;bvar&gt;&lt;ci&gt; temp_in_fahrenheit &lt;/ci&gt;&lt;/bvar&gt;
 *             &lt;apply&gt;
 *                 &lt;divide/&gt;
 *                 &lt;apply&gt;
 *                     &lt;plus/&gt;
 *                     &lt;ci&gt; temp_in_fahrenheit &lt;/ci&gt;
 *                     &lt;cn&gt; 459.67 &lt;/cn&gt;
 *                 &lt;/apply&gt;
 *                 &lt;cn&gt; 1.8 &lt;/cn&gt;
 *             &lt;/apply&gt;
 *         &lt;/lambda&gt;
 *     &lt;/math&gt;
 * &lt;/functionDefinition&gt;</pre></div>
 * <p>
 * <li> An alternative approach not requiring the use of function definitions
 *   is to use an {@link AssignmentRule} for each variable in Fahrenheit units.
 *   The {@link AssignmentRule} could compute the conversion from Fahrenheit to
 *   (say) kelvin, assign its value to a variable (in Kelvin units), and
 *   then that variable could be used elsewhere in the model.
 * <p>
 * <li> Still another approach is to rewrite the mathematical formulas of a
 *   model to directly incorporate the conversion formula wherever the
 *   original quantity appeared.
 * </ul>
 * <p>
 * Please consult the SBML specifications for more information about this
 * and other issues involving units.
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfUnitDefinitions "
/** 
 * LibSBML implementation of SBML\'s ListOfUnitDefinitions construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers UnitDefinition::UnitDefinition(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link UnitDefinition} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link UnitDefinition}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link UnitDefinition}
   * <p>
   * @note Upon the addition of a {@link UnitDefinition} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addUnitDefinition(UnitDefinition ud)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link UnitDefinition} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link UnitDefinition} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers UnitDefinition::UnitDefinition(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link UnitDefinition} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link UnitDefinition} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addUnitDefinition(UnitDefinition ud)}), the SBML XML namespace of
   * the document <em>overrides</em> the value used when creating the
   * {@link UnitDefinition} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a
   * {@link UnitDefinition} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers UnitDefinition::UnitDefinition(const UnitDefinition& orig) "
  /**
  * Copy constructor; creates a copy of this {@link UnitDefinition}.
  */
 public";


%javamethodmodifiers UnitDefinition::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link UnitDefinition}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link UnitDefinition} in the
   * list of units within which this {@link UnitDefinition} is embedded (i.e., in
   * the {@link ListOfUnitDefinitions} located in the enclosing {@link Model} instance).
   */
 public";


%javamethodmodifiers UnitDefinition::clone() const "
  /**
   * Creates and returns a deep copy of this {@link UnitDefinition}.
   * <p>
   * @return a (deep) copy of this {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link UnitDefinition}.
   * <p>
   * @return the id of this {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link UnitDefinition}.
   * <p>
   * @return the name of this {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link UnitDefinition}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link UnitDefinition} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link UnitDefinition}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link UnitDefinition} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link UnitDefinition}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link UnitDefinition}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers UnitDefinition::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link UnitDefinition}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link UnitDefinition}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers UnitDefinition::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link UnitDefinition}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfArea() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'area\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>area</code>, meaning square metres with only abritrary variations
   * in scale or multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfLength() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'length\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>length</code>, meaning metres with only abritrary variations in scale
   * or multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfSubstance() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'substance\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>substance</code>, meaning moles or items (and grams or kilograms from
   * SBML Level&nbsp;2 Version&nbsp;2 onwards) with only abritrary variations
   * in scale or multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfTime() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'time\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>time</code>, meaning seconds with only abritrary variations in scale or
   * multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfVolume() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'volume\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>volume</code>, meaning litre or cubic metre with only abritrary
   * variations in scale or multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfDimensionless() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the unit <code>\'dimensionless\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of 
   * <code>dimensionless</code>, meaning dimensionless with only abritrary variations in
   * scale or multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfMass() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit identifier <code>\'mass\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of mass units,
   * meaning gram or kilogram with only abritrary variations in scale or
   * multiplier values; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::isVariantOfSubstancePerTime() const "
  /**
   * Convenience function for testing if a given unit definition is a
   * variant of the predefined unit <code>\'substance\'</code> divided by the predefined
   * unit <code>\'time\'.</code>
   * <p>
   * @return <code>true</code> if this {@link UnitDefinition} is a variant of the predefined
   * unit <code>substance</code> per predefined unit <code>time</code>, meaning it contains two
   * units one of which is a variant of substance and the other is a
   * variant of time which an exponent of -1; <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers UnitDefinition::addUnit(const Unit* u) "
  /**
   * Adds a copy of the given {@link Unit} to this {@link UnitDefinition}.
   * <p>
   * @param u the {@link Unit} instance to add to this {@link UnitDefinition}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link UnitDefinition}.  Changes made to the original
   * object instance (such as resetting attribute values) will <em>not
   * affect the instance in the {@link UnitDefinition}</em>.  In addition, the
   * caller should make sure to free the original object if it is no longer
   * being used, or else a memory leak will result.  Please see
   * {@link UnitDefinition#createUnit()} for a method that does not lead to these
   * issues.
   * <p>
   * @see #createUnit()
   */
 public";


%javamethodmodifiers UnitDefinition::createUnit "
  /**
   * Creates a new and empty {@link Unit}, adds it to this {@link UnitDefinition}\'s list of
   * units, and returns it.
   * <p>
   * @return a newly constructed (and empty) {@link Unit} instance.
   * <p>
   * @note It is worth emphasizing that the attribute \'kind\' value of a
   * {@link Unit} is a required attribute for a valid {@link Unit} definition.  The
   * createUnit() method does not assign a valid kind to the constructed
   * unit (instead, it sets the \'kind\' to {@link  libsbmlConstants#UNIT_KIND_INVALID UNIT_KIND_INVALID}).
   * Callers are cautioned to set the newly-constructed {@link Unit}\'s kind using
   * {@link Unit#setKind(int kind)} soon after calling this method.
   * <p>
   * @see #addUnit(Unit u)
   */
 public";


%javamethodmodifiers UnitDefinition::getListOfUnits() const "
  /**
   * Returns the list of Units for this {@link UnitDefinition} instance.
   * @return the {@link ListOfUnits} value for this {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::getListOfUnits "
  /**
   * Returns the list of Units for this {@link UnitDefinition} instance.
   * @return the {@link ListOfUnits} value for this {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::getUnit(unsigned int n) "
  /**
   * Returns a specific {@link Unit} instance belonging to this {@link UnitDefinition}.
   * <p>
   * @param n an integer, the index of the {@link Unit} to be returned.
   * <p>
   * @return the nth {@link Unit} of this {@link UnitDefinition}.
   * <p>
   * @see #getNumUnits()
   */
 public";


%javamethodmodifiers UnitDefinition::getUnit "
  /**
   * Returns a specific {@link Unit} instance belonging to this {@link UnitDefinition}.
   * <p>
   * @param n an integer, the index of the {@link Unit} to be returned.
   * <p>
   * @return the nth {@link Unit} of this {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::getNumUnits() const "
  /**
   * Returns the number of {@link Unit} objects contained within this
   * {@link UnitDefinition}.
   * <p>
   * @return an integer representing the number of Units in this
   * {@link UnitDefinition}.
   */
 public";


%javamethodmodifiers UnitDefinition::removeUnit(unsigned int n) "
  /**
   * Removes the nth {@link Unit} object from this {@link UnitDefinition} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Unit} object to remove
   * <p>
   * @return the {@link Unit} object removed, or <code>null</code> if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers UnitDefinition::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   * <p>
   * @param d the {@link SBMLDocument} to use
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::getTypeCode() const "
  /**
   * Returns the libSBML type code for this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers UnitDefinition::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link UnitDefinition},
   * is always <code>\'unitDefinition\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'unitDefinition\'.</code>
   */
 public";


%javamethodmodifiers UnitDefinition::simplify(UnitDefinition * ud) "
  /** 
   * Simplifies the {@link UnitDefinition} such that any given kind of {@link Unit} object
   * occurs only once in the {@link ListOfUnits}.
   * <p>
   * For example, the following definition,
   * <div class=\'fragment\'><pre>
   * &lt;unitDefinition&gt;
   *  &lt;listOfUnits&gt;
   *    &lt;unit kind=\'metre\' exponent=\'1\'/&gt;
   *    &lt;unit kind=\'metre\' exponent=\'2\'/&gt;
   *  &lt;/listOfUnits&gt;
   * &lt;unitDefinition&gt;</pre></div>
   * will be simplified to 
   * <div class=\'fragment\'><pre>
   * &lt;unitDefinition&gt;
   *   &lt;listOfUnits&gt;
   *     &lt;unit kind=\'metre\' exponent=\'3\'/&gt;
   *   &lt;/listOfUnits&gt;
   * &lt;unitDefinition&gt;</pre></div>
   * <p>
   * @param ud the {@link UnitDefinition} object to be simplified.
   */
 public";


%javamethodmodifiers UnitDefinition::reorder(UnitDefinition * ud) "
  /** 
   * Alphabetically orders the {@link Unit} objects within the {@link ListOfUnits} of a
   * {@link UnitDefinition}.
   * <p>
   * @param ud the {@link UnitDefinition} object whose units are to be reordered.
   */
 public";


%javamethodmodifiers UnitDefinition::convertToSI(const UnitDefinition *ud) "
  /**
   * Convert a given {@link UnitDefinition} into a new {@link UnitDefinition} object
   * that uses SI units.
   * <p>
   * @param ud the {@link UnitDefinition} object to convert to SI
   * <p>
   * @return a new {@link UnitDefinition} object representing the results of the
   * conversion.
   */
 public";


%javamethodmodifiers UnitDefinition::areIdentical(const UnitDefinition * ud1, const UnitDefinition * ud2) "
  /** 
   * Predicate returning <code>true</code> if two
   * {@link UnitDefinition} objects are identical.
   * <p>
   * For the purposes of performing this comparison, two {@link UnitDefinition}
   * objects are considered identical when they contain identical lists of
   * {@link Unit} objects.  Pairs of {@link Unit} objects in the lists are in turn
   * considered identical if they satisfy the predicate
   * {@link Unit#areIdentical(Unit u1, Unit u2)}.
   * The predicate compares every attribute of the
   * {@link Unit} objects.
   * <p>
   * @param ud1 the first {@link UnitDefinition} object to compare
   * @param ud2 the second {@link UnitDefinition} object to compare
   * <p>
   * @return <code>true</code> if all the {@link Unit} objects in ud1 are identical to the
   * {@link Unit} objects of ud2, <code>false</code> otherwise.
   * <p>
   * @see #areEquivalent(UnitDefinition  ud1, UnitDefinition  ud2)
   * @see Unit#areIdentical(Unit  unit1, Unit  unit2)
   */
 public";


%javamethodmodifiers UnitDefinition::areEquivalent(const UnitDefinition *ud1 , const UnitDefinition * ud2) "
  /** 
   * Predicate returning <code>true</code> if two
   * {@link UnitDefinition} objects are equivalent.
   * <p>
   * For the purposes of performing this comparison, two {@link UnitDefinition}
   * objects are considered equivalent when they contain <em>equivalent</em>
   * list of {@link Unit} objects.  {@link Unit} objects are in turn considered equivalent
   * if they satisfy the predicate
   * {@link Unit#areEquivalent(Unit u1, Unit u2)}.
   * The predicate tests a subset of the objects\'s attributes.
   * <p>
   * @param ud1 the first {@link UnitDefinition} object to compare
   * <p>
   * @param ud2 the second {@link UnitDefinition} object to compare
   * <p>
   * @return <code>true</code> if all the {@link Unit} objects in ud1 are equivalent
   * to the {@link Unit} objects in ud2, <code>false</code> otherwise.
   * <p>
   * @see #areIdentical(UnitDefinition  ud1, UnitDefinition  ud2)
   * @see Unit#areEquivalent(Unit  unit1, Unit  unit2)
   */
 public";


%javamethodmodifiers UnitDefinition::areIdenticalSIUnits(const UnitDefinition * ud1, const UnitDefinition * ud2) "
  /** 
   * Predicate returning <code>true</code> if two
   * {@link UnitDefinition} objects are equivalent.
   * <p>
   * For the purposes of performing this comparison, two {@link UnitDefinition}
   * objects are considered equivalent when they contain <em>equivalent</em>
   * list of {@link Unit} objects.  {@link Unit} objects are in turn considered equivalent
   * if they satisfy the predicate
   * {@link Unit#areEquivalent(Unit u1, Unit u2)}.
   * The predicate tests a subset of the objects\'s attributes.
   * <p>
   * @param ud1 the first {@link UnitDefinition} object to compare
   * <p>
   * @param ud2 the second {@link UnitDefinition} object to compare
   * <p>
   * @return <code>true</code> if all the {@link Unit} objects in ud1 are equivalent
   * to the {@link Unit} objects in ud2, <code>false</code> otherwise.
   * <p>
   * @see #areIdentical(UnitDefinition  ud1, UnitDefinition  ud2)
   * @see Unit#areEquivalent(Unit  unit1, Unit  unit2)
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::combine(UnitDefinition * ud1, UnitDefinition * ud2) "
  /** 
   * Combines two {@link UnitDefinition} objects into a single {@link UnitDefinition}.
   * <p>
   * This takes {@link UnitDefinition} objects <code>ud1</code> and <code>ud2</code>, and creates a
   * {@link UnitDefinition} object that expresses the product of the units of 
   * <code>ud1</code> and <code>ud2</code>.
   * <p>
   * @param ud1 the first {@link UnitDefinition} object 
   * @param ud2 the second {@link UnitDefinition} object
   * <p>
   * @return a {@link UnitDefinition} which represents the product of the 
   * units of the two argument UnitDefinitions.
   */
 public";


%javamethodmodifiers UnitDefinition::printUnits(const UnitDefinition * ud, bool compact = false) "
  /** 
   * Expresses the given definition in a plain-text form.
   * <p>
   * For example,
   * {@link UnitDefinition#printUnits(UnitDefinition u)}
   * applied to
   * <div class=\'fragment\'><pre>
   * &lt;unitDefinition&gt;
   *  &lt;listOfUnits&gt;
   *    &lt;unit kind=\'metre\' exponent=\'1\'/&gt;
   *    &lt;unit kind=\'second\' exponent=\'-2\'/&gt;
   *  &lt;/listOfUnits&gt;
   * &lt;unitDefinition&gt;</pre></div>
   * will return the string <code>\'metre (exponent = 1, multiplier = 1,
   * scale = 0) second (exponent = -2, multiplier = 1, scale = 0)\'</code>
   * or, if the optional parameter <code>compact</code> is given the value <code>true</code>,
   * the string <code>\'(1 metre)^1 (1 second)^-2\'</code>.  This method may
   * be useful for printing unit information to human users, or in
   * debugging software, or other situations.
   * <p>
   * @param ud the {@link UnitDefinition} object
   * @param compact boolean indicating whether the compact form
   * should be used (defaults to false)
   * <p>
   * @return a string expressing the unit definition defined by the given
   * {@link UnitDefinition} object <code>ud</code>.
   */
 public";


%javamethodmodifiers UnitDefinition::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link UnitDefinition} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link UnitDefinition} object are:
   * <li> \'id\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers UnitDefinition::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link UnitDefinition} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Constraint} object are:
   * <li> \'listOfUnits\' (required in SBML Level&nbsp;2 only, optional in Level&nbsp;3)
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers UnitDefinition::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers UnitDefinition::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfUnitDefinitions::ListOfUnitDefinitions(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfUnitDefinitions} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::ListOfUnitDefinitions(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfUnitDefinitions} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfUnitDefinitions} object to be created.
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfUnitDefinitions} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfUnitDefinitions}.
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link UnitDefinition} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfUnitDefinitions}, the XML element name is 
   * <code>\'listOfUnitDefinitions\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfUnitDefinitions\'.</code>
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::get(unsigned int n) "
  /**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}.
   * <p>
   * @param n the index number of the {@link UnitDefinition} to get.
   * <p>
   * @return the nth {@link UnitDefinition} in this {@link ListOfUnitDefinitions}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::get "
  /**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}.
   * <p>
   * @param n the index number of the {@link UnitDefinition} to get.
   * <p>
   * @return the nth {@link UnitDefinition} in this {@link ListOfUnitDefinitions}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::get(const std::string& sid) "
  /**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link UnitDefinition} to get.
   * <p>
   * @return {@link UnitDefinition} in this {@link ListOfUnitDefinitions}
   * with the given id or <code>null</code> if no such
   * {@link UnitDefinition} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::get(const std::string& sid) const "
  /**
   * Get a {@link UnitDefinition} from the {@link ListOfUnitDefinitions}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link UnitDefinition} to get.
   * <p>
   * @return {@link UnitDefinition} in this {@link ListOfUnitDefinitions}
   * with the given id or <code>null</code> if no such
   * {@link UnitDefinition} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfUnitDefinitions} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfUnitDefinitions} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfUnitDefinitions::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the
   * {@link ListOfUnitDefinitions} in a model is (in SBML Level&nbsp;2
   * Version&nbsp;4) the second ListOf___.  (However, it differs for
   * different Levels and Versions of SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfUnitDefinitions::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or null if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) CompartmentType "
/** 
 * LibSBML implementation of SBML\'s Level&nbsp;2\'s CompartmentType construct.
 * <p>
 * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 provide the <em>compartment
 * type</em> as a grouping construct that can be used to establish a
 * relationship between multiple {@link Compartment} objects.  A {@link CompartmentType}
 * object only has an identity, and this identity can only be used to
 * indicate that particular {@link Compartment} objects in the model belong to this
 * type.  This may be useful for conveying a modeling intention, such as
 * when a model contains many similar compartments, either by their
 * biological function or the reactions they carry.  Without a compartment
 * type construct, it would be impossible within SBML itself to indicate
 * that all of the compartments share an underlying conceptual relationship
 * because each SBML compartment must be given a unique and separate
 * identity.  {@link Compartment} types have no mathematical meaning in
 * SBML&mdash;they have no effect on a model\'s mathematical interpretation.
 * Simulators and other numerical analysis software may ignore
 * {@link CompartmentType} definitions and references to them in a model.
 * <p>
 * There is no mechanism in SBML Level 2 for representing hierarchies of
 * compartment types.  One {@link CompartmentType} instance cannot be the subtype
 * of another {@link CompartmentType} instance; SBML provides no means of defining
 * such relationships.
 * <p>
 * As with other major structures in SBML, {@link CompartmentType} has a mandatory
 * attribute, \'id\', used to give the compartment type an identifier.  The
 * identifier must be a text string conforming to the identifer syntax
 * permitted in SBML.  {@link CompartmentType} also has an optional \'name\'
 * attribute, of type <code>string.</code>  The \'id\' and \'name\' must be used
 * according to the guidelines described in the SBML specification (e.g.,
 * Section 3.3 in the Level 2 Version 4 specification).
 * <p>
 * {@link CompartmentType} was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;1 nor in Level&nbsp;3.
 * <p>
 * @see Compartment
 * @see ListOfCompartmentTypes
 * @see SpeciesType
 * @see ListOfSpeciesTypes
 * <p>
 * <p>
 */
"

%typemap(javaimports) ListOfCompartmentTypes "
/** 
 * LibSBML implementation of SBML\'s ListOfCompartmentTypes construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers CompartmentType::CompartmentType(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link CompartmentType} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link CompartmentType}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link CompartmentType}
   * <p>
   * @note Upon the addition of a {@link CompartmentType} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addCompartmentType(CompartmentType ct)}), the SBML Level, SBML
   * Version and XML namespace of the document <em>override</em> the
   * values used when creating the {@link CompartmentType} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link CompartmentType} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers CompartmentType::CompartmentType(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link CompartmentType} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link CompartmentType} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method setId(String id).
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link CompartmentType} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addCompartmentType(CompartmentType ct)}), the SBML XML namespace of
   * the document <em>overrides</em> the value used when creating the
   * {@link CompartmentType} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a
   * {@link CompartmentType} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers CompartmentType::CompartmentType(const CompartmentType& orig) "
  /**
   * Copy constructor; creates a copy of this {@link CompartmentType}.
   */
 public";


%javamethodmodifiers CompartmentType::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link CompartmentType}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link CompartmentType} in
   * the list of compartment types.
   */
 public";


%javamethodmodifiers CompartmentType::clone() const "
  /**
   * Creates and returns a deep copy of this {@link CompartmentType}.
   * <p>
   * @return a (deep) copy of this {@link CompartmentType}.
   */
 public";


%javamethodmodifiers CompartmentType::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link CompartmentType}.
   * <p>
   * @return the id of this {@link CompartmentType}.
   */
 public";


%javamethodmodifiers CompartmentType::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link CompartmentType}.
   * <p>
   * @return the name of this {@link CompartmentType}.
   */
 public";


%javamethodmodifiers CompartmentType::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link CompartmentType}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link CompartmentType} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers CompartmentType::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link CompartmentType}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this CompartmentTypeType is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers CompartmentType::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link CompartmentType}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link CompartmentType}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers CompartmentType::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link CompartmentType}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link CompartmentType}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers CompartmentType::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link CompartmentType}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers CompartmentType::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers CompartmentType::getElementName() const "
  /**
   * Returns the XML element name of this object, which for
   * {@link CompartmentType}, is always <code>\'compartmentType\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'compartmentType\'.</code>
   */
 public";


%javamethodmodifiers CompartmentType::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers CompartmentType::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link CompartmentType} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link CompartmentType} object are:
   * <li> \'id\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers CompartmentType::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers CompartmentType::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   * <p>
   * @param attributes the {@link XMLAttributes} to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers CompartmentType::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   * <p>
   * @param attributes the {@link XMLAttributes} to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers CompartmentType::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
   * @param stream the XMLOutputStream to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfCompartmentTypes::ListOfCompartmentTypes(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfCompartmentTypes} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::ListOfCompartmentTypes(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfCompartmentTypes} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfCompartmentTypes} object to be created.
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfCompartmentTypes} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfCompartmentTypes}.
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link CompartmentType} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfCompartmentTypes}, the XML element name is 
   * <code>\'listOfCompartmentTypes\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfCompartmentTypes\'.</code>
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::get(unsigned int n) "
  /**
   * Get a {@link CompartmentType} from the {@link ListOfCompartmentTypes}.
   * <p>
   * @param n the index number of the {@link CompartmentType} to get.
   * <p>
   * @return the nth {@link CompartmentType} in this {@link ListOfCompartmentTypes}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::get "
  /**
   * Get a {@link CompartmentType} from the {@link ListOfCompartmentTypes}.
   * <p>
   * @param n the index number of the {@link CompartmentType} to get.
   * <p>
   * @return the nth {@link CompartmentType} in this {@link ListOfCompartmentTypes}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::get(const std::string& sid) "
  /**
   * Get a {@link CompartmentType} from the {@link ListOfCompartmentTypes}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link CompartmentType} to get.
   * <p>
   * @return {@link CompartmentType} in this {@link ListOfCompartmentTypes}
   * with the given id or <code>null</code> if no such
   * {@link CompartmentType} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::get(const std::string& sid) const "
  /**
   * Get a {@link CompartmentType} from the {@link ListOfCompartmentTypes}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link CompartmentType} to get.
   * <p>
   * @return {@link CompartmentType} in this {@link ListOfCompartmentTypes}
   * with the given id or <code>null</code> if no such
   * {@link CompartmentType} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfCompartmentTypes} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfCompartmentTypes} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfCompartmentTypes::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  For example, the
   * {@link ListOfCompartmentTypes} in a model (in SBML Level 2 Version 4) is the
   * third ListOf___.  (However, it differs for different Levels and
   * Versions of SBML, so calling code should not hardwire this number.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfCompartmentTypes::createObject(XMLInputStream& stream) "
  /**
   * Create a {@link ListOfCompartmentTypes} object corresponding to the next token
   * in the XML input stream.
   * <p>
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream, or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SpeciesType "
/** 
 * LibSBML implementation of SBML Level&nbsp;2\'s SpeciesType construct.
 * <p>
 * The term <em>species</em> <em>type</em> refers to reacting entities independent of
 * location.  These include simple ions (e.g., protons, calcium), simple
 * molecules (e.g., glucose, ATP), large molecules (e.g., RNA,
 * polysaccharides, and proteins), and others.
 * <p>
 * SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 provide an explicit
 * {@link SpeciesType} class of object to enable {@link Species} objects of the same type
 * to be related together.  {@link SpeciesType} is a conceptual construct; the
 * existence of {@link SpeciesType} objects in a model has no effect on the model\'s
 * numerical interpretation.  Except for the requirement for uniqueness of
 * species/species type combinations located in compartments, simulators
 * and other numerical analysis software may ignore {@link SpeciesType} definitions
 * and references to them in a model.
 * <p>
 * There is no mechanism in SBML Level 2 for representing hierarchies of
 * species types.  One {@link SpeciesType} object cannot be the subtype of another
 * {@link SpeciesType} object; SBML provides no means of defining such
 * relationships.
 * <p>
 * As with other major structures in SBML, {@link SpeciesType} has a mandatory
 * attribute, \'id\', used to give the species type an identifier.  The
 * identifier must be a text string conforming to the identifer syntax
 * permitted in SBML.  {@link SpeciesType} also has an optional \'name\' attribute,
 * of type <code>string.</code>  The \'id\' and \'name\' must be used according to the
 * guidelines described in the SBML specification (e.g., Section 3.3 in
 * the Level&nbsp;2 Version&nbsp;4 specification).
 * <p>
 * {@link SpeciesType} was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;1 nor in Level&nbsp;3.
 * <p>
 * @see Species
 * @see ListOfSpeciesTypes
 * @see CompartmentType
 * @see ListOfCompartmentTypes
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) ListOfSpeciesTypes "
/** 
 * LibSBML implementation of SBML\'s ListOfSpeciesTypes construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers SpeciesType::SpeciesType(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link SpeciesType} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link SpeciesType}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link SpeciesType}
   * <p>
   * @note Upon the addition of a {@link SpeciesType} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addSpeciesType(SpeciesType st)}),
   * the SBML Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link SpeciesType} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link SpeciesType} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers SpeciesType::SpeciesType(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link SpeciesType} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link SpeciesType} object is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method {@link SBase#setId(String id)}.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link SpeciesType} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addSpeciesType(SpeciesType st)}),
   * the SBML XML namespace of the document <em>overrides</em> the value used
   * when creating the {@link SpeciesType} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link SpeciesType} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers SpeciesType::SpeciesType(const SpeciesType& orig) "
  /**
  * Copy constructor; creates a copy of this {@link SpeciesType}.
  */
 public";


%javamethodmodifiers SpeciesType::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link SpeciesType}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link SpeciesType} in
   * the list of compartment types.
   */
 public";


%javamethodmodifiers SpeciesType::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SpeciesType}.
   * <p>
   * @return a (deep) copy of this {@link SpeciesType}.
   */
 public";


%javamethodmodifiers SpeciesType::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link SpeciesType}.
   * <p>
   * @return the id of this {@link SpeciesType}.
   */
 public";


%javamethodmodifiers SpeciesType::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link SpeciesType}.
   * <p>
   * @return the name of this {@link SpeciesType}.
   */
 public";


%javamethodmodifiers SpeciesType::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesType}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link SpeciesType} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SpeciesType::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesType}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link SpeciesType} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SpeciesType::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link SpeciesType}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link SpeciesType}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers SpeciesType::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link SpeciesType}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link SpeciesType}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers SpeciesType::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link SpeciesType}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SpeciesType::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers SpeciesType::getElementName() const "
  /**
   * Returns the XML element name of this object, which for
   * {@link SpeciesType}, is always <code>\'compartmentType\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'compartmentType\'.</code>
   */
 public";


%javamethodmodifiers SpeciesType::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesType::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link SpeciesType} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link SpeciesType} object are:
   * <li> \'id\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers SpeciesType::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesType::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   * <p>
   * @param attributes the {@link XMLAttributes} to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesType::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   * <p>
   * @param attributes the {@link XMLAttributes} to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesType::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   * <p>
   * @param stream the XMLOutputStream to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfSpeciesTypes::ListOfSpeciesTypes(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfSpeciesTypes} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::ListOfSpeciesTypes(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfSpeciesTypes} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfSpeciesTypes} object to be created.
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfSpeciesTypes} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfSpeciesTypes}.
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link SpeciesType} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfSpeciesTypes}, the XML element name is 
   * <code>\'listOfSpeciesTypes\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfSpeciesTypes\'.</code>
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::get(unsigned int n) "
  /**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}.
   * <p>
   * @param n the index number of the {@link SpeciesType} to get.
   * <p>
   * @return the nth {@link SpeciesType} in this {@link ListOfSpeciesTypes}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::get "
  /**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}.
   * <p>
   * @param n the index number of the {@link SpeciesType} to get.
   * <p>
   * @return the nth {@link SpeciesType} in this {@link ListOfSpeciesTypes}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::get(const std::string& sid) "
  /**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesType} to get.
   * <p>
   * @return {@link SpeciesType} in this {@link ListOfSpeciesTypes}
   * with the given id or <code>null</code> if no such
   * {@link SpeciesType} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::get(const std::string& sid) const "
  /**
   * Get a {@link SpeciesType} from the {@link ListOfSpeciesTypes}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesType} to get.
   * <p>
   * @return {@link SpeciesType} in this {@link ListOfSpeciesTypes}
   * with the given id or <code>null</code> if no such
   * {@link SpeciesType} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfSpeciesTypes} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfSpeciesTypes} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfSpeciesTypes::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  For example, the
   * {@link ListOfSpeciesTypes} in a model (in SBML Level 2 Version 4) is the
   * third ListOf___.  (However, it differs for different Levels and
   * Versions of SBML, so calling code should not hardwire this number.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfSpeciesTypes::createObject(XMLInputStream& stream) "
  /**
   * Create a {@link ListOfSpeciesTypes} object corresponding to the next token
   * in the XML input stream.
   * <p>
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream, or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Compartment "
/** 
 * LibSBML implementation of SBML\'s Compartment construct.
 * <p>
 * A compartment in SBML represents a bounded space in which species are
 * located.  Compartments do not necessarily have to correspond to actual
 * structures inside or outside of a biological cell.
 * <p>
 * It is important to note that although compartments are optional in the
 * overall definition of {@link Model}, every species in an SBML model must be
 * located in a compartment.  This in turn means that if a model defines
 * any species, the model must also define at least one compartment.  The
 * reason is simply that species represent physical things, and therefore
 * must exist <em>somewhere</em>.  Compartments represent the <em>somewhere</em>.
 * <p>
 * {@link Compartment} has one required attribute, \'id\', to give the compartment a
 * unique identifier by which other parts of an SBML model definition can
 * refer to it.  A compartment can also have an optional \'name\' attribute
 * of type <code>string.</code>  Identifiers and names must be used according to the
 * guidelines described in the SBML specifications.
 * <p>
 * {@link Compartment} also has an optional attribute \'spatialDimensions\' that is
 * used to indicate the number of spatial dimensions possessed by the
 * compartment.  Most modeling scenarios involve compartments with integer
 * values of \'spatialDimensions\' of <code>3</code> (i.e., a three-dimensional
 * compartment, which is to say, a volume), or 2 (a two-dimensional
 * compartment, a surface), or <code>1</code> (a one-dimensional compartment, a
 * line).  In SBML Level&nbsp;3, the type of this attribute is <code>double</code>,
 * there are no restrictions on the permitted values of the
 * \'spatialDimensions\' attribute, and there are no default values.  In SBML
 * Level&nbsp;2, the value must be a positive <code>integer</code>, and the default
 * value is <code>3</code>; the permissible values in SBML Level&nbsp;2 are <code>3</code>, 
 * <code>2</code>, <code>1</code>, and <code>0</code> (for a point).
 * <p>
 * Another optional attribute on {@link Compartment} is \'size\', representing the
 * <em>initial</em> total size of that compartment in the model.  The \'size\'
 * attribute must be a floating-point value and may represent a volume (if
 * the compartment is a three-dimensional one), or an area (if the
 * compartment is two-dimensional), or a length (if the compartment is
 * one-dimensional).  There is no default value of compartment size in SBML
 * Level&nbsp;2 or Level&nbsp;3.  In particular, a missing \'size\' value
 * <em>does not imply that the compartment size is 1</em>.  (This is unlike
 * the definition of compartment \'volume\' in SBML Level&nbsp;1.)  When the
 * compartment\'s \'spatialDimensions\' attribute does not have a value of 
 * <code>0</code>, a missing value of \'size\' for a given compartment signifies that the
 * value either is unknown, or to be obtained from an external source, or
 * determined by an {@link InitialAssignment}, {@link AssignmentRule}, {@link AlgebraicRule} or
 * {@link RateRule} elsewhere in the model.  In SBML Level&nbsp;2, there are
 * additional special requirements on the values of \'size\'; we discuss them
 * in a <a href=\'#comp-l2\'>separate section below</a>.
 * <p>
 * The units associated with a compartment\'s \'size\' attribute value may be
 * set using the optional attribute \'units\'.  The rules for setting and
 * using compartment size units differ between SBML Level&nbsp;2 and
 * Level&nbsp;3, and are discussed separately below.
 * <p>
 * Finally, the optional {@link Compartment} attribute named \'constant\' is used to
 * indicate whether the compartment\'s size stays constant after simulation
 * begins.  A value of <code>true</code> indicates the compartment\'s \'size\' cannot be
 * changed by any other construct except {@link InitialAssignment}; a value of 
 * <code>false</code> indicates the compartment\'s \'size\' can be changed by other
 * constructs in SBML.  In SBML Level&nbsp;2, there is an additional
 * explicit restriction that if \'spatialDimensions\'=<code>\'0\'</code>, the value
 * cannot be changed by {@link InitialAssignment} either.  Further, in
 * Level&nbsp;2, \'constant\' has a default value of <code>true.</code>  In SBML
 * Level&nbsp;3, there is no default value for the \'constant\' attribute.
 * <p>
 * <p>
 * <h2>Additional considerations in SBML Level&nbsp;2</h2>
 * <p>
 * In SBML Level&nbsp;2, the default units of compartment size, and the
 * kinds of units allowed as values of the attribute \'units\', interact with
 * the number of spatial dimensions of the compartment.  The value of the
 * \'units\' attribute of a {@link Compartment} object must be one of the base units
 * (see {@link Unit}), or the predefined unit identifiers <code>volume</code>, <code>area</code>, 
 * <code>length</code> or <code>dimensionless</code>, or a new unit defined by a {@link UnitDefinition}
 * object in the enclosing {@link Model}, subject to the restrictions detailed in
 * the following table:
 * <p>
 * <center style=\'padding-bottom: 0.5em\'>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
<caption class=\'top-caption\'>Restrictions on values permitted for
compartment <code>size</code> and <code>units</code> attributes.</caption>
 <tr>
     <th align=\'left\' valign=\'bottom\'>
       Value of<br><code>spatialDimensions</code>
     </th>
     <th align=\'left\' valign=\'bottom\'>
       <code>size</code><br>allowed?
     </th>
     <th align=\'left\' valign=\'bottom\'>
       <code>units</code><br>allowed?
     </th>
     <th align=\'left\' valign=\'bottom\'>
	  Allowable kinds of units
     </th>
     <th align=\'left\' valign=\'bottom\'>
	  Default value of attribute <code>units</code>
     </th>
 </tr>
 <tr>
     <td>\'<code>3</code>\'</td>
     <td>yes</td>
     <td>yes</td>
     <td>units of volume, or <code>dimensionless</code></td>
     <td>\'<code>volume</code>\'</td>
 </tr>
 <tr>
     <td>\'<code>2</code>\'</td>
     <td>yes</td>
     <td>yes</td>
     <td>units of area, or <code>dimensionless</code></td>
     <td>\'<code>area</code>\'</td>
 </tr>
 <tr>
     <td>\'<code>1</code>\'</td>
     <td>yes</td>
     <td>yes</td>
     <td>units of length, or <code>dimensionless</code></td>
     <td>\'<code>length</code>\'</td>
 </tr>
 <tr>
     <td>\'<code>0</code>\'</td>
     <td>no</td>
     <td>no</td>
     <td>(no units allowed)</td>
     <td></td>
 </tr>
 </tr>
</table>
</center>

 * <p>
 * In SBML Level&nbsp;2, the units of the compartment size, as defined by the
 * \'units\' attribute or (if \'units\' is not set) the default value listed in
 * the table above, are used in the following ways when the compartment has
 * a \'spatialDimensions\' value greater than <code>0:</code>
 * <ul>
 * <li> The value of the \'units\' attribute is used as the units of the
 * compartment identifier when the identifier appears as a numerical
 * quantity in a mathematical formula expressed in MathML.
 * <p>
 * <li> The <code>math</code> element of an {@link AssignmentRule} or {@link InitialAssignment}
 * referring to this compartment must have identical units.
 * <p>
 * <li> In {@link RateRule} objects that set the rate of change of the compartment\'s
 * size, the units of the rule\'s <code>math</code> element must be identical to the
 * compartment\'s \'units\' attribute divided by the default <em>time</em> units.
 * (In other words, the units for the rate of change of compartment size
 * are <em>compartment size</em>/<em>time</em> units.
 * <p>
 * <li> When a {@link Species} is to be treated in terms of concentrations or
 * density, the units of the spatial size portion of the concentration
 * value (i.e., the denominator in the units formula <em>substance</em>/
 * <em>size</em>) are those indicated by the value of the \'units\' attribute on the
 * compartment in which the species is located.
 * </ul>
 * <p>
 * Compartments with \'spatialDimensions\'=<code>0</code> require special treatment in
 * this framework.  As implied above, the \'size\' attribute must not have a
 * value on an SBML Level&nbsp;2 {@link Compartment} object if the
 * \'spatialDimensions\' attribute has a value of <code>0.</code>  An additional
 * related restriction is that the \'constant\' attribute must default to or
 * be set to <code>true</code> if the value of the \'spatialDimensions\' attribute is
 * <code>0</code>, because a zero-dimensional compartment cannot ever have a size.
 * <p>
 * If a compartment has no size or dimensional units, how should such a
 * compartment\'s identifier be interpreted when it appears in mathematical
 * formulas?  The answer is that such a compartment\'s identifier should not
 * appear in mathematical formulas in the first place&mdash;it has no
 * value, and its value cannot change.  Note also that a zero-dimensional
 * compartment is a point, and species located at points can only be
 * described in terms of amounts, not spatially-dependent measures such as
 * concentration.  Since SBML {@link KineticLaw} formulas are already in terms of
 * <em>substance</em>/<em>time</em> and not (say) <em>concentration</em>/<em>time</em>, volume
 * or other factors in principle are not needed for species located in
 * zero-dimensional compartments.
 * <p>
 * Finally, in SBML Level&nbsp;2 Versions 2&ndash;4, each compartment in a
 * model may optionally be designated as belonging to a particular
 * compartment <em>type</em>.  The optional attribute \'compartmentType\' is used
 * identify the compartment type represented by the {@link Compartment} structure.
 * The \'compartmentType\' attribute\'s value must be the identifier of a
 * {@link CompartmentType} instance defined in the model.  If the \'compartmentType\'
 * attribute is not present on a particular compartment definition, a
 * unique virtual compartment type is assumed for that compartment, and no
 * other compartment can belong to that compartment type.  The values of
 * \'compartmentType\' attributes on compartments have no effect on the
 * numerical interpretation of a model.  Simulators and other numerical
 * analysis software may ignore \'compartmentType\' attributes.  The
 * \'compartmentType\' attribute and the {@link CompartmentType} class of objects are
 * not present in SBML Level&nbsp;3 Core nor in SBML Level&nbsp;1.
 * <p>
 * <p>
 * <h2>Additional considerations in SBML Level&nbsp;3</h2>
 * <p>
 * One difference between SBML Level&nbsp;3 and lower Levels of SBML is
 * that there are no restrictions on the permissible values of the
 * \'spatialDimensions\' attribute, and there is no default value defined for
 * the attribute.  The value of \'spatialDimensions\' does not have to be an
 * integer, either; this is to allow for the possibility of representing
 * structures with fractal dimensions.
 * <p>
 * The number of spatial dimensions possessed by a compartment cannot enter
 * into mathematical formulas, and therefore cannot directly alter the
 * numerical interpretation of a model.  However, the value of
 * \'spatialDimensions\' <em>does</em> affect the interpretation of the units
 * associated with a compartment\'s size.  Specifically, the value of
 * \'spatialDimensions\' is used to select among the {@link Model} attributes
 * \'volumeUnits\', \'areaUnits\' and \'lengthUnits\' when a {@link Compartment} object
 * does not define a value for its \'units\' attribute.
 * <p>
 * The \'units\' attribute may be left unspecified for a given compartment in
 * a model; in that case, the compartment inherits the unit of measurement
 * specified by one of the attributes on the enclosing {@link Model} object
 * instance.  The applicable attribute on {@link Model} depends on the value of the
 * compartment\'s \'spatialDimensions\' attribute; the relationship is shown
 * in the table below.  If the {@link Model} object does not define the relevant
 * attribute (\'volumeUnits\', \'areaUnits\' or \'lengthUnits\') for a given
 * \'spatialDimensions\' value, the unit associated with that {@link Compartment}
 * object\'s size is undefined.  If <em>both</em> \'spatialDimensions\' and \'units\'
 * are left unset on a given {@link Compartment} object instance, then no unit can
 * be chosen from among the {@link Model}\'s \'volumeUnits\', \'areaUnits\' or
 * \'lengthUnits\' attributes (even if the {@link Model} instance provides values for
 * those attributes), because there is no basis to select between them and
 * there is no default value of \'spatialDimensions\'.  Leaving the units of
 * compartments\' sizes undefined in an SBML model does not render the model
 * invalid; however, as a matter of best practice, we strongly recommend
 * that all models specify the units of measurement for all compartment
 * sizes.
 * <p>
 * <center style=\'padding-bottom: 0.5em\'>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
<caption class=\'top-caption\'>Interpretation of the {@link Compartment} \'units\' attribute.</caption>
 <tr>
     <th align=\'left\' valign=\'bottom\'>
       Value of attribute<br>\'spatialDimensions\'
     </th>
     <th align=\'left\' valign=\'bottom\'>
       Attribute of {@link Model} used<br>for inheriting the unit
     </th>
     <th align=\'left\' valign=\'bottom\'>
       Recommended candidate units
     </th>
 </tr>
 <tr>
     <td>\'<code>3</code>\'</td>
     <td>\'volumeUnits\'</td>
     <td>units of volume, or <code>dimensionless</code></td>
 </tr>
 <tr>
     <td>\'<code>2</code>\'</td>
     <td>\'areaUnits\'</td>
     <td>units of area, or <code>dimensionless</code></td>
 </tr>
 <tr>
     <td>\'<code>1</code>\'</td>
     <td>\'lengthUnits\'</td>
     <td>units of length, or <code>dimensionless</code></td>
 </tr>
 <tr>
     <td><em>other</em></td>
     <td><em>no units inherited</em></td>
     <td><em>no specific recommendations</em></td>
 </tr>
 </tr>
</table>
</center>

 * <p>
 * The unit of measurement associated with a compartment\'s size, as defined
 * by the \'units\' attribute or (if \'units\' is not set) the inherited value
 * from {@link Model} according to the table above, is used in the following ways:
 * <p>
 * <ul>
 * <p>
 * <li> When the identifier of the compartment appears as a numerical
 * quantity in a mathematical formula expressed in MathML, it represents
 * the size of the compartment, and the unit associated with the size is
 * the value of the \'units\' attribute.
 * <p>
 * <li> When a {@link Species} is to be treated in terms of concentrations or
 * density, the unit associated with the spatial size portion of the
 * concentration value (i.e., the denominator in the formula
 * <em>amount</em>/<em>size</em>) is specified by the value of the \'units\'
 * attribute on the compartment in which the species is located.
 * <p>
 * <li> The \'math\' elements of {@link AssignmentRule}, {@link InitialAssignment} and
 * {@link EventAssignment} objects setting the value of the compartment size
 * should all have the same units as the unit associated with the
 * compartment\'s size.
 * <p>
 * <li> In a {@link RateRule} object that defines a rate of change for a
 * compartment\'s size, the unit of the rule\'s \'math\' element should be
 * identical to the compartment\'s \'units\' attribute divided by the
 * model-wide unit of <em>time</em>.  (In other words, {<em>unit of
 * compartment size</em>}/{<em>unit of time</em>}.)
 * <p>
 * </ul>
 * <p>
 * <p>
 * <h2>Other aspects of {@link Compartment}</h2>
 * <p>
 * In SBML Level&nbsp;1 and Level&nbsp;2, {@link Compartment} has an optional
 * attribute named \'outside\', whose value can be the identifier of another
 * {@link Compartment} object defined in the enclosing {@link Model} object.  Doing so
 * means that the other compartment contains it or is outside of it.  This
 * enables the representation of simple topological relationships between
 * compartments, for those simulation systems that can make use of the
 * information (e.g., for drawing simple diagrams of compartments).  It is
 * worth noting that in SBML, there is no relationship between compartment
 * sizes when compartment positioning is expressed using the \'outside\'
 * attribute.  The size of a given compartment does not in any sense
 * include the sizes of other compartments having it as the value of their
 * \'outside\' attributes.  In other words, if a compartment <em>B</em> has the
 * identifier of compartment <em>A</em> as its \'outside\' attribute value, the
 * size of <em>A</em> does not include the size of <em>B</em>.  The compartment sizes
 * are separate.
 * <p>
 * In Level&nbsp;2, there are two restrictions on the \'outside\' attribute.
 * First, because a compartment with \'spatialDimensions\' of <code>0</code> has no
 * size, such a compartment cannot act as the container of any other
 * compartment <em>except</em> compartments that <em>also</em> have
 * \'spatialDimensions\' values of <code>0.</code>  Second, the directed graph formed
 * by representing {@link Compartment} structures as vertexes and the \'outside\'
 * attribute values as edges must be acyclic.  The latter condition is
 * imposed to prevent a compartment from being contained inside itself.  In
 * the absence of a value for \'outside\', compartment definitions in SBML
 * Level&nbsp;2 do not have any implied spatial relationships between each
 * other.
 * <p>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfCompartments "
/** 
 * LibSBML implementation of SBML Level&nbsp;2\'s ListOfCompartments construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Compartment::Compartment(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Compartment} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Compartment}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Compartment}
   * <p>
   * @note Upon the addition of a {@link Compartment} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addCompartment(Compartment c)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link Compartment} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link Compartment} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Compartment::Compartment(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Compartment} using the given {@link SBMLNamespaces} object 
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link Compartment} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method {@link Compartment#setId(String id)}.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Compartment} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addCompartment(Compartment c)}), the SBML XML namespace of the
   * document <em>overrides</em> the value used when creating the {@link Compartment}
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link Compartment} is an
   * important aid to producing valid SBML.  Knowledge of the intented SBML
   * Level and Version determine whether it is valid to assign a particular
   * value to an attribute, or whether it is valid to add an object to an
   * existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Compartment::Compartment(const Compartment& orig) "
  /**
   * Copy constructor; creates a copy of a {@link Compartment}.
   * <p>
   * @param orig the {@link Compartment} instance to copy.
   */
 public";


%javamethodmodifiers Compartment::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Compartment}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Compartment} in the
   * list of compartments within which this {@link Compartment} is embedded (i.e.,
   * the {@link ListOfCompartments} in the parent {@link Model}).
   */
 public";


%javamethodmodifiers Compartment::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Compartment} object.
   * <p>
   * @return a (deep) copy of this {@link Compartment}.
   */
 public";


%javamethodmodifiers Compartment::initDefaults "
  /**
   * Initializes the fields of this {@link Compartment} object to \'typical\' default
   * values.
   * <p>
   * The SBML {@link Compartment} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'spatialDimensions\' to <code>3</code>
   * <li> Sets attribute \'constant\' to <code>true</code>
   * <li> (Applies to Level&nbsp;1 models only) Sets attribute \'volume\' to <code>1.0</code>
   * <li> (Applies to Level&nbsp;3 models only) Sets attribute \'units\' to <code>litre</code>
   * </ul>
   */
 public";


%javamethodmodifiers Compartment::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link Compartment} object.
   * <p>
   * @return the id of this {@link Compartment}.
   */
 public";


%javamethodmodifiers Compartment::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link Compartment} object.
   * <p>
   * @return the name of this {@link Compartment}.
   */
 public";


%javamethodmodifiers Compartment::getCompartmentType() const "
  /**
   * Get the value of the \'compartmentType\' attribute of this {@link Compartment}
   * object.
   * <p>
   * @return the value of the \'compartmentType\' attribute of this
   * {@link Compartment} as a string.
   * <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Compartment::getSpatialDimensions() const "
  /**
   * Get the number of spatial dimensions of this {@link Compartment} object.
   * <p>
   * @note In SBML Level&nbsp;3, the data type of the \'spatialDimensions\'
   * attribute is <code>double</code>, whereas in Level&nbsp;2, it is <code>integer.</code>
   * LibSBML provides a separate method for obtaining the value as a double,
   * for models where it is relevant.
   * <p>
   * @return the value of the \'spatialDimensions\' attribute of this
   * {@link Compartment} as a long integereger
   * <p>
   * @see #getSpatialDimensionsAsDouble()
   */
 public";


%javamethodmodifiers Compartment::getSpatialDimensionsAsDouble() const "
  /**
   * Get the number of spatial dimensions of this {@link Compartment} object
   * as a double.
   * <p>
   * @note In SBML Level&nbsp;3, the data type of the \'spatialDimensions\'
   * attribute is <code>double</code>, whereas in Level&nbsp;2, it is <code>integer.</code>  To
   * avoid backward compatibility issues, libSBML provides a separate
   * method for obtaining the value as a double, for models where it is
   * relevant.
   * <p>
   * @return the value of the \'spatialDimensions\' attribute of this
   * {@link Compartment} as a double, or <code>NaN</code> if this model is not in SBML
   * Level&nbsp;3 format.
   * <p>
   * @see #getSpatialDimensions()
   */
 public";


%javamethodmodifiers Compartment::getSize() const "
  /**
   * Get the size of this {@link Compartment}.
   * <p>
   * This method is identical to
   * {@link Compartment#getVolume()}.
   * In SBML Level&nbsp;1, compartments are always three-dimensional
   * constructs and only have volumes, whereas in SBML Level&nbsp;2,
   * compartments may be other than three-dimensional and therefore the
   * \'volume\' attribute is named \'size\' in Level&nbsp;2.  LibSBML provides
   * both
   * {@link Compartment#getSize()} and
   * {@link Compartment#getVolume()} for
   * easier compatibility between SBML Levels.
   * <p>
   * @return the value of the \'size\' attribute (\'volume\' in Level&nbsp;1) of
   * this {@link Compartment} as a float-point number.
   * <p>
   * @see #isSetSize()
   * @see #getVolume()
   */
 public";


%javamethodmodifiers Compartment::getVolume() const "
  /**
   * Get the volume of this {@link Compartment}.
   * <p>
   * This method is identical to
   * {@link Compartment#getSize()}.  In
   * SBML Level&nbsp;1, compartments are always three-dimensional
   * constructs and only have volumes, whereas in SBML Level&nbsp;2,
   * compartments may be other than three-dimensional and therefore the
   * \'volume\' attribute is named \'size\' in Level&nbsp;2.  LibSBML provides
   * both
   * {@link Compartment#getSize()} and
   * {@link Compartment#getVolume()}
   * for easier compatibility between SBML Levels.
   * <p>
   * @return the value of the \'volume\' attribute (\'size\' in Level&nbsp;2) of
   * this {@link Compartment}, as a floating-point number.
   * <p>
   * @note The attribute \'volume\' only exists by that name in SBML
   * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
   * named \'size\'.
   * <p>
   * @see #isSetVolume()
   * @see #getSize()
   */
 public";


%javamethodmodifiers Compartment::getUnits() const "
  /**
   * Get the units of this compartment\'s size.
   * <p>
   * The value of an SBML compartment\'s \'units\' attribute establishes the
   * unit of measurement associated with the compartment\'s size.
   * <p>
   * @return the value of the \'units\' attribute of this {@link Compartment}, as a
   * string.  An empty string indicates that no units have been assigned to
   * the value of the size.
   * <p>
   * @note There is an important distinction to be made between <em>no units
assigned</em>, and assuming a value without units has any specific unit
such as <code>dimensionless</code>.  In SBML, default units are never
attributed to numbers, and numbers without units are not automatically
assumed to have the unit <code>dimensionless</code>.  Please consult the
relevant SBML specification document for a more in-depth explanation of
this topic and the SBML unit system.

   * <p>
   * @see #isSetUnits()
   * @see Compartment#setUnits(String sid)
   * @see #getSize()
   */
 public";


%javamethodmodifiers Compartment::getOutside() const "
  /**
   * Get the identifier, if any, of the compartment that is designated
   * as being outside of this one.
   * <p>
   * @return the value of the \'outside\' attribute of this {@link Compartment}.
   * <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */
 public";


%javamethodmodifiers Compartment::getConstant() const "
  /**
   * Get the value of the \'constant\' attribute of this {@link Compartment}.
   * <p>
   * @return <code>true</code> if this {@link Compartment}\'s size is flagged as being
   * constant, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Compartment::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Compartment} is 
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Compartment::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Compartment} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Compartment::isSetCompartmentType() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'compartmentType\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'compartmentType\' attribute of this {@link Compartment}
   * is set, <code>false</code> otherwise.
   * <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Compartment::isSetSize() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'size\' attribute is set.
   * <p>
   * This method is similar but not identical to
   * {@link Compartment#isSetVolume()}.  The latter
   * should be used in the context of SBML Level&nbsp;1 models instead of
   * {@link Compartment#isSetSize()}
   * because {@link Compartment#isSetVolume()}
   * performs extra processing to take into account the difference in
   * default values between SBML Levels 1 and 2.
   * <p>
   * @return <code>true</code> if the \'size\' attribute (\'volume\' in Level&nbsp;2) of
   * this {@link Compartment} is set, <code>false</code> otherwise.
   * <p>
   * @see #isSetVolume()
   * @see #setSize(double value)
   */
 public";


%javamethodmodifiers Compartment::isSetVolume() const "
  /**
   * Predicate returning <code>true</code> if this {@link Compartment}\'s
   * \'volume\' attribute is set.
   * <p>
   * This method is similar but not identical to
   * {@link Compartment#isSetSize()}.  The latter
   * should not be used in the context of SBML Level&nbsp;1 models because this
   * method performs extra processing to take into account
   * the difference in default values between SBML Levels 1 and 2.
   * <p>
   * @return <code>true</code> if the \'volume\' attribute (\'size\' in Level&nbsp;2 and
   * above) of this {@link Compartment} is set, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'volume\' only exists by that name in SBML
   * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
   * named \'size\'.  In SBML Level&nbsp;1, a compartment\'s volume has a
   * default value (<code>1.0</code>) and therefore this method will always return 
   * <code>true.</code>  In Level 2, a compartment\'s size (the equivalent of SBML
   * Level&nbsp;1\'s \'volume\') is optional and has no default value, and
   * therefore may or may not be set.
   * <p>
   * @see #isSetSize()
   * @see Compartment#setVolume(double value)
   */
 public";


%javamethodmodifiers Compartment::isSetUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'units\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'units\' attribute of this {@link Compartment} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note There is an important distinction to be made between <em>no units
assigned</em>, and assuming a value without units has any specific unit
such as <code>dimensionless</code>.  In SBML, default units are never
attributed to numbers, and numbers without units are not automatically
assumed to have the unit <code>dimensionless</code>.  Please consult the
relevant SBML specification document for a more in-depth explanation of
this topic and the SBML unit system.

   */
 public";


%javamethodmodifiers Compartment::isSetOutside() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'outside\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'outside\' attribute of this {@link Compartment} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */
 public";


%javamethodmodifiers Compartment::isSetSpatialDimensions() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'spatialDimensions\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'spatialDimensions\' attribute of this
   * {@link Compartment} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Compartment::isSetConstant() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Compartment}\'s \'constant\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'constant\' attribute of this {@link Compartment} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Compartment::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link Compartment}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link Compartment}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Compartment::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link Compartment}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link Compartment}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Compartment::setCompartmentType(const std::string& sid) "
  /**
   * Sets the \'compartmentType\' attribute of this {@link Compartment}.
   * <p>
   * @param sid the identifier of a {@link CompartmentType} object defined
   * elsewhere in this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Compartment::setSpatialDimensions(unsigned int value) "
  /**
   * Sets the \'spatialDimensions\' attribute of this {@link Compartment}.
   * <p>
   * If <code>value</code> is not one of <code>0</code>, <code>1</code>, <code>2</code>, or <code>3</code>, this method will
   * have no effect (i.e., the \'spatialDimensions\' attribute will not be
   * set).
   * <p>
   * @param value a long integereger indicating the number of dimensions
   * of this compartment.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Compartment::setSpatialDimensions(double value) "
  /**
   * Sets the \'spatialDimensions\' attribute of this {@link Compartment} as a double.
   * <p>
   * @param value a double indicating the number of dimensions
   * of this compartment.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Compartment::setSize(double value) "
  /**
   * Sets the \'size\' attribute (or \'volume\' in SBML Level&nbsp;1) of this
   * {@link Compartment}.
   * <p>
   * This method is identical to
   * {@link Compartment#setVolume(double value)}
   * and is provided for compatibility between
   * SBML Level&nbsp;1 and Level&nbsp;2.
   * <p>
   * @param value a <code>double</code> representing the size of this compartment
   * instance in whatever units are in effect for the compartment.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @note The attribute \'volume\' only exists by that name in SBML
   * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
   * named \'size\'.
   */
 public";


%javamethodmodifiers Compartment::setVolume(double value) "
  /**
   * Sets the \'volume\' attribute (or \'size\' in SBML Level&nbsp;2) of this
   * {@link Compartment}.
   * <p>
   * This method is identical to
   * {@link Compartment#setVolume(double value)}
   * and is provided for compatibility between SBML Level&nbsp;1 and
   * Level&nbsp;2.
   * <p>
   * @param value a <code>double</code> representing the volume of this compartment
   * instance in whatever units are in effect for the compartment.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @note The attribute \'volume\' only exists by that name in SBML
   * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
   * named \'size\'.
   */
 public";


%javamethodmodifiers Compartment::setUnits(const std::string& sid) "
  /**
   * Sets the \'units\' attribute of this {@link Compartment}.
   * <p>
   * @param sid the identifier of the defined units to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Compartment::setOutside(const std::string& sid) "
  /**
   * Sets the \'outside\' attribute of this {@link Compartment}.
   * <p>
   * @param sid the identifier of a compartment that encloses this one.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */
 public";


%javamethodmodifiers Compartment::setConstant(bool value) "
  /**
   * Sets the value of the \'constant\' attribute of this {@link Compartment}.
   * <p>
   * @param value a boolean indicating whether the size/volume of this
   * compartment should be considered constant (<code>true</code>) or variable
   * (<code>false</code>)
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Compartment::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link Compartment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Compartment::unsetCompartmentType "
  /**
   * Unsets the value of the \'compartmentType\'
   * attribute of this {@link Compartment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The \'compartmentType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   * <p>
   * @see #setCompartmentType(String sid)
   * @see #isSetCompartmentType()
   */
 public";


%javamethodmodifiers Compartment::unsetSize "
  /**
   * Unsets the value of the \'size\' attribute of this {@link Compartment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The attribute \'volume\' only exists by that name in SBML
   * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
   * named \'size\'.
   */
 public";


%javamethodmodifiers Compartment::unsetVolume "
  /**
   * Unsets the value of the \'volume\' attribute of this
   * {@link Compartment}.
   * <p>
   * In SBML Level&nbsp;1, a {@link Compartment} volume has a default value (<code>1.0</code>) and
   * therefore <em>should always be set</em>.  In Level&nbsp;2, \'size\' is
   * optional with no default value and as such may or may not be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The attribute \'volume\' only exists by that name in SBML
   * Level&nbsp;1.  In Level&nbsp;2 and above, the equivalent attribute is
   * named \'size\'.
   */
 public";


%javamethodmodifiers Compartment::unsetUnits "
  /**
   * Unsets the value of the \'units\' attribute of this {@link Compartment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Compartment::unsetOutside "
  /**
   * Unsets the value of the \'outside\' attribute of this {@link Compartment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'outside\' attribute is defined in SBML Level&nbsp;1 and
   * Level&nbsp;2, but does not exist in SBML Level&nbsp;3 Version&nbsp;1
   * Core.
   */
 public";


%javamethodmodifiers Compartment::unsetSpatialDimensions "
  /**
   * Unsets the value of the \'spatialDimensions\' attribute of this {@link Compartment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note This function is only valid for SBML Level&nbsp;3.
   */
 public";


%javamethodmodifiers Compartment::getDerivedUnitDefinition "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Compartment}\'s designated size.
   * <p>
   * Compartments in SBML have an attribute (\'units\') for declaring the
   * units of measurement intended for the value of the compartment\'s size.
   * In the absence of a value given for this attribute, the units are
   * inherited from values either defined on the enclosing {@link Model} (in SBML
   * Level&nbsp;3) or in defaults (in SBML Level&nbsp;2).  This method
   * returns a {@link UnitDefinition} object based on how this compartment\'s units
   * are interpreted according to the relevant SBML guidelines, or it
   * returns <code>null</code> if no units have been declared and no defaults are
   * defined by the relevant SBML specification.
   * <p>
   * Note that unit declarations for {@link Compartment} objects are specified in
   * terms of the <em>identifier</em> of a unit (e.g., using
   * {@link Compartment#setUnits(String sid)}), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the special SBML
   * Level&nbsp;2 unit identifiers <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>,
   * <code>\'length\'</code> or <code>\'time\'.</code>  Callers may find this useful in conjunction
   * with the helper methods provided by the {@link UnitDefinition} class for
   * comparing different {@link UnitDefinition} objects.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Compartment}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link Compartment} object has not yet been added
   * to a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return <code>null.</code>
   * <p>
   * @see #isSetUnits()
   * @see #getUnits()
   */
 public";


%javamethodmodifiers Compartment::getDerivedUnitDefinition() const "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Compartment}\'s designated size.
   * <p>
   * Compartments in SBML have an attribute (\'units\') for declaring the
   * units of measurement intended for the value of the compartment\'s size.
   * In the absence of a value given for this attribute, the units are
   * inherited from values either defined on the enclosing {@link Model} (in SBML
   * Level&nbsp;3) or in defaults (in SBML Level&nbsp;2).  This method
   * returns a {@link UnitDefinition} object based on how this compartment\'s units
   * are interpreted according to the relevant SBML guidelines, or it
   * returns <code>null</code> if no units have been declared and no defaults are
   * defined by the relevant SBML specification.
   * <p>
   * Note that unit declarations for {@link Compartment} objects are specified in
   * terms of the <em>identifier</em> of a unit (e.g., using setUnits(String sid)), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the special SBML
   * Level&nbsp;2 unit identifiers <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>,
   * <code>\'length\'</code> or <code>\'time\'.</code>  Callers may find this useful in conjunction
   * with the helper methods provided by the {@link UnitDefinition} class for
   * comparing different {@link UnitDefinition} objects.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Compartment}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link Compartment} object has not yet been added
   * to a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return <code>null.</code>
   * <p>
   * @see #isSetUnits()
   * @see #getUnits()
   */
 public";


%javamethodmodifiers Compartment::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or
   * {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Compartment::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Compartment}, is
   * always <code>\'compartment\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'compartment\'.</code>
   */
 public";


%javamethodmodifiers Compartment::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Compartment} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Compartment} object are:
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'constant\' (in SBML Level&nbsp;3 only)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers Compartment::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::isExplicitlySetSpatialDimensions() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Compartment::isExplicitlySetConstant() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfCompartments::ListOfCompartments(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfCompartments} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfCompartments::ListOfCompartments(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfCompartments} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfCompartments} object to be created.
   */
 public";


%javamethodmodifiers ListOfCompartments::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfCompartments} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfCompartments}.
   */
 public";


%javamethodmodifiers ListOfCompartments::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfCompartments::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Compartment} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfCompartments::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfCompartments}, the XML element name is <code>\'listOfCompartments\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfCompartments\'.</code>
   */
 public";


%javamethodmodifiers ListOfCompartments::get(unsigned int n) "
  /**
   * Get a {@link Compartment} from the {@link ListOfCompartments}.
   * <p>
   * @param n the index number of the {@link Compartment} to get.
   * <p>
   * @return the nth {@link Compartment} in this {@link ListOfCompartments}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartments::get "
  /**
   * Get a {@link Compartment} from the {@link ListOfCompartments}.
   * <p>
   * @param n the index number of the {@link Compartment} to get.
   * <p>
   * @return the nth {@link Compartment} in this {@link ListOfCompartments}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartments::get(const std::string& sid) "
  /**
   * Get a {@link Compartment} from the {@link ListOfCompartments}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Compartment} to get.
   * <p>
   * @return {@link Compartment} in this {@link ListOfCompartments}
   * with the given id or <code>null</code> if no such
   * {@link Compartment} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartments::get(const std::string& sid) const "
  /**
   * Get a {@link Compartment} from the {@link ListOfCompartments}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Compartment} to get.
   * <p>
   * @return {@link Compartment} in this {@link ListOfCompartments}
   * with the given id or <code>null</code> if no such
   * {@link Compartment} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartments::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfCompartments} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfCompartments::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfCompartments} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfCompartments::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the {@link ListOfCompartments}
   * in a model is (in SBML Level&nbsp;2 Version&nbsp;4) the fifth
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfCompartments::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Species "
/** 
 * LibSBML implementation of SBML\'s Species construct.
 * <p>
 * A <em>species</em> in SBML refers to a pool of entities that (a) are
 * considered indistinguishable from each other for the purposes of the
 * model, (b) participate in reactions, and (c) are located in a specific
 * <em>compartment</em>.  The SBML {@link Species} object class is intended to represent
 * these pools.
 * <p>
 * As with other major constructs in SBML, {@link Species} has a mandatory
 * attribute, \'id\', used to give the species type an identifier in the
 * model.  The identifier must be a text string conforming to the identifer
 * syntax permitted in SBML.  {@link Species} also has an optional \'name\'
 * attribute, of type <code>string.</code>  The \'id\' and \'name\' must be used
 * according to the guidelines described in the SBML specifications.
 * <p>
 * The required attribute \'compartment\' is used to identify the compartment
 * in which the species is located.  The attribute\'s value must be the
 * identifier of an existing {@link Compartment} object.  It is important to note
 * that there is no default value for the \'compartment\' attribute on
 * {@link Species}; every species in an SBML model must be assigned a compartment
 * <em>explicitly</em>.  (This also implies that every model with one or more
 * {@link Species} objects must define at least one {@link Compartment} object.)
 * <p>
 * <p>
 * <h2>The initial amount and concentration of a species</h2>
 * <p>
 * The optional attributes \'initialAmount\' and \'initialConcentration\', both
 * having a data type of <code>double</code>, can be used to set the <em>initial</em>
 * quantity of the species in the compartment where the species is located.
 * These attributes are mutually exclusive; i.e., <em>only one</em> can
 * have a value on any given instance of a {@link Species} object.  Missing
 * \'initialAmount\' and \'initialConcentration\' values implies that their
 * values either are unknown, or to be obtained from an external source, or
 * determined by an {@link InitialAssignment} or other SBML construct elsewhere in
 * the model.
 * <p>
 * A species\' initial quantity in SBML is set by the \'initialAmount\' or
 * \'initialConcentration\' attribute exactly once.  If the \'constant\'
 * attribute is <code>true</code>, then the value of the species\' quantity is fixed
 * and cannot be changed except by an {@link InitialAssignment}.  These methods
 * differ in that the \'initialAmount\' and \'initialConcentration\' attributes
 * can only be used to set the species quantity to a literal floating-point
 * number, whereas the use of an {@link InitialAssignment} object allows the value
 * to be set using an arbitrary mathematical expression (which, thanks to
 * MathML\'s expressiveness, may evaluate to a rational number).  If the
 * species\' \'constant\' attribute is <code>false</code>, the species\' quantity value
 * may be overridden by an {@link InitialAssignment} or changed by {@link AssignmentRule}
 * or {@link AlgebraicRule}, and in addition, for <em>t &gt; 0</em>, it may also be
 * changed by a {@link RateRule}, {@link Event} objects, and as a result of being a
 * reactant or product in one or more {@link Reaction} objects.  (However, some
 * constructs are mutually exclusive; see the SBML specifications for the
 * precise details.)  It is not an error to define \'initialAmount\' or
 * \'initialConcentration\' on a species and also redefine the value using an
 * {@link InitialAssignment}, but the \'initialAmount\' or \'initialConcentration\'
 * setting in that case is ignored.  The SBML specifications provide
 * additional information about the semantics of assignments, rules and
 * values for simulation time <em>t</em> &#8804; <em>0</em>.
 * <p>
 * SBML Level&nbsp;2 additionally stipulates that in cases where a species\'
 * compartment has a \'spatialDimensions\' value of <code>0</code> (zero), the species
 * cannot have a value for \'initialConcentration\' because the concepts of
 * concentration and density break down when a container has zero
 * dimensions.
 * <p>
 * <h2>The units of a species\' amount or concentration</h2>
 * <p>
 * When the attribute \'initialAmount\' is set, the unit of measurement
 * associated with the value of \'initialAmount\' is specified by the {@link Species}
 * attribute \'substanceUnits\'.  When the \'initialConcentration\' attribute
 * is set, the unit of measurement associated with this concentration value
 * is {<em>unit of amount</em>} divided by {<em>unit of size</em>}, where
 * the {<em>unit of amount</em>} is specified by the {@link Species}
 * \'substanceUnits\' attribute, and the {<em>unit of size</em>} is specified
 * by the \'units\' attribute of the {@link Compartment} object in which the species
 * is located.  Note that in either case, a unit of <em>amount</em> is
 * involved and determined by the \'substanceUnits\' attribute.  Note
 * <strong>these two attributes alone do not determine the units of the
 * species when the species identifier appears in a mathematical
 * expression</strong>; <em>that</em> aspect is determined by the attribute
 * \'hasOnlySubstanceUnits\' discussed below.
 * <p>
 * In SBML Level&nbsp;3, if the \'substanceUnits\' attribute is not set on a
 * given {@link Species} object instance, then the unit of <em>amount</em> for that
 * species is inherited from the \'substanceUnits\' attribute on the
 * enclosing {@link Model} object instance.  If that attribute on {@link Model} is not set
 * either, then the unit associated with the species\' quantity is
 * undefined.
 * <p>
 * In SBML Level&nbsp;2, if the \'substanceUnits\' attribute is not set on a
 * given {@link Species} object instance, then the unit of <em>amount</em> for that
 * species is taken from the predefined SBML unit identifier 
 * <code>\'substance\'.</code>  The value assigned to \'substanceUnits\' must be chosen from
 * one of the following possibilities: one of the base unit identifiers
 * defined in SBML, the built-in unit identifier <code>\'substance\'</code>, or the
 * identifier of a new unit defined in the list of unit definitions in the
 * enclosing {@link Model} object.  The chosen units for \'substanceUnits\' must be
 * be <code>\'dimensionless\'</code>, <code>\'mole\'</code>, <code>\'item\'</code>, <code>\'kilogram\'</code>, <code>\'gram\'</code>,
 * or units derived from these.
 * <p>
 * As noted at the beginning of this section, simply setting
 * \'initialAmount\' or \'initialConcentration\' alone does <em>not</em> determine
 * whether a species identifier represents an amount or a concentration
 * when it appears elsewhere in an SBML model.  The role of the attribute
 * \'hasOnlySubstanceUnits\' is to indicate whether the units of the species,
 * when the species identifier appears in mathematical formulas, are
 * intended to be concentration or amount.  The attribute takes on a
 * boolean value.  In SBML Level&nbsp;3, the attribute has no default value
 * and must always be set in a model; in SBML Level&nbsp;2, it has a
 * default value of <code>false.</code>
 * <p>
 * The <em>units of the species</em> are used in the following ways:
 * <ul>
<p>
 * <li> When the species\' identifier appears in a MathML formula, it
 * represents the species\' quantity, and the unit of measurement associated
 * with the quantity is as described above.
 * <p>
 * <li> The \'math\' elements of {@link AssignmentRule}, {@link InitialAssignment} and
 * {@link EventAssignment} objects referring to this species should all have the
 * same units as the unit of measurement associated with the species
 * quantity.
 * <p>
 * <li> In a {@link RateRule} object that defines the rate of change of the
 * species\' quantity, the unit associated with the rule\'s \'math\' element
 * should be equal to the unit of the species\' quantity divided by the
 * model-wide unit of <em>time</em>; in other words, {<em>unit of species
 * quantity</em>}/{<em>unit of time</em>}.
 * <p>
 * </ul>
 * <p>
 * <p>
 * <h2>The \'constant\' and \'boundaryCondition\' attributes</h2>
 * <p>
 * The {@link Species} object class has two boolean attributes named \'constant\' and
 * \'boundaryCondition\', used to indicate whether and how the quantity of
 * that species can vary during a simulation.  In SBML Level&nbsp;2 they
 * are optional; in SBML Level&nbsp;3 they are mandatory.  The following
 * table shows how to interpret the combined values of these attributes.
 * <p>
 * <center>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
<caption class=\'top-caption\'>Interpretation
of species\' <code>constant</code> and <code>boundaryCondition</code>
attributes.</caption>
 <tr>
     <th align=\'left\' valign=\'bottom\'>
       <code>constant</code><br>value
     </th>
     <th align=\'left\' valign=\'bottom\'>
       <code>boundaryCondition</code><br>value
     </th>
     <th align=\'left\' valign=\'bottom\'>
       Can have<br>assignment<br>or rate rule?
     </th>
     <th align=\'left\' valign=\'bottom\'>
       Can be<br>reactant<br>or product?
     </th>
     <th align=\'left\' valign=\'bottom\'>
       {@link Species}\' quantity<br>can be changed by
     </th>
 </tr>
 <tr>
     <td><code>true</code></td>
     <td><code>true</code></td>
     <td>no</td>
     <td>yes</td>
     <td>(never changes)</td>
 </tr>
 <tr>
     <td><code>false</code></td>
     <td><code>true</code></td>
     <td>yes</td>
     <td>yes</td>
     <td>rules and events</td>
 </tr>
 <tr>
     <td><code>true</code></td>
     <td><code>false</code></td>
     <td>no</td>
     <td>no</td>
     <td>(never changes)</td>
 </tr>
 <tr>
     <td><code>false</code></td>
     <td><code>false</code></td>
     <td>yes</td>
     <td>yes</td>
     <td>reactions <em>or</em> rules (but not both at the same time), and events</td>
 </tr>
</table>
</center>

 * <p>
 * By default, when a species is a product or reactant of one or more
 * reactions, its quantity is determined by those reactions.  In SBML, it
 * is possible to indicate that a given species\' quantity is <em>not</em>
 * determined by the set of reactions even when that species occurs as a
 * product or reactant; i.e., the species is on the <em>boundary</em> of
 * the reaction system, and its quantity is not determined by the
 * reactions.  The boolean attribute \'boundaryCondition\' can be used to
 * indicate this.  A value of <code>false</code> indicates that the species <em>is</em>
 * part of the reaction system.  In SBML Level&nbsp;2, the attribute has a
 * default value of <code>false</code>, while in SBML Level&nbsp;3, it has no
 * default.
 * <p>
 * The \'constant\' attribute indicates whether the species\' quantity can be
 * changed at all, regardless of whether by reactions, rules, or constructs
 * other than {@link InitialAssignment}.  A value of <code>false</code> indicates that the
 * species\' quantity can be changed.  (This is also a common value because
 * the purpose of most simulations is precisely to calculate changes in
 * species quantities.)  In SBML Level&nbsp;2, the attribute has a default
 * value of <code>false</code>, while in SBML Level&nbsp;3, it has no default.  Note
 * that the initial quantity of a species can be set by an
 * {@link InitialAssignment} irrespective of the value of the \'constant\' attribute.
 * <p>
 * In practice, a \'boundaryCondition\' value of <code>true</code> means a differential
 * equation derived from the reaction definitions should not be generated
 * for the species.  However, the species\' quantity may still be changed by
 * {@link AssignmentRule}, {@link RateRule}, {@link AlgebraicRule}, {@link Event}, and {@link InitialAssignment}
 * constructs if its \'constant\' attribute is <code>false.</code>  Conversely, if the
 * species\' \'constant\' attribute is <code>true</code>, then its value cannot be
 * changed by anything except {@link InitialAssignment}.
 * <p>
 * A species having \'boundaryCondition\'=<code>false</code> and \'constant\'=<code>false</code>
 * can appear as a product and/or reactant of one or more reactions in the
 * model.  If the species is a reactant or product of a reaction, it must
 * <em>not</em> also appear as the target of any {@link AssignmentRule} or {@link RateRule}
 * object in the model.  If instead the species has \'boundaryCondition\'=
 * <code>false</code> and \'constant\'=<code>true</code>, then it cannot appear as a reactant or
 * product, or as the target of any {@link AssignmentRule}, {@link RateRule} or
 * {@link EventAssignment} object in the model.
 * <p>
 * <p>
 * <h2>The conversionFactor attribute in SBML Level&nbsp;3</h2>
 * <p>
 * In SBML Level&nbsp;3, {@link Species} has an additional optional attribute,
 * \'conversionFactor\', that defines a conversion factor that applies to a
 * particular species.  The value must be the identifier of a {@link Parameter}
 * object instance defined in the model.  That {@link Parameter} object must be a
 * constant, meaning its \'constant\' attribute must be set to <code>true.</code>
 * If a given {@link Species} object definition defines a value for its
 * \'conversionFactor\' attribute, it takes precedence over any factor
 * defined by the {@link Model} object\'s \'conversionFactor\' attribute.
 * <p>
 * The unit of measurement associated with a species\' quantity can be
 * different from the unit of extent of reactions in the model.  SBML
 * Level&nbsp;3 avoids implicit unit conversions by providing an explicit
 * way to indicate any unit conversion that might be required.  The use of
 * a conversion factor in computing the effects of reactions on a species\'
 * quantity is explained in detail in the SBML Level&nbsp;3 specification
 * document.  Because the value of the \'conversionFactor\' attribute is the
 * identifier of a {@link Parameter} object, and because parameters can have units
 * attached to them, the transformation from reaction extent units to
 * species units can be completely specified using this approach.
 * <p>
 * Note that the unit conversion factor is <strong>only applied when
 * calculating the effect of a reaction on a species</strong>.  It is not
 * used in any rules or other SBML constructs that affect the species, and
 * it is also not used when the value of the species is referenced in a
 * mathematical expression.
 * <p>
 * <p>
 * <h2>The speciesType attribute in SBML Level&nbsp;2 Versions&nbsp;2&ndash;4</h2>
 * <p>
 * In SBML Level&nbsp;2 Versions&nbsp;2&ndash;4, each species in a model
 * may optionally be designated as belonging to a particular species type.
 * The optional attribute \'speciesType\' is used to identify the species
 * type of the chemical entities that make up the pool represented by the
 * {@link Species} objects.  The attribute\'s value must be the identifier of an
 * existing {@link SpeciesType} object in the model.  If the \'speciesType\'
 * attribute is not present on a particular species definition, it means
 * the pool contains chemical entities of a type unique to that pool; in
 * effect, a virtual species type is assumed for that species, and no other
 * species can belong to that species type.  The value of \'speciesType\'
 * attributes on species have no effect on the numerical interpretation of
 * a model; simulators and other numerical analysis software may ignore
 * \'speciesType\' attributes.
 * <p>
 * There can be only one species of a given species type in any given
 * compartment of a model.  More specifically, for all {@link Species} objects
 * having a value for the \'speciesType\' attribute, the pair
 * <center>
 * (\'speciesType\' attribute value, \'compartment\' attribute value)
 * </center>
 * <p>
 * must be unique across the set of all {@link Species} object in a model.
 * <p>
 * <p>
 * <h2>The spatialSizeUnits attribute in SBML Level&nbsp;2 Versions&nbsp;1&ndash;2</h2>
 * <p>
 * In versions of SBML Level&nbsp;2 before Version&nbsp;3, the class
 * {@link Species} included an attribute called \'spatialSizeUnits\', which allowed
 * explicitly setting the units of size for initial concentration.  LibSBML
 * retains this attribute for compatibility with older definitions of
 * Level&nbsp;2, but its use is strongly discouraged because many software
 * tools do no properly interpret this unit declaration and it is
 * incompatible with all SBML specifications after Level&nbsp;2
 * Version&nbsp;3.
 * <p>
 * <p>
 * <h2>Additional considerations for interpreting the numerical value of a species</h2>
 * <p>
 * {@link Species} are unique in SBML in that they have a kind of duality: a
 * species identifier may stand for either substance amount (meaning, a
 * count of the number of individual entities) or a concentration or
 * density (meaning, amount divided by a compartment size).  The previous
 * sections explain the meaning of a species identifier when it is
 * referenced in a mathematical formula or in rules or other SBML
 * constructs; however, it remains to specify what happens to a species
 * when the compartment in which it is located changes in size.
 * <p>
 * When a species definition has a \'hasOnlySubstanceUnits\' attribute value
 * of <code>false</code> and the size of the compartment in which the species is
 * located changes, the default in SBML is to assume that it is the
 * concentration that must be updated to account for the size change.  This
 * follows from the principle that, all other things held constant, if a
 * compartment simply changes in size, the size change does not in itself
 * cause an increase or decrease in the number of entities of any species
 * in that compartment.  In a sense, the default is that the <em>amount</em> of
 * a species is preserved across compartment size changes.  Upon such size
 * changes, the value of the concentration or density must be recalculated
 * from the simple relationship <em>concentration = amount / size</em> if
 * the value of the concentration is needed (for example, if the species
 * identifier appears in a mathematical formula or is otherwise referenced
 * in an SBML construct).  There is one exception: if the species\' quantity
 * is determined by an {@link AssignmentRule}, {@link RateRule}, {@link AlgebraicRule}, or an
 * {@link EventAssignment} and the species has a \'hasOnlySubstanceUnits\' attribute
 * value of <code>false</code>, it means that the <em>concentration</em> is assigned
 * by the rule or event; in that case, the <em>amount</em> must be
 * calculated when the compartment size changes.  (Events also require
 * additional care in this situation, because an event with multiple
 * assignments could conceivably reassign both a species quantity and a
 * compartment size simultaneously.  Please refer to the SBML
 * specifications for the details.)
 * <p>
 * Note that the above only matters if a species has a
 * \'hasOnlySubstanceUnits\' attribute value of <code>false</code>, meaning that the
 * species identifier refers to a concentration wherever the identifier
 * appears in a mathematical formula.  If instead the attribute\'s value is
 * <code>true</code>, then the identifier of the species <em>always</em> stands for
 * an amount wherever it appears in a mathematical formula or is referenced
 * by an SBML construct.  In that case, there is never a question about
 * whether an assignment or event is meant to affect the amount or
 * concentration: it is always the amount.
 * <p>
 * A particularly confusing situation can occur when the species has
 * \'constant\' attribute value of <code>true</code> in combination with a
 * \'hasOnlySubstanceUnits\' attribute value of <code>false.</code>  Suppose this
 * species is given a value for \'initialConcentration\'.  Does a \'constant\'
 * value of <code>true</code> mean that the concentration is held constant if the
 * compartment size changes?  No; it is still the amount that is kept
 * constant across a compartment size change.  The fact that the species
 * was initialized using a concentration value is irrelevant.
 * <p>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfSpecies "
/** 
 * LibSBML implementation of SBML Level&nbsp;2\'s ListOfSpecies construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Species::Species(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Species} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Species}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Species}
   * <p>
   * @note Upon the addition of a {@link Species} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addSpecies(Species s)}), the SBML Level, SBML Version and XML
   * namespace of the document <em>override</em> the values used when creating
   * the {@link Species} object via this constructor.  This is necessary to ensure
   * that an SBML document is a consistent structure.  Nevertheless, the
   * ability to supply the values at the time of creation of a {@link Species} is
   * an important aid to producing valid SBML.  Knowledge of the intented
   * SBML Level and Version determine whether it is valid to assign a
   * particular value to an attribute, or whether it is valid to add an
   * object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Species::Species(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Species} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link Species} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor.  Setting the identifier can be accomplished using the
   * method {@link Species#setId(String id)}.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Species} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addSpecies(Species s)}), the SBML XML namespace of the document 
   * <em>overrides</em> the value used when creating the {@link Species} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link Species} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Species::Species(const Species& orig) "
  /**
  * Copy constructor; creates a copy of this {@link Species} object.
  */
 public";


%javamethodmodifiers Species::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Species}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers Species::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Species} object.
   * <p>
   * @return a (deep) copy of this {@link Species} object.
   */
 public";


%javamethodmodifiers Species::initDefaults "
  /**
   * Initializes the fields of this {@link Species} object to \'typical\' defaults
   * values.
   * <p>
   * The SBML {@link Species} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets \'boundaryCondition\' to <code>false</code>
   * <li> Sets \'constant\' to <code>false</code>
   * <li> sets \'hasOnlySubstanceUnits\' to <code>false</code>
   * <li> (Applies to Level&nbsp;3 models only) Sets attribute \'substanceUnits\' to <code>mole</code>
   * </ul>
   */
 public";


%javamethodmodifiers Species::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link Species} object.
   * <p>
   * @return the id of this {@link Species} object.
   */
 public";


%javamethodmodifiers Species::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link Species} object.
   * <p>
   * @return the name of this {@link Species} object.
   */
 public";


%javamethodmodifiers Species::getSpeciesType() const "
  /**
   * Get the type of this {@link Species} object object.
   * <p>
   * @return the value of the \'speciesType\' attribute of this
   * {@link Species} as a string.
   * <p>
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Species::getCompartment() const "
  /**
   * Get the compartment in which this species is located.
   * <p>
   * The compartment is designated by its identifier.
   * <p>
   * @return the value of the \'compartment\' attribute of this {@link Species}
   * object, as a string.
   */
 public";


%javamethodmodifiers Species::getInitialAmount() const "
  /**
   * Get the value of the \'initialAmount\' attribute.
   * <p>
   * @return the initialAmount of this {@link Species}, as a float-point number.
   */
 public";


%javamethodmodifiers Species::getInitialConcentration() const "
  /**
   * Get the value of the \'initialConcentration\' attribute.
   * <p>
   * @return the initialConcentration of this {@link Species},, as a float-point
   * number.
   * <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::getSubstanceUnits() const "
  /**
   * Get the value of the \'substanceUnits\' attribute.
   * <p>
   * @return the value of the \'substanceUnits\' attribute of this {@link Species},
   * as a string.  An empty string indicates that no units have been
   * assigned.
   * <p>
   * @note There is an important distinction to be made between <em>no units
assigned</em>, and assuming a value without units has any specific unit
such as <code>dimensionless</code>.  In SBML, default units are never
attributed to numbers, and numbers without units are not automatically
assumed to have the unit <code>dimensionless</code>.  Please consult the
relevant SBML specification document for a more in-depth explanation of
this topic and the SBML unit system.

   * <p>
   * @see #isSetSubstanceUnits()
   * @see #setSubstanceUnits(String sid)
   */
 public";


%javamethodmodifiers Species::getSpatialSizeUnits() const "
  /**
   * Get the value of the \'spatialSizeUnits\' attribute.
   * <p>
   * @return the value of the \'spatialSizeUnits\' attribute of this {@link Species}
   * object, as a string.
   * <p>
   * @warning In versions of SBML Level&nbsp;2 before Version&nbsp;3, the
   * class {@link Species} included an attribute called \'spatialSizeUnits\', which
   * allowed explicitly setting the units of size for initial
   * concentration.  This attribute was removed in SBML Level&nbsp;2
   * Version&nbsp;3.  LibSBML retains this attribute for compatibility with
   * older definitions of Level&nbsp;2, but its use is strongly discouraged
   * because it is incompatible with Level&nbsp;2 Version&nbsp;3 and
   * Level&nbsp;2 Version&nbsp;4.
   */
 public";


%javamethodmodifiers Species::getUnits() const "
  /**
   * Get the value of the \'units\' attribute.
   * <p>
   * @return the units of this {@link Species} (L1 only).
   * <p>
   * @note The \'units\' attribute is defined only in SBML Level&nbsp;1.  In
   * SBML Level&nbsp;2 and Level&nbsp;3, it has been replaced by a
   * combination of \'substanceUnits\' and the units of the {@link Compartment}
   * object in which a species is located.  In SBML Level&nbsp;2
   * Versions&nbsp;1&ndash;2, an additional attribute \'spatialSizeUnits\'
   * helps determine the units of the species quantity, but this attribute
   * was removed in later versions of SBML Level&nbsp;2.
   */
 public";


%javamethodmodifiers Species::getHasOnlySubstanceUnits() const "
  /**
   * Get the value of the \'hasOnlySubstanceUnits\' attribute.
   * <p>
   * @return <code>true</code> if this {@link Species}\' \'hasOnlySubstanceUnits\' attribute
   * value is nonzero, <code>false</code> otherwise.
   * <p>
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::getBoundaryCondition() const "
  /**
   * Get the value of the \'boundaryCondition\' attribute.
   * <p>
   * @return <code>true</code> if this {@link Species}\' \'boundaryCondition\' attribute value
   * is nonzero, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::getCharge() const "
  /**
   * Get the value of the \'charge\' attribute.
   * <p>
   * @return the charge of this {@link Species} object.
   * <p>
   * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
   * attribute on {@link Species} is deprecated and in SBML Level&nbsp;3 it does
   * not exist at all.  Its use strongly discouraged.  Its presence is
   * considered a misfeature in earlier definitions of SBML because its
   * implications for the mathematics of a model were never defined, and in
   * any case, no known modeling system ever used it.  Instead, models take
   * account of charge values directly in their definitions of species by
   * (for example) having separate species identities for the charged and
   * uncharged versions of the same species.  This allows the condition to
   * affect model mathematics directly.  LibSBML retains this method for
   * easier compatibility with SBML Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::getConstant() const "
  /**
   * Get the value of the \'constant\' attribute.
   * <p>
   * @return <code>true</code> if this {@link Species}\'s \'constant\' attribute value is
   * nonzero, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::getConversionFactor() const "
  /**
   * Get the value of the \'conversionFactor\' attribute.
   * <p>
   * @return the conversionFactor of this {@link Species}, as a string.
   * <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */
 public";


%javamethodmodifiers Species::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::isSetSpeciesType() const "
  /**
   * Predicate returning <code>true</code> if this {@link Species} object\'s
   * \'speciesType\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'speciesType\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Species::isSetCompartment() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'compartment\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'compartment\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::isSetInitialAmount() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'initialAmount\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'initialAmount\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note In SBML Level&nbsp;1, {@link Species}\' \'initialAmount\' is required and
   * therefore <em>should always be set</em>.  (However, in Level&nbsp;1, the
   * attribute has no default value either, so this method will not return
   * <code>true</code> until a value has been assigned.)  In SBML Level&nbsp;2,
   * \'initialAmount\' is optional and as such may or may not be set.
   */
 public";


%javamethodmodifiers Species::isSetInitialConcentration() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'initialConcentration\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'initialConcentration\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::isSetSubstanceUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'substanceUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'substanceUnits\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::isSetSpatialSizeUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'spatialSizeUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'spatialSizeUnits\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @warning In versions of SBML Level~2 before Version&nbsp;3, the class
   * {@link Species} included an attribute called \'spatialSizeUnits\', which allowed
   * explicitly setting the units of size for initial concentration.  This
   * attribute was removed in SBML Level&nbsp;2 Version&nbsp;3.  LibSBML
   * retains this attribute for compatibility with older definitions of
   * Level&nbsp;2, but its use is strongly discouraged because it is
   * incompatible with Level&nbsp;2 Version&nbsp;3 and Level&nbsp;2 Version&nbsp;4.
   */
 public";


%javamethodmodifiers Species::isSetUnits() const "
  /**
   * Predicate returning <code>true</code> if
   * this {@link Species} object\'s \'units\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'units\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::isSetCharge() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'charge\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'charge\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
   * attribute on {@link Species} in SBML is deprecated and in SBML Level&nbsp;3 it
   * does not exist at all.  Its use strongly discouraged.  Its presence is
   * considered a misfeature in earlier definitions of SBML because its
   * implications for the mathematics of a model were never defined, and in
   * any case, no known modeling system ever used it.  Instead, models take
   * account of charge values directly in their definitions of species by
   * (for example) having separate species identities for the charged and
   * uncharged versions of the same species.  This allows the condition to
   * affect model mathematics directly.  LibSBML retains this method for
   * easier compatibility with SBML Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::isSetConversionFactor() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'conversionFactor\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'conversionFactor\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */
 public";


%javamethodmodifiers Species::isSetBoundaryCondition() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'boundaryCondition\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'boundaryCondition\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Species::isSetHasOnlySubstanceUnits() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'hasOnlySubstanceUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'hasOnlySubstanceUnits\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::isSetConstant() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Species} object\'s \'constant\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'constant\' attribute of this {@link Species} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link Species} object.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link Species}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Species::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link Species} object.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link Species}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Species::setSpeciesType(const std::string& sid) "
  /**
   * Sets the \'speciesType\' attribute of this {@link Species} object.
   * <p>
   * @param sid the identifier of a {@link SpeciesType} object defined elsewhere
   * in this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The \'speciesType\' attribute is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Species::setCompartment(const std::string& sid) "
  /**
   * Sets the \'compartment\' attribute of this {@link Species} object.
   * <p>
   * @param sid the identifier of a {@link Compartment} object defined elsewhere
   * in this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Species::setInitialAmount(double value) "
  /**
   * Sets the \'initialAmount\' attribute of this {@link Species} and marks the field
   * as set.
   * <p>
   * This method also unsets the \'initialConcentration\' attribute.
   * <p>
   * @param value the value to which the \'initialAmount\' attribute should
   * be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers Species::setInitialConcentration(double value) "
  /**
   * Sets the \'initialConcentration\' attribute of this {@link Species} and marks
   * the field as set.
   * <p>
   * This method also unsets the \'initialAmount\' attribute.
   * <p>
   * @param value the value to which the \'initialConcentration\' attribute
   * should be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::setSubstanceUnits(const std::string& sid) "
  /**
   * Sets the \'substanceUnits\' attribute of this {@link Species} object.
   * <p>
   * @param sid the identifier of the unit to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Species::setSpatialSizeUnits(const std::string& sid) "
  /**
   * (SBML Level&nbsp;2 Versions&nbsp;1&ndash;2) Sets the \'spatialSizeUnits\' attribute of this {@link Species} object.
   * <p>
   * @param sid the identifier of the unit to use.
   * <p>
   * @warning In versions of SBML Level~2 before Version&nbsp;3, the class
   * {@link Species} included an attribute called \'spatialSizeUnits\', which allowed
   * explicitly setting the units of size for initial concentration.  This
   * attribute was removed in SBML Level&nbsp;2 Version&nbsp;3.  LibSBML
   * retains this attribute for compatibility with older definitions of
   * Level&nbsp;2, but its use is strongly discouraged because it is
   * incompatible with Level&nbsp;2 Version&nbsp;3 and Level&nbsp;2 Version&nbsp;4.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Species::setUnits(const std::string& sname) "
  /**
   * (SBML Level&nbsp;1 only) Sets the units of this {@link Species} object.
   * <p>
   * @param sname the identifier of the unit to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
  */
 public";


%javamethodmodifiers Species::setHasOnlySubstanceUnits(bool value) "
  /**
   * Sets the \'hasOnlySubstanceUnits\' attribute of this {@link Species} object.
   * <p>
   * @param value boolean value for the \'hasOnlySubstanceUnits\' attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The \'hasOnlySubstanceUnits\' attribute does not exist in SBML
   * Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::setBoundaryCondition(bool value) "
  /**
   * Sets the \'boundaryCondition\' attribute of this {@link Species} object.
   * <p>
   * @param value boolean value for the \'boundaryCondition\' attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers Species::setCharge(int value) "
  /**
   * Sets the \'charge\' attribute of this {@link Species} object.
   * <p>
   * @param value an integer to which to set the \'charge\' to.
   * <p>
   * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
   * attribute on {@link Species} in SBML is deprecated and its use strongly
   * discouraged, and it does not exist in SBML Level&nbsp;3 at all.  Its
   * presence is considered a misfeature in earlier definitions of SBML
   * because its implications for the mathematics of a model were never
   * defined, and in any case, no known modeling system ever used it.
   * Instead, models take account of charge values directly in their
   * definitions of species by (for example) having separate species
   * identities for the charged and uncharged versions of the same species.
   * This allows the condition to affect model mathematics directly.
   * LibSBML retains this method for easier compatibility with SBML
   * Level&nbsp;1.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Species::setConstant(bool value) "
  /**
   * Sets the \'constant\' attribute of this {@link Species} object.
   * <p>
   * @param value a boolean value for the \'constant\' attribute
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attribute \'constant\' is only available in SBML Levels&nbsp;2
   * and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::setConversionFactor(const std::string& sid) "
  /**
   * Sets the value of the \'conversionFactor\' attribute of this {@link Species} object.
   * <p>
   * The string in <code>sid</code> is copied.
   * <p>
   * @param sid the new conversionFactor for the {@link Species}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */
 public";


%javamethodmodifiers Species::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Species::unsetSpeciesType "
  /**
   * Unsets the \'speciesType\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The attribute \'speciesType\' is only available in SBML
   * Level&nbsp;2 Versions&nbsp;2&ndash;4.
   */
 public";


%javamethodmodifiers Species::unsetInitialAmount "
  /**
   * Unsets the \'initialAmount\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Species::unsetInitialConcentration "
  /**
   * Unsets the \'initialConcentration\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The attribute \'initialConcentration\' is only available in SBML
   * Level&nbsp;2 and&nbsp;3.  It does not exist on {@link Species} in Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::unsetSubstanceUnits "
  /**
   * Unsets the \'substanceUnits\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Species::unsetSpatialSizeUnits "
  /**
   * Unsets the \'spatialSizeUnits\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @warning In versions of SBML Level~2 before Version&nbsp;3, the class
   * {@link Species} included an attribute called \'spatialSizeUnits\', which allowed
   * explicitly setting the units of size for initial concentration.  This
   * attribute was removed in SBML Level&nbsp;2 Version&nbsp;3.  LibSBML
   * retains this attribute for compatibility with older definitions of
   * Level&nbsp;2, but its use is strongly discouraged because it is
   * incompatible with Level&nbsp;2 Version&nbsp;3 and Level&nbsp;2 Version&nbsp;4.
   */
 public";


%javamethodmodifiers Species::unsetUnits "
  /**
   * Unsets the \'units\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Species::unsetCharge "
  /**
   * Unsets the \'charge\' attribute
   * value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note Beginning in SBML Level&nbsp;2 Version&nbsp;2, the \'charge\'
   * attribute on {@link Species} in SBML is deprecated and its use strongly
   * discouraged, and it does not exist in SBML Level&nbsp;3 at all.  Its
   * presence is considered a misfeature in earlier definitions of SBML
   * because its implications for the mathematics of a model were never
   * defined, and in any case, no known modeling system ever used it.
   * Instead, models take account of charge values directly in their
   * definitions of species by (for example) having separate species
   * identities for the charged and uncharged versions of the same species.
   * This allows the condition to affect model mathematics directly.
   * LibSBML retains this method for easier compatibility with SBML
   * Level&nbsp;1.
   */
 public";


%javamethodmodifiers Species::unsetConversionFactor "
  /**
   * Unsets the \'conversionFactor\' attribute value of this {@link Species} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'conversionFactor\' attribute was introduced in SBML
   * Level&nbsp;3.  It does not exist on {@link Species} in SBML Levels&nbsp;1
   * and&nbsp;2.
   */
 public";


%javamethodmodifiers Species::getDerivedUnitDefinition "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Species}\' amount or concentration.
   * <p>
   * {@link Species} in SBML have an attribute (\'substanceUnits\') for declaring the
   * units of measurement intended for the species\' amount or concentration
   * (depending on which one applies).  In the absence of a value given for
   * \'substanceUnits\', the units are taken from the enclosing {@link Model}\'s
   * definition of <code>\'substance\'</code> or <code>\'substance\'</code>/<em>(size of the
   * compartment)</em> in which the species is located, or finally, if
   * these are not redefined by the {@link Model}, the relevant SBML default units
   * for those quantities.  Following that procedure, the method
   * {@link Species#getDerivedUnitDefinition()}
   * returns a {@link UnitDefinition} based on the
   * interpreted units of this species\'s amount or concentration.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * Note also that unit declarations for {@link Species} are in terms of the 
   * <em>identifier</em> of a unit, but this method returns a {@link UnitDefinition} object,
   * not a unit identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  Callers may find this particularly useful when used
   * in conjunction with the helper methods on {@link UnitDefinition} for comparing
   * different {@link UnitDefinition} objects.
   * <p>
   * In SBML Level&nbsp;2 specifications prior to Version&nbsp;3, {@link Species}
   * includes an additional attribute named \'spatialSizeUnits\', which
   * allows explicitly setting the units of size for initial concentration.
   * The {@link Species#getDerivedUnitDefinition()}
   * takes this into account for models
   * expressed in SBML Level&nbsp;2 Versions&nbsp;1 and&nbsp;2.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Species}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #getSubstanceUnits()
   */
 public";


%javamethodmodifiers Species::getDerivedUnitDefinition() const "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Species}\' amount or concentration.
   * <p>
   * {@link Species} in SBML have an attribute (\'substanceUnits\') for declaring the
   * units of measurement intended for the species\' amount or concentration
   * (depending on which one applies).  In the absence of a value given for
   * \'substanceUnits\', the units are taken from the enclosing {@link Model}\'s
   * definition of <code>\'substance\'</code> or <code>\'substance\'</code>/<em>(size of the
   * compartment)</em> in which the species is located, or finally, if
   * these are not redefined by the {@link Model}, the relevant SBML default units
   * for those quantities.  Following that procedure, the method
   * {@link Species#getDerivedUnitDefinition()}
   * returns a {@link UnitDefinition} based on the
   * interpreted units of this species\'s amount or concentration.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * Note also that unit declarations for {@link Species} are in terms of the 
   * <em>identifier</em> of a unit, but this method returns a {@link UnitDefinition} object,
   * not a unit identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  Callers may find this particularly useful when used
   * in conjunction with the helper methods on {@link UnitDefinition} for comparing
   * different {@link UnitDefinition} objects.
   * <p>
   * In SBML Level&nbsp;2 specifications prior to Version&nbsp;3, {@link Species}
   * includes an additional attribute named \'spatialSizeUnits\', which
   * allows explicitly setting the units of size for initial concentration.
   * The {@link Species#getDerivedUnitDefinition()}
   * takes this into account for models
   * expressed in SBML Level&nbsp;2 Versions&nbsp;1 and&nbsp;2.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Species}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #getSubstanceUnits()
   */
 public";


%javamethodmodifiers Species::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Species::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Species}, is
   * always <code>\'species\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'species\'.</code>
   */
 public";


%javamethodmodifiers Species::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Species} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Species} object are:
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'compartment\'
   * <li> \'initialAmount\' (required in SBML Level&nbsp;1 only; optional otherwise)
   * <li> \'hasOnlySubstanceUnits\' (required in SBML Level&nbsp;3; optional in SBML Level&nbsp;2)
   * <li> \'boundaryCondition\' (required in SBML Level&nbsp;3; optional in Levels&nbsp;1 and&nbsp;2)
   * <li> \'constant\' (required in SBML Level&nbsp;3; optional in SBML Level&nbsp;2)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers Species::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::isExplicitlySetBoundaryCondition() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::isExplicitlySetConstant() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Species::isExplicitlySetHasOnlySubsUnits() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfSpecies::ListOfSpecies(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfSpecies} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfSpecies::ListOfSpecies(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfSpecies} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfSpecies} object to be created.
   */
 public";


%javamethodmodifiers ListOfSpecies::clone() const "
  /**
   * Creates and returns a deep copy of this ListOfSpeciess instance.
   * <p>
   * @return a (deep) copy of this ListOfSpeciess.
   */
 public";


%javamethodmodifiers ListOfSpecies::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfSpecies::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Species} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfSpecies::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For ListOfSpeciess, the XML element name is <code>\'listOfSpeciess\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfSpeciess\'.</code>
   */
 public";


%javamethodmodifiers ListOfSpecies::get(unsigned int n) "
  /**
   * Get a {@link Species} from the {@link ListOfSpecies}.
   * <p>
   * @param n the index number of the {@link Species} to get.
   * <p>
   * @return the nth {@link Species} in this {@link ListOfSpecies}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpecies::get "
  /**
   * Get a {@link Species} from the {@link ListOfSpecies}.
   * <p>
   * @param n the index number of the {@link Species} to get.
   * <p>
   * @return the nth {@link Species} in this {@link ListOfSpecies}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpecies::get(const std::string& sid) "
  /**
   * Get a {@link Species} from the {@link ListOfSpecies}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Species} to get.
   * <p>
   * @return {@link Species} in this {@link ListOfSpecies}
   * with the given id or <code>null</code> if no such
   * {@link Species} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpecies::get(const std::string& sid) const "
  /**
   * Get a {@link Species} from the {@link ListOfSpecies}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Species} to get.
   * <p>
   * @return {@link Species} in this {@link ListOfSpecies}
   * with the given id or <code>null</code> if no such
   * {@link Species} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpecies::remove(unsigned int n) "
  /**
   * Removes the nth item from this ListOfSpeciess items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpecies::remove(const std::string& sid) "
  /**
   * Removes item in this ListOfSpeciess items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfSpecies::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the ListOfSpeciess in
   * a model is (in SBML Level&nbsp;2 Version&nbsp;4) the sixth
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfSpecies::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Parameter "
/** 
 * LibSBML implementation of SBML\'s Parameter construct.
 * <p>
 * A {@link Parameter} is used in SBML to define a symbol associated with a value;
 * this symbol can then be used in mathematical formulas in a model.  By
 * default, parameters have constant value for the duration of a
 * simulation, and for this reason are called <em>parameters</em> instead of 
 * <em>variables</em> in SBML, although it is crucial to understand that <em>SBML
 * parameters represent both concepts</em>.  Whether a given SBML
 * parameter is intended to be constant or variable is indicated by the
 * value of its \'constant\' attribute.
 * <p>
 * SBML\'s {@link Parameter} has a required attribute, \'id\', that gives the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * \'name\' attribute of type <code>string.</code>  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 * <p>
 * The optional attribute \'value\' determines the value (of type <code>double</code>)
 * assigned to the parameter.  A missing value for \'value\' implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute \'units\'.  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 * <ul>
 * <p>
 * <li> In SBML Level&nbsp;3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing {@link Model} object (unlike the case for, e.g.,
 * {@link Species} and {@link Compartment}).
 * <p>
 * <li> In SBML Level&nbsp;2, the value assigned to the parameter\'s \'units\'
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers <code>\'substance\'</code>, <code>\'time\'</code>, <code>\'volume\'</code>, <code>\'area\'</code> or 
 * <code>\'length\'</code>; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing {@link Model} structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for parameters.
 * </ul>
 * <p>
 * The {@link Parameter} structure has another boolean attribute named \'constant\'
 * that is used to indicate whether the parameter\'s value can vary during a
 * simulation.  (In SBML Level&nbsp;3, the attribute is mandatory and must
 * be given a value; in SBML Levels below Level&nbsp;3, the attribute is
 * optional.)  A value of <code>true</code> indicates the parameter\'s value cannot be
 * changed by any construct except {@link InitialAssignment}.  Conversely, if the
 * value of \'constant\' is <code>false</code>, other constructs in SBML, such as rules
 * and events, can change the value of the parameter.
 * <p>
 * SBML Level&nbsp;3 uses a separate object class, {@link LocalParameter}, for
 * parameters that are local to a {@link Reaction}\'s {@link KineticLaw}.  In Levels prior
 * to SBML Level&nbsp;3, the {@link Parameter} class is used both for definitions
 * of global parameters, as well as reaction-local parameters stored in a
 * list within {@link KineticLaw} objects.  {@link Parameter} objects that are local to a
 * reaction (that is, those defined within the {@link KineticLaw} structure of a
 * {@link Reaction}) cannot be changed by rules and therefore are <em>implicitly
 * always constant</em>; consequently, in SBML Level&nbsp;2, parameter
 * definitions within {@link Reaction} structures should <em>not</em> have their
 * \'constant\' attribute set to <code>false.</code>
 * <p>
 * What if a global parameter has its \'constant\' attribute set to <code>false</code>,
 * but the model does not contain any rules, events or other constructs
 * that ever change its value over time?  Although the model may be
 * suspect, this situation is not strictly an error.  A value of <code>false</code>
 * for \'constant\' only indicates that a parameter <em>can</em> change value, not
 * that it <em>must</em>.
 * <p>
 * As with all other major SBML components, {@link Parameter} is derived from
 * {@link SBase}, and the methods defined on {@link SBase} are available on {@link Parameter}.
 * <p>
 * @note The use of the term <em>parameter</em> in SBML sometimes leads to
 * confusion among readers who have a particular notion of what something
 * called \'parameter\' should be.  It has been the source of heated debate,
 * but despite this, no one has yet found an adequate replacement term that
 * does not have different connotations to different people and hence leads
 * to confusion among <em>some</em> subset of users.  Perhaps it would have been
 * better to have two constructs, one called <em>constants</em> and the other
 * called <em>variables</em>.  The current approach in SBML is simply more
 * parsimonious, using a single {@link Parameter} construct with the boolean flag
 * \'constant\' indicating which flavor it is.  In any case, readers are
 * implored to look past their particular definition of a <em>parameter</em> and
 * simply view SBML\'s {@link Parameter} as a single mechanism for defining both
 * constants and (additional) variables in a model.  (We write 
 * <em>additional</em> because the species in a model are usually considered to be
 * the central variables.)  After all, software tools are not required to
 * expose to users the actual names of particular SBML constructs, and
 * thus tools can present to their users whatever terms their designers
 * feel best matches their target audience.
 * <p>
 * @see ListOfParameters
 * @see ListOfParameters
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfParameters "
/** 
 * LibSBML implementation of SBML\'s ListOfParameters construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Parameter::Parameter(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Parameter} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Parameter}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Parameter}
   * <p>
   * @note Upon the addition of a {@link Parameter} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addParameter(Parameter p)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link Parameter} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link Parameter} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Parameter::Parameter(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Parameter} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link Parameter} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor if no identifier is provided as an argument.  Setting the
   * identifier can be accomplished using the method
   * setId(String id).
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Parameter} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addParameter(Parameter p)}), the SBML XML namespace of the
   * document <em>overrides</em> the value used when creating the {@link Parameter}
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link Parameter} is an
   * important aid to producing valid SBML.  Knowledge of the intented SBML
   * Level and Version determine whether it is valid to assign a particular
   * value to an attribute, or whether it is valid to add an object to an
   * existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Parameter::Parameter(const Parameter& orig) "
  /**
   * Copy constructor; creates a copy of a {@link Parameter}.
   * <p>
   * @param orig the {@link Parameter} instance to copy.
   */
 public";


%javamethodmodifiers Parameter::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Parameter}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, indicating
   * whether the Visitor would like to visit the next {@link Parameter} object in
   * the list of parameters within which <em>the</em> present object is
   * embedded.
   */
 public";


%javamethodmodifiers Parameter::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Parameter}.
   * <p>
   * @return a (deep) copy of this {@link Parameter}.
   */
 public";


%javamethodmodifiers Parameter::initDefaults "
  /**
   * Initializes the fields of this {@link Parameter} object to \'typical\' defaults
   * values.
   * <p>
   * The SBML {@link Parameter} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.  Many
   * SBML object classes defined by libSBML have an initDefaults() method
   * to set the values to certain common defaults, based mostly on what
   * they are in SBML Level&nbsp;2.  In the case of {@link Parameter}, this method
   * only sets the value of the \'constant\' attribute to <code>true.</code>
   * <p>
   * @see #getConstant()
   * @see #isSetConstant()
   * @see #setConstant(boolean flag)
   */
 public";


%javamethodmodifiers Parameter::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link Parameter}.
   * <p>
   * @return the id of this {@link Parameter}.
   */
 public";


%javamethodmodifiers Parameter::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link Parameter}.
   * <p>
   * @return the name of this {@link Parameter}.
   */
 public";


%javamethodmodifiers Parameter::getValue() const "
  /**
   * Gets the numerical value of this {@link Parameter}.
   * <p>
   * @return the value of the \'value\' attribute of this {@link Parameter}, as a
   * number of type <code>double.</code>
   * <p>
   * @note <b>It is crucial</b> that callers not blindly call
   * {@link Parameter#getValue()} without first using {@link Parameter#isSetValue()} to
   * determine whether a value has ever been set.  Otherwise, the value
   * return by {@link Parameter#getValue()} may not actually represent a value
   * assigned to the parameter.  The reason is simply that the data type
   * <code>double</code> in a program always has <em>some</em> value.  A separate test is
   * needed to determine whether the value is a true model value, or
   * uninitialized data in a computer\'s memory location.
   * <p>
   * @see #isSetValue()
   * @see #setValue(double value)
   * @see #getUnits()
   */
 public";


%javamethodmodifiers Parameter::getUnits() const "
  /**
   * Gets the units defined for this {@link Parameter}.
   * <p>
   * The value of an SBML parameter\'s \'units\' attribute establishes the
   * unit of measurement associated with the parameter\'s value.
   * <p>
   * @return the value of the \'units\' attribute of this {@link Parameter}, as a
   * string.  An empty string indicates that no units have been assigned.
   * <p>
   * @note There is an important distinction to be made between <em>no units
assigned</em>, and assuming a value without units has any specific unit
such as <code>dimensionless</code>.  In SBML, default units are never
attributed to numbers, and numbers without units are not automatically
assumed to have the unit <code>dimensionless</code>.  Please consult the
relevant SBML specification document for a more in-depth explanation of
this topic and the SBML unit system.

   * <p>
   * @see #isSetUnits()
   * @see #setUnits(String units)
   * @see #getValue()
   */
 public";


%javamethodmodifiers Parameter::getConstant() const "
  /**
   * Gets the value of the \'constant\' attribute of this {@link Parameter} instance.
   * <p>
   * @return <code>true</code> if this {@link Parameter} is declared as being constant,
   * <code>false</code> otherwise.
   * <p>
   * @note Readers who view the documentation for {@link LocalParameter} may be
   * confused about the presence of this method.  LibSBML derives
   * {@link LocalParameter} from {@link Parameter}; however, this does not precisely match
   * the object hierarchy defined by SBML Level&nbsp;3, where
   * {@link LocalParameter} is derived directly from {@link SBase} and not {@link Parameter}.  We
   * believe this arrangement makes it easier for libSBML users to program
   * applications that work with both SBML Level&nbsp;2 and SBML
   * Level&nbsp;3, but programmers should also keep in mind this difference
   * exists.  A side-effect of libSBML\'s scheme is that certain methods on
   * {@link LocalParameter} that are inherited from {@link Parameter} do not actually have
   * relevance to {@link LocalParameter} objects.  An example of this is the
   * methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
   * isSetConstant(), setConstant(), and getConstant()).
   * <p>
   * @see #isSetConstant()
   * @see #setConstant(boolean flag)
   */
 public";


%javamethodmodifiers Parameter::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Parameter}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Parameter::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Parameter}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Parameter::isSetValue() const "
  /**
   * Predicate returning <code>true</code> if the
   * \'value\' attribute of this {@link Parameter} is set.
   * <p>
   * In SBML definitions after SBML Level&nbsp;1 Version&nbsp;1,
   * parameter values are optional and have no defaults.  If a model read
   * from a file does not contain a setting for the \'value\' attribute of a
   * parameter, its value is considered unset; it does not default to any
   * particular value.  Similarly, when a {@link Parameter} object is created in
   * libSBML, it has no value until given a value.  The
   * {@link Parameter#isSetValue()} method allows calling applications to
   * determine whether a given parameter\'s value has ever been set.
   * <p>
   * In SBML Level&nbsp;1 Version&nbsp;1, parameters are required to have
   * values and therefore, the value of a {@link Parameter} <b>should always be
   * set</b>.  In Level&nbsp;1 Version&nbsp;2 and beyond, the value is
   * optional and as such, the \'value\' attribute may or may not be set.
   * <p>
   * @return <code>true</code> if the value of this {@link Parameter} is set,
   * <code>false</code> otherwise.
   * <p>
   * @see #getValue()
   * @see #setValue(double value)
   */
 public";


%javamethodmodifiers Parameter::isSetUnits() const "
  /**
   * Predicate returning <code>true</code> if the
   * \'units\' attribute of this {@link Parameter} is set.
   * <p>
   * @return <code>true</code> if the \'units\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note There is an important distinction to be made between <em>no units
assigned</em>, and assuming a value without units has any specific unit
such as <code>dimensionless</code>.  In SBML, default units are never
attributed to numbers, and numbers without units are not automatically
assumed to have the unit <code>dimensionless</code>.  Please consult the
relevant SBML specification document for a more in-depth explanation of
this topic and the SBML unit system.

   */
 public";


%javamethodmodifiers Parameter::isSetConstant() const "
  /**
   * Predicate returning <code>true</code> if the
   * \'constant\' attribute of this {@link Parameter} is set.
   * <p>
   * @return <code>true</code> if the \'constant\' attribute of this {@link Parameter} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note Readers who view the documentation for {@link LocalParameter} may be
   * confused about the presence of this method.  LibSBML derives
   * {@link LocalParameter} from {@link Parameter}; however, this does not precisely match
   * the object hierarchy defined by SBML Level&nbsp;3, where
   * {@link LocalParameter} is derived directly from {@link SBase} and not {@link Parameter}.  We
   * believe this arrangement makes it easier for libSBML users to program
   * applications that work with both SBML Level&nbsp;2 and SBML
   * Level&nbsp;3, but programmers should also keep in mind this difference
   * exists.  A side-effect of libSBML\'s scheme is that certain methods on
   * {@link LocalParameter} that are inherited from {@link Parameter} do not actually have
   * relevance to {@link LocalParameter} objects.  An example of this is the
   * methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
   * isSetConstant(), setConstant(), and getConstant()).
   * <p>
   * @see #getConstant()
   * @see #setConstant(boolean flag)
   */
 public";


%javamethodmodifiers Parameter::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link Parameter}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link Parameter}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Parameter::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link Parameter}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link Parameter}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Parameter::setValue(double value) "
  /**
   * Sets the \'value\' attribute of this {@link Parameter} to the given <code>double</code>
   * value and marks the attribute as set.
   * <p>
   * @param value a <code>double</code>, the value to assign
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers Parameter::setUnits(const std::string& units) "
  /**
   * Sets the \'units\' attribute of this {@link Parameter} to a copy of the given
   * units identifier <code>units</code>.
   * <p>
   * @param units a string, the identifier of the units to assign to this
   * {@link Parameter} instance
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Parameter::setConstant(bool flag) "
  /**
   * Sets the \'constant\' attribute of this {@link Parameter} to the given boolean
   * <code>flag</code>.
   * <p>
   * @param flag a boolean, the value for the \'constant\' attribute of this
   * {@link Parameter} instance
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note Readers who view the documentation for {@link LocalParameter} may be
   * confused about the presence of this method.  LibSBML derives
   * {@link LocalParameter} from {@link Parameter}; however, this does not precisely match
   * the object hierarchy defined by SBML Level&nbsp;3, where
   * {@link LocalParameter} is derived directly from {@link SBase} and not {@link Parameter}.  We
   * believe this arrangement makes it easier for libSBML users to program
   * applications that work with both SBML Level&nbsp;2 and SBML
   * Level&nbsp;3, but programmers should also keep in mind this difference
   * exists.  A side-effect of libSBML\'s scheme is that certain methods on
   * {@link LocalParameter} that are inherited from {@link Parameter} do not actually have
   * relevance to {@link LocalParameter} objects.  An example of this is the
   * methods pertaining to {@link Parameter}\'s attribute \'constant\' (i.e.,
   * isSetConstant(), setConstant(), and getConstant()).
   * <p>
   * @see #getConstant()
   * @see #isSetConstant()
   */
 public";


%javamethodmodifiers Parameter::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link Parameter}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Parameter::unsetValue "
  /**
   * Unsets the \'value\' attribute of this {@link Parameter} instance.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * In SBML Level&nbsp;1 Version&nbsp;1, parameters are required to have
   * values and therefore, the value of a {@link Parameter} <b>should always be
   * set</b>.  In SBML Level&nbsp;1 Version&nbsp;2 and beyond, the value
   * is optional and as such, the \'value\' attribute may or may not be set.
   */
 public";


%javamethodmodifiers Parameter::unsetUnits "
  /**
   * Unsets the \'units\' attribute of this {@link Parameter} instance.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Parameter::getDerivedUnitDefinition "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Parameter}\'s value.
   * <p>
   * Parameters in SBML have an attribute (\'units\') for declaring the units
   * of measurement intended for the parameter\'s value.  <b>No defaults are
   * defined</b> by SBML in the absence of a definition for \'units\'.  This
   * method returns a {@link UnitDefinition} object based on the units declared for
   * this {@link Parameter} using its \'units\' attribute, or it returns <code>null</code> if
   * no units have been declared.
   * <p>
   * Note that unit declarations for {@link Parameter} objects are specified in
   * terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.For SBML Level&nbsp;2 models, it will do this even when
   * the value of the \'units\' attribute is one of the special SBML
   * Level&nbsp;2 unit identifiers <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>,
   * <code>\'length\'</code> or <code>\'time\'.</code>  Callers may find this useful in conjunction
   * with the helper methods provided by the {@link UnitDefinition} class for
   * comparing different {@link UnitDefinition} objects.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Parameter}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link Parameter} object has not yet been added to
   * a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return <code>null.</code>
   * <p>
   * @see #isSetUnits()
   */
 public";


%javamethodmodifiers Parameter::getDerivedUnitDefinition() const "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link Parameter}\'s value.
   * <p>
   * Parameters in SBML have an attribute (\'units\') for declaring the units
   * of measurement intended for the parameter\'s value.  <b>No defaults are
   * defined</b> by SBML in the absence of a definition for \'units\'.  This
   * method returns a {@link UnitDefinition} object based on the units declared for
   * this {@link Parameter} using its \'units\' attribute, or it returns <code>null</code> if
   * no units have been declared.
   * <p>
   * Note that unit declarations for {@link Parameter} objects are specified in
   * terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the predefined SBML
   * units <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
   * <code>\'time\'.</code>  Callers may find this useful in conjunction with the helper
   * methods provided by the {@link UnitDefinition} class for comparing different
   * {@link UnitDefinition} objects.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link Parameter}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link Parameter} object has not yet been added to
   * a model, or the model itself is incomplete, unit analysis is not
   * possible, and consequently this method will return <code>null.</code>
   * <p>
   * @see #isSetUnits()
   */
 public";


%javamethodmodifiers Parameter::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or
   * {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Parameter::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Parameter}, is
   * always <code>\'parameter\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'parameter\'.</code>
   */
 public";


%javamethodmodifiers Parameter::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Parameter} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Parameter} object are:
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'value\' (required in Level&nbsp;1, optional otherwise)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers Parameter::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Parameter::isExplicitlySetConstant() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfParameters::ListOfParameters(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfParameters} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfParameters::ListOfParameters(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfParameters} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfParameters} object to be created.
   */
 public";


%javamethodmodifiers ListOfParameters::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfParameters} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfParameters}.
   */
 public";


%javamethodmodifiers ListOfParameters::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfParameters::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Parameter} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}
   * (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfParameters::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfParameters}, the XML element name is <code>\'listOfParameters\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfParameters\'.</code>
   */
 public";


%javamethodmodifiers ListOfParameters::get(unsigned int n) "
  /**
   * Returns the {@link Parameter} object located at position <code>n</code> within this
   * {@link ListOfParameters} instance.
   * <p>
   * @param n the index number of the {@link Parameter} to get.
   * <p>
   * @return the nth {@link Parameter} in this {@link ListOfParameters}.  If the index <code>n</code>
   * is out of bounds for the length of the list, then <code>null</code> is returned.
   * <p>
   * @see #size()
   * @see #get(String sid)
   */
 public";


%javamethodmodifiers ListOfParameters::get "
  /**
   * Returns the {@link Parameter} object located at position <code>n</code> within this
   * {@link ListOfParameters} instance.
   * <p>
   * @param n the index number of the {@link Parameter} to get.
   * <p>
   * @return the nth {@link Parameter} in this {@link ListOfParameters}.  If the index <code>n</code>
   * is out of bounds for the length of the list, then <code>null</code> is returned.
   * <p>
   * @see #size()
   * @see #get(String sid)
   */
 public";


%javamethodmodifiers ListOfParameters::get(const std::string& sid) "
  /**
   * Returns the first {@link Parameter} object matching the given identifier.
   * <p>
   * @param sid a string, the identifier of the {@link Parameter} to get.
   * <p>
   * @return the {@link Parameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfParameters::get(const std::string& sid) const "
  /**
   * Returns the first {@link Parameter} object matching the given identifier.
   * <p>
   * @param sid a string representing the identifier of the {@link Parameter} to
   * get.
   * <p>
   * @return the {@link Parameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfParameters::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfParameters}, and returns a pointer
   * to it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If the index number <code>n</code> is out of
   * bounds for the length of the list, then <code>null</code> is returned.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfParameters::remove(const std::string& sid) "
  /**
   * Removes the first {@link Parameter} object in this {@link ListOfParameters}
   * matching the given identifier, and returns a pointer to it.
   * <p>
   * @param sid the identifier of the item to remove.
   * <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If none of the items have an identifier
   * matching <code>sid</code>, then <code>null</code> is returned.
   */
 public";


%javamethodmodifiers ListOfParameters::getElementPosition() const "
  /**
   * Gets the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the {@link ListOfParameters}
   * in a model is (in SBML Level&nbsp;2 Version&nbsp;4) the seventh
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfParameters::createObject(XMLInputStream& stream) "
  /**
   * Create a {@link ListOfParameters} object corresponding to the next token in
   * the XML input stream.
   * <p>
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream, or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) LocalParameter "
/** 
 * LibSBML implementation of SBML Level&nbsp;3\'s LocalParameter construct.
 * <p>
 * {@link LocalParameter} has been introduced in SBML Level&nbsp;3 to serve as the
 * object class for parameter definitions that are intended to be local to
 * a {@link Reaction}.  Objects of class {@link LocalParameter} never appear at the {@link Model}
 * level; they are always contained within {@link ListOfLocalParameters} lists
 * which are in turn contained within {@link KineticLaw} objects.
 * <p>
 * Like its global {@link Parameter} counterpart, the {@link LocalParameter} object class
 * is used to define a symbol associated with a value; this symbol can then
 * be used in a model\'s mathematical formulas (and specifically, for
 * {@link LocalParameter}, reaction rate formulas).  Unlike {@link Parameter}, the
 * {@link LocalParameter} class does not have a \'constant\' attribute: local
 * parameters within reactions are <em>always</em> constant.
 * <p>
 * {@link LocalParameter} has one required attribute, \'id\', to give the
 * parameter a unique identifier by which other parts of an SBML model
 * definition can refer to it.  A parameter can also have an optional
 * \'name\' attribute of type <code>string.</code>  Identifiers and names must be used
 * according to the guidelines described in the SBML specifications.
 * <p>
 * The optional attribute \'value\' determines the value (of type <code>double</code>)
 * assigned to the parameter.  A missing value for \'value\' implies that
 * the value either is unknown, or to be obtained from an external source,
 * or determined by an initial assignment.  The unit of measurement
 * associated with the value of the parameter can be specified using the
 * optional attribute \'units\'.  Here we only mention briefly some notable
 * points about the possible unit choices, but readers are urged to consult
 * the SBML specification documents for more information:
 * <ul>
 * <p>
 * <li> In SBML Level&nbsp;3, there are no constraints on the units that
 * can be assigned to parameters in a model; there are also no units to
 * inherit from the enclosing {@link Model} object.
 * <p>
 * <li> In SBML Level&nbsp;2, the value assigned to the parameter\'s \'units\'
 * attribute must be chosen from one of the following possibilities: one of
 * the base unit identifiers defined in SBML; one of the built-in unit
 * identifiers <code>\'substance\'</code>, <code>\'time\'</code>, <code>\'volume\'</code>, <code>\'area\'</code> or 
 * <code>\'length\'</code>; or the identifier of a new unit defined in the list of unit
 * definitions in the enclosing {@link Model} structure.  There are no constraints
 * on the units that can be chosen from these sets.  There are no default
 * units for local parameters.
 * </ul>
 * <p>
 * As with all other major SBML components, {@link LocalParameter} is derived from
 * {@link SBase}, and the methods defined on {@link SBase} are available on {@link LocalParameter}.
 * <p>
 * @warning LibSBML derives {@link LocalParameter} from {@link Parameter}; however, this
 * does not precisely match the object hierarchy defined by SBML
 * Level&nbsp;3, where {@link LocalParameter} is derived directly from {@link SBase} and not
 * {@link Parameter}.  We believe this arrangement makes it easier for libSBML
 * users to program applications that work with both SBML Level&nbsp;2 and
 * SBML Level&nbsp;3, but programmers should also keep in mind this
 * difference exists.  A side-effect of libSBML\'s scheme is that certain
 * methods on {@link LocalParameter} that are inherited from {@link Parameter} do not
 * actually have relevance to {@link LocalParameter} objects.  An example of this
 * is the methods pertaining to {@link Parameter}\'s attribute \'constant\'
 * (i.e., isSetConstant(), setConstant(), and getConstant()).
 * <p>
 * @see ListOfLocalParameters
 * @see KineticLaw
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfLocalParameters "
/** 
 * LibSBML implementation of SBML Level&nbsp;3\'s ListOfLocalParameters construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * {@link ListOfLocalParameters} is a subsidiary object class used only within
 * {@link KineticLaw} in SBML Level&nbsp;3.  It is not defined in SBML Levels
 * 1&ndash;2.  In Level&nbsp;3, a {@link KineticLaw} object can have a single
 * object of class {@link ListOfLocalParameters} containing a set of local
 * parameters used in that kinetic law definition.
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers LocalParameter::LocalParameter(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link LocalParameter} object with the given SBML <code>level</code> and
   * <code>version</code> values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this
   * {@link LocalParameter}.
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link LocalParameter}.
   * <p>
   * @note Upon the addition of a {@link LocalParameter} object to an {@link SBMLDocument}
   * (e.g., using {@link KineticLaw#addLocalParameter(LocalParameter p)}), the SBML Level, SBML
   * Version and XML namespace of the document <em>override</em> the
   * values used when creating the {@link LocalParameter} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link LocalParameter} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers LocalParameter::LocalParameter(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link LocalParameter} object with the given {@link SBMLNamespaces}
   * object <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * It is worth emphasizing that although this constructor does not take
   * an identifier argument, in SBML Level&nbsp;2 and beyond, the \'id\'
   * (identifier) attribute of a {@link LocalParameter} is required to have a value.
   * Thus, callers are cautioned to assign a value after calling this
   * constructor if no identifier is provided as an argument.  Setting the
   * identifier can be accomplished using the method
   * setId(String id).
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link LocalParameter} object to an {@link SBMLDocument}
   * (e.g., using {@link KineticLaw#addLocalParameter(LocalParameter p)}), the SBML XML namespace of
   * the document <em>overrides</em> the value used when creating the
   * {@link LocalParameter} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a
   * {@link LocalParameter} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers LocalParameter::LocalParameter(const LocalParameter& orig) "
  /**
   * Copy constructor; creates a copy of a given {@link LocalParameter} object.
   * <p>
   * @param orig the {@link LocalParameter} instance to copy.
   */
 public";


%javamethodmodifiers LocalParameter::LocalParameter(const Parameter& orig) "
  /**
   * Copy constructor; creates a {@link LocalParameter} object by copying
   * the attributes of a given {@link Parameter} object.
   * <p>
   * @param orig the {@link Parameter} instance to copy.
   */
 public";


%javamethodmodifiers LocalParameter::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link LocalParameter}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link LocalParameter} in the list
   * of parameters within which this {@link LocalParameter} is embedded (i.e., either
   * the list of parameters in the parent {@link Model} or the list of parameters
   * in the enclosing {@link KineticLaw}).
   */
 public";


%javamethodmodifiers LocalParameter::clone() const "
  /**
   * Creates and returns a deep copy of this {@link LocalParameter}.
   * <p>
   * @return a (deep) copy of this {@link LocalParameter}.
   */
 public";


%javamethodmodifiers LocalParameter::getDerivedUnitDefinition "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link LocalParameter}\'s value.
   * <p>
   * LocalParameters in SBML have an attribute (\'units\') for declaring the
   * units of measurement intended for the parameter\'s value.  <b>No
   * defaults are defined</b> by SBML in the absence of a definition for
   * \'units\'.  This method returns a {@link UnitDefinition} object based on the
   * units declared for this {@link LocalParameter} using its \'units\' attribute, or
   * it returns <code>null</code> if no units have been declared.
   * <p>
   * Note that unit declarations for {@link LocalParameter} objects are specified
   * in terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the predefined SBML
   * units <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
   * <code>\'time\'.</code>  Callers may find this useful in conjunction with the helper
   * methods provided by the {@link UnitDefinition} class for comparing different
   * {@link UnitDefinition} objects.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link LocalParameter}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link LocalParameter} object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return <code>null.</code>
   * <p>
   * @see #isSetUnits()
   */
 public";


%javamethodmodifiers LocalParameter::getDerivedUnitDefinition() const "
  /**
   * Constructs and returns a {@link UnitDefinition} that corresponds to the units
   * of this {@link LocalParameter}\'s value.
   * <p>
   * LocalParameters in SBML have an attribute (\'units\') for declaring the
   * units of measurement intended for the parameter\'s value.  <b>No
   * defaults are defined</b> by SBML in the absence of a definition for
   * \'units\'.  This method returns a {@link UnitDefinition} object based on the
   * units declared for this {@link LocalParameter} using its \'units\' attribute, or
   * it returns <code>null</code> if no units have been declared.
   * <p>
   * Note that unit declarations for {@link LocalParameter} objects are specified
   * in terms of the <em>identifier</em> of a unit (e.g., using setUnits()), but
   * <em>this</em> method returns a {@link UnitDefinition} object, not a unit
   * identifier.  It does this by constructing an appropriate
   * {@link UnitDefinition}.  For SBML Level&nbsp;2 models, it will do this even
   * when the value of the \'units\' attribute is one of the predefined SBML
   * units <code>\'substance\'</code>, <code>\'volume\'</code>, <code>\'area\'</code>, <code>\'length\'</code> or 
   * <code>\'time\'.</code>  Callers may find this useful in conjunction with the helper
   * methods provided by the {@link UnitDefinition} class for comparing different
   * {@link UnitDefinition} objects.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of this 
   * {@link LocalParameter}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @note The libSBML system for unit analysis depends on the model as a
   * whole.  In cases where the {@link LocalParameter} object has not yet been
   * added to a model, or the model itself is incomplete, unit analysis is
   * not possible, and consequently this method will return <code>null.</code>
   * <p>
   * @see #isSetUnits()
   */
 public";


%javamethodmodifiers LocalParameter::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers LocalParameter::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link LocalParameter},
   * is always <code>\'localParameter\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'localParameter\'.</code>
   */
 public";


%javamethodmodifiers LocalParameter::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link LocalParameter} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link LocalParameter} object are:
   * <li> \'id\'
   * <li> \'value\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers LocalParameter::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers LocalParameter::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers LocalParameter::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers LocalParameter::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfLocalParameters::ListOfLocalParameters(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfLocalParameters} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfLocalParameters::ListOfLocalParameters(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfLocalParameters} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfLocalParameters} object to be created.
   */
 public";


%javamethodmodifiers ListOfLocalParameters::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfLocalParameters} object.
   * <p>
   * @return a (deep) copy of this {@link ListOfLocalParameters}.
   */
 public";


%javamethodmodifiers ListOfLocalParameters::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfLocalParameters::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link LocalParameter} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}
   * (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfLocalParameters::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfLocalParameters}, the XML element name is <code>\'listOfLocalParameters\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfLocalParameters\'.</code>
   */
 public";


%javamethodmodifiers ListOfLocalParameters::get(unsigned int n) "
  /**
   * Returns the {@link LocalParameter} object located at position <code>n</code> within this
   * {@link ListOfLocalParameters} instance.
   * <p>
   * @param n the index number of the {@link LocalParameter} to get.
   * <p>
   * @return the nth {@link LocalParameter} in this {@link ListOfLocalParameters}.  If the
   * index <code>n</code> is out of bounds for the length of the list, then <code>null</code>
   * is returned.
   * <p>
   * @see #size()
   * @see #get(String sid)
   */
 public";


%javamethodmodifiers ListOfLocalParameters::get "
  /**
   * Returns the {@link LocalParameter} object located at position <code>n</code> within this
   * {@link ListOfLocalParameters} instance.
   * <p>
   * @param n the index number of the {@link LocalParameter} to get.
   * <p>
   * @return the item at position <code>n</code>.  The caller owns the returned
   * object and is responsible for deleting it.  If the index number <code>n</code>
   * is out of bounds for the length of the list, then <code>null</code> is returned.
   * <p>
   * @see #size()
   * @see #get(String sid)
   */
 public";


%javamethodmodifiers ListOfLocalParameters::get(const std::string& sid) "
  /**
   * Returns the first {@link LocalParameter} object matching the given identifier.
   * <p>
   * @param sid a string, the identifier of the {@link LocalParameter} to get.
   * <p>
   * @return the {@link LocalParameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfLocalParameters::get(const std::string& sid) const "
  /**
   * Returns the first {@link LocalParameter} object matching the given identifier.
   * <p>
   * @param sid a string representing the identifier of the {@link LocalParameter}
   * to get.
   * <p>
   * @return the {@link LocalParameter} object found.  The caller owns the returned
   * object and is responsible for deleting it.  If none of the items have
   * an identifier matching <code>sid</code>, then <code>null</code> is returned.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfLocalParameters::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfLocalParameters}, and returns a
   * pointer to it.
   * <p>
   * @param n the index of the item to remove.  
   * <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If the index number <code>n</code> is out of
   * bounds for the length of the list, then <code>null</code> is returned.
   * <p>
   * @see #size()
   * @see #remove(String sid)
   */
 public";


%javamethodmodifiers ListOfLocalParameters::remove(const std::string& sid) "
  /**
   * Removes the first {@link LocalParameter} object in this {@link ListOfLocalParameters}
   * matching the given identifier, and returns a pointer to it.
   * <p>
   * @param sid the identifier of the item to remove.
   * <p>
   * @return the item removed.  The caller owns the returned object and is
   * responsible for deleting it.  If none of the items have an identifier
   * matching <code>sid</code>, then <code>null</code> is returned.
   */
 public";


%javamethodmodifiers ListOfLocalParameters::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the {@link ListOfLocalParameters}
   * in a model is (in SBML Level&nbsp;2 Version&nbsp;4) the seventh
   * ListOf___.  (However, it differs for different Levels and Versions of
   * SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfLocalParameters::createObject(XMLInputStream& stream) "
  /**
   * Create a {@link ListOfLocalParameters} object corresponding to the next token in
   * the XML input stream.
   * <p>
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream, or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) InitialAssignment "
/** 
 * LibSBML implementation of SBML\'s InitialAssignment construct.
 * <p>
 * SBML Level 2 Versions 2&ndash;4 and SBML Level&nbsp;3 provide two ways of assigning initial
 * values to entities in a model.  The simplest and most basic is to set
 * the values of the appropriate attributes in the relevant components; for
 * example, the initial value of a model parameter (whether it is a
 * constant or a variable) can be assigned by setting its \'value\' attribute
 * directly in the model definition.  However, this approach is not
 * suitable when the value must be calculated, because the initial value
 * attributes on different components such as species, compartments, and
 * parameters are single values and not mathematical expressions.  In those
 * situations, the {@link InitialAssignment} construct can be used; it permits the
 * calculation of the value of a constant or the initial value of a
 * variable from the values of <em>other</em> quantities in a model.
 * <p>
 * As explained below, the provision of {@link InitialAssignment} does not mean
 * that models necessarily must use this construct when defining initial
 * values of quantities in a model.  If a value can be set directly using
 * the relevant attribute of a component in a model, then that
 * approach may be more efficient and more portable to other software
 * tools.  {@link InitialAssignment} should be used when the other mechanism is
 * insufficient for the needs of a particular model.
 * <p>
 * The {@link InitialAssignment} construct has some similarities to {@link AssignmentRule}.
 * The main differences are: (a) an {@link InitialAssignment} can set the value of
 * a constant whereas an {@link AssignmentRule} cannot, and (b) unlike
 * {@link AssignmentRule}, an {@link InitialAssignment} definition only applies up to and
 * including the beginning of simulation time, i.e., <em>t &#8804; 0</em>,
 * while an {@link AssignmentRule} applies at all times.
 * <p>
 * {@link InitialAssignment} has a required attribute, \'symbol\', whose value must
 * follow the guidelines for identifiers described in the SBML
 * specification (e.g., Section 3.3 in the Level 2 Version 4
 * specification).  The value of this attribute in an {@link InitialAssignment}
 * object can be the identifier of a {@link Compartment}, {@link Species} or global
 * {@link Parameter} elsewhere in the model.  The {@link InitialAssignment} defines the
 * initial value of the constant or variable referred to by the \'symbol\'
 * attribute.  (The attribute\'s name is \'symbol\' rather than \'variable\'
 * because it may assign values to constants as well as variables in a
 * model.)  Note that an initial assignment cannot be made to reaction
 * identifiers, that is, the \'symbol\' attribute value of an
 * {@link InitialAssignment} cannot be an identifier that is the \'id\' attribute
 * value of a {@link Reaction} object in the model.  This is identical to a
 * restriction placed on rules.
 * <p>
 * {@link InitialAssignment} also has a required \'math\' subelement that contains a
 * MathML expression used to calculate the value of the constant or the
 * initial value of the variable.  The units of the value computed by the
 * formula in the \'math\' subelement should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be identical to be the
 * units associated with the identifier given in the \'symbol\' attribute.
 * (That is, the units are the units of the species, compartment, or
 * parameter, as appropriate for the kind of object identified by the value
 * of \'symbol\'.)
 * <p>
 * {@link InitialAssignment} was introduced in SBML Level 2 Version 2.  It is not
 * available in SBML Level&nbsp;2 Version&nbsp;1 nor in any version of Level 1.
 * <p>
 * <h2>Semantics of Initial Assignments</h2>
 * <p>
 * The value calculated by an {@link InitialAssignment} object overrides the value
 * assigned to the given symbol by the object defining that symbol.  For
 * example, if a compartment\'s \'size\' attribute is set in its definition,
 * and the model also contains an {@link InitialAssignment} having that
 * compartment\'s identifier as its \'symbol\' attribute value, then the
 * interpretation is that the \'size\' assigned in the {@link Compartment} object
 * should be ignored and the value assigned based on the computation
 * defined in the {@link InitialAssignment}.  Initial assignments can take place
 * for {@link Compartment}, {@link Species} and global {@link Parameter} objects regardless of the
 * value of their \'constant\' attribute.
 * <p>
 * The actions of all {@link InitialAssignment} objects are in general terms
 * the same, but differ in the precise details depending on the type
 * of variable being set:
 * <ul>
 * <li> <em>In the case of a species</em>, an {@link InitialAssignment} sets the
 * referenced species\' initial quantity (concentration or amount of
 * substance) to the value determined by the formula in the \'math\'
 * subelement.    The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units specified for the species.
 * <p>
 * <li> <em>In the case of a compartment</em>, an {@link InitialAssignment} sets
 * the referenced compartment\'s initial size to the size determined by the
 * formula in \'math\'.  The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units specified for the size of the compartment.
 * <p>
 * <li> <em>In the case of a parameter</em>, an {@link InitialAssignment} sets the
 * referenced parameter\'s initial value to that determined by the formula
 * in \'math\'.  The overall units of the formula should (in SBML
 * Level&nbsp;2 Version&nbsp;4 and SBML Level&nbsp;3) or must (in previous Versions) be the same
 * as the units defined for the parameter.  </ul>
 * <p>
 * In the context of a simulation, initial assignments establish values
 * that are in effect prior to and including the start of simulation time,
 * i.e., <em>t &#8804; 0</em>.  Section 3.4.8 in the SBML Level 2
 * Version 4  and SBML Level&nbsp;3 Version&nbsp;1 Core specifications provides information about the interpretation of
 * assignments, rules, and entity values for simulation time up to and
 * including the start time <em>t = 0</em>; this is important for
 * establishing the initial conditions of a simulation if the model
 * involves expressions containing the <em>delay</em> \'csymbol\'.
 * <p>
 * There cannot be two initial assignments for the same symbol in a model;
 * that is, a model must not contain two or more {@link InitialAssignment} objects
 * that both have the same identifier as their \'symbol\' attribute value.  A
 * model must also not define initial assignments <em>and</em> assignment
 * rules for the same entity.  That is, there cannot be <em>both</em> an
 * {@link InitialAssignment} and an {@link AssignmentRule} for the same symbol in a model,
 * because both kinds of constructs apply prior to and at the start of
 * simulated time&mdash;allowing both to exist for a given symbol would
 * result in indeterminism).
 * <p>
 * The ordering of {@link InitialAssignment} objects is not significant.  The
 * combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects form a set of assignment statements that must be considered as a
 * whole.  The combined set of assignment statements should not contain
 * algebraic loops: a chain of dependency between these statements should
 * terminate.  (More formally, consider the directed graph of assignment
 * statements where nodes are a model\'s assignment statements and directed
 * arcs exist for each occurrence of a symbol in an assignment statement
 * \'math\' attribute.  The directed arcs in this graph start from the
 * statement assigning the symbol and end at the statement that contains
 * the symbol in their math elements.  Such a graph must be acyclic.)
 * <p>
 * Finally, it is worth being explicit about the expected behavior in the
 * following situation.  Suppose (1) a given symbol has a value <em>x</em>
 * assigned to it in its definition, and (2) there is an initial assignment
 * having the identifier as its \'symbol\' value and reassigning the value to
 * <em>y</em>, <em>and</em> (3) the identifier is also used in the
 * mathematical formula of a second initial assignment.  What value should
 * the second initial assignment use?  It is <em>y</em>, the value assigned
 * to the symbol by the first initial assignment, not whatever value was
 * given in the symbol\'s definition.  This follows directly from the
 * behavior described above: if an {@link InitialAssignment} object exists for a
 * given symbol, then the symbol\'s value is overridden by that initial
 * assignment.
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) ListOfInitialAssignments "
/** 
 * LibSBML implementation of SBML\'s ListOfInitialAssignments construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers InitialAssignment::InitialAssignment(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link InitialAssignment} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link InitialAssignment}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link InitialAssignment}
   * <p>
   * @note Upon the addition of a {@link InitialAssignment} object to an
   * {@link SBMLDocument} (e.g., using {@link Model#addInitialAssignment(InitialAssignment ia)}), the SBML
   * Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link InitialAssignment} object
   * via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link InitialAssignment} is an
   * important aid to producing valid SBML.  Knowledge of the intented SBML
   * Level and Version determine whether it is valid to assign a particular
   * value to an attribute, or whether it is valid to add an object to an
   * existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers InitialAssignment::InitialAssignment(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link InitialAssignment} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link InitialAssignment} object to an
   * {@link SBMLDocument} (e.g., using {@link Model#addInitialAssignment(InitialAssignment ia)}), the SBML XML
   * namespace of the document <em>overrides</em> the value used when creating
   * the {@link InitialAssignment} object via this constructor.  This is necessary
   * to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link InitialAssignment} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers InitialAssignment::InitialAssignment(const InitialAssignment& orig) "
  /**
   * Copy constructor; creates a copy of this {@link InitialAssignment}.
   */
 public";


%javamethodmodifiers InitialAssignment::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link InitialAssignment}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link InitialAssignment} in
   * the list of compartment types.
   */
 public";


%javamethodmodifiers InitialAssignment::clone() const "
  /**
   * Creates and returns a deep copy of this {@link InitialAssignment}.
   * <p>
   * @return a (deep) copy of this {@link InitialAssignment}.
   */
 public";


%javamethodmodifiers InitialAssignment::getSymbol() const "
  /**
   * Get the value of the \'symbol\' attribute of this {@link InitialAssignment}.
   * <p>
   * @return the identifier string stored as the \'symbol\' attribute value
   * in this {@link InitialAssignment}.
   */
 public";


%javamethodmodifiers InitialAssignment::getMath() const "
  /**
   * Get the mathematical formula of this {@link InitialAssignment}.
   * <p>
   * @return an {@link ASTNode}, the value of the \'math\' subelement of this
   * {@link InitialAssignment}
   */
 public";


%javamethodmodifiers InitialAssignment::isSetSymbol() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link InitialAssignment}\'s \'symbol\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'symbol\' attribute of this {@link InitialAssignment}
   * is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers InitialAssignment::isSetMath() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link InitialAssignment}\'s \'math\' subelement contains a value.
   * <p>
   * @return <code>true</code> if the \'math\' for this {@link InitialAssignment} is set,
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers InitialAssignment::setSymbol(const std::string& sid) "
  /**
   * Sets the \'symbol\' attribute value of this {@link InitialAssignment}.
   * <p>
   * @param sid the identifier of a {@link Species}, {@link Compartment} or {@link Parameter}
   * object defined elsewhere in this {@link Model}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers InitialAssignment::setMath(const ASTNode* math) "
  /**
   * Sets the \'math\' subelement of this {@link InitialAssignment}.
   * <p>
   * The AST passed in <code>math</code> is copied.
   * <p>
   * @param math an AST containing the mathematical expression to
   * be used as the formula for this {@link InitialAssignment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers InitialAssignment::getDerivedUnitDefinition "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link InitialAssignment}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link InitialAssignment} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link InitialAssignment#getDerivedUnitDefinition()}
   * method returns the calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link InitialAssignment} contains pure numbers or parameters with undeclared
   * units.  In those cases, it is not possible to calculate the units of
   * the overall expression without making assumptions.  LibSBML does not
   * make assumptions about the units, and
   * {@link InitialAssignment#getDerivedUnitDefinition()}
   * only returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  <strong>It is important that callers also
   * invoke the method</strong>
   * {@link InitialAssignment#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers
   * may wish to take suitable actions in those scenarios.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link InitialAssignment}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers InitialAssignment::getDerivedUnitDefinition() const "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link InitialAssignment}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link InitialAssignment} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link InitialAssignment#getDerivedUnitDefinition()}
   * method returns the calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link InitialAssignment} contains pure numbers or parameters with undeclared
   * units.  In those cases, it is not possible to calculate the units of
   * the overall expression without making assumptions.  LibSBML does not
   * make assumptions about the units, and
   * {@link InitialAssignment#getDerivedUnitDefinition()}
   * only returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  <strong>It is important that callers also
   * invoke the method</strong>
   * {@link InitialAssignment#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers
   * may wish to take suitable actions in those scenarios.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link InitialAssignment}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers InitialAssignment::containsUndeclaredUnits "
  /**
   * Predicate returning <code>true</code> if 
   * the math expression of this {@link InitialAssignment} contains
   * parameters/numbers with undeclared units.
   * <p>
   * @return <code>true</code> if the math expression of this {@link InitialAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by
   * {@link InitialAssignment#getDerivedUnitDefinition()}
   * may not accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers InitialAssignment::containsUndeclaredUnits() const "
  /**
   * Predicate returning <code>true</code> if 
   * the math expression of this {@link InitialAssignment} contains
   * parameters/numbers with undeclared units.
   * <p>
   * @return <code>true</code> if the math expression of this {@link InitialAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by
   * {@link InitialAssignment#getDerivedUnitDefinition()}
   * may not accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers InitialAssignment::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers InitialAssignment::getElementName() const "
  /**
   * Returns the XML element name of this object, which for
   * {@link InitialAssignment}, is always <code>\'initialAssignment\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'initialAssignment\'.</code>
   */
 public";


%javamethodmodifiers InitialAssignment::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers InitialAssignment::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link InitialAssignment} object
   * have been set.
   * <p>
   * @note The required attributes for an {@link InitialAssignment} object are:
   * <li> \'symbol\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers InitialAssignment::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link InitialAssignment} object
   * have been set.
   * <p>
   * @note The required elements for a {@link InitialAssignment} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers InitialAssignment::getId() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link InitialAssignment} object
   * have been set.
   * <p>
   * @note The required elements for a {@link InitialAssignment} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers InitialAssignment::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers InitialAssignment::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers InitialAssignment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers InitialAssignment::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers InitialAssignment::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers InitialAssignment::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfInitialAssignments::ListOfInitialAssignments(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfInitialAssignments} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::ListOfInitialAssignments(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfInitialAssignments} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfInitialAssignments} object to be created.
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfInitialAssignments} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfInitialAssignments}.
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link InitialAssignment} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfInitialAssignments}, the XML element name is 
   * <code>\'listOfInitialAssignments\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfInitialAssignments\'.</code>
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::get(unsigned int n) "
  /**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}.
   * <p>
   * @param n the index number of the {@link InitialAssignment} to get.
   * <p>
   * @return the nth {@link InitialAssignment} in this {@link ListOfInitialAssignments}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::get "
  /**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}.
   * <p>
   * @param n the index number of the {@link InitialAssignment} to get.
   * <p>
   * @return the nth {@link InitialAssignment} in this {@link ListOfInitialAssignments}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::get(const std::string& sid) "
  /**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link InitialAssignment} to get.
   * <p>
   * @return {@link InitialAssignment} in this {@link ListOfInitialAssignments}
   * with the given id or <code>null</code> if no such
   * {@link InitialAssignment} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::get(const std::string& sid) const "
  /**
   * Get a {@link InitialAssignment} from the {@link ListOfInitialAssignments}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link InitialAssignment} to get.
   * <p>
   * @return {@link InitialAssignment} in this {@link ListOfInitialAssignments}
   * with the given id or <code>null</code> if no such
   * {@link InitialAssignment} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfInitialAssignments} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfInitialAssignments} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfInitialAssignments::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the
   * {@link ListOfInitialAssignments} in a model is (in SBML Level 2 Version 4)
   * the eighth ListOf___.  (However, it differs for different Levels and
   * Versions of SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfInitialAssignments::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Rule "
/** 
 * LibSBML implementation of SBML\'s Rule construct.
 * <p>
 * In SBML, <em>rules</em> provide additional ways to define the values of
 * variables in a model, their relationships, and the dynamical behaviors
 * of those variables.  They enable encoding relationships that cannot be
 * expressed using {@link Reaction} nor {@link InitialAssignment} objects alone.
 * <p>
 * The libSBML implementation of rules mirrors the SBML Level&nbsp;3
 * Version&nbsp;1 Core definition (which is in turn is very similar to the
 * Level&nbsp;2 Version&nbsp;4 definition), with {@link Rule} being the parent
 * class of three subclasses as explained below.  The {@link Rule} class itself
 * cannot be instantiated by user programs and has no constructor; only the
 * subclasses {@link AssignmentRule}, {@link AlgebraicRule} and {@link RateRule} can be
 * instantiated directly.
 * <p>
 * <h2>General summary of SBML rules</h2>
 * <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into
 * three subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible
 * functional forms (where <em>x</em> is a variable, <em>f</em> is some
 * arbitrary function returning a numerical result, <b><em>V</em></b> is a
 * vector of variables that does not include <em>x</em>, and
 * <b><em>W</em></b> is a vector of variables that may include <em>x</em>):
 * <p>
 * <center>
 * <table border=\'0\' cellpadding=\'0\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * </center>
 * <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)<p>
 * <p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.<p>
 * <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;<p>
 * <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and<p>
 * <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * </ul>
 * <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 * <p>
 * <h2>Additional restrictions on SBML rules</h2>
 * <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * <p>
 * <h3>A model must not contain algebraic loops</h3>
 * <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * <p>
 * <h3>A model must not be overdetermined</h3>
 * <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 * <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 * <p>
 * <h2>{@link Rule} types for SBML Level 1</h2>
 * <p>
 * SBML Level 1 uses a different scheme than SBML Level&nbsp;2 and
 * Level&nbsp;3 for distinguishing rules; specifically, it uses an
 * attribute whose value is drawn from an enumeration of 3 values.  LibSBML
 * supports this using methods that work with the enumeration
 * values  listed in the following table.  
 * <p>
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'normal-font\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <td><strong>Enumerator</strong></td>
 *      <td><strong>Meaning</strong></td>
 *  </tr>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}</code></td><td>Indicates the rule is a \'rate\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}</code></td><td>Indicates the rule is a \'scalar\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}</code></td><td>Indicates the rule type is unknown or not
 * yet set.</td>
 * </table>
 * </center>
 * <p>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) AlgebraicRule "
/** 
 * LibSBML implementation of SBML\'s AlgebraicRule construct.
 * <p>
 * The rule type {@link AlgebraicRule} is derived from the parent class {@link Rule}.  It
 * is used to express equations that are neither assignments of model
 * variables nor rates of change.  {@link AlgebraicRule} does not add any
 * attributes to the basic {@link Rule}; its role is simply to distinguish this
 * case from the other cases.
 * <p>
 * In the context of a simulation, algebraic rules are in effect at all
 * times, <em>t</em> &#8805; <em>0</em>.  For purposes of evaluating
 * expressions that involve the delay \'csymbol\' (see the SBML
 * specification), algebraic rules are considered to apply also at
 * <em>t</em> &#8804; <em>0</em>.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * &#8804; <em>0</em>.
 * <p>
 * An SBML model must not be overdetermined.  The ability to define
 * arbitrary algebraic expressions in an SBML model introduces the
 * possibility that a model is mathematically overdetermined by the overall
 * system of equations constructed from its rules, reactions and events.
 * Therefore, if an algebraic rule is introduced in a model, for at least
 * one of the entities referenced in the rule\'s \'math\' element the value of
 * that entity must not be completely determined by other constructs in the
 * model.  This means that at least this entity must not have the attribute
 * \'constant\'=<code>true</code> and there must also not be a rate rule or assignment
 * rule for it.  Furthermore, if the entity is a {@link Species} object, its value
 * must not be determined by reactions, which means that it must either
 * have the attribute \'boundaryCondition\'=<code>true</code> or else not be involved
 * in any reaction at all.  These restrictions are explained in more detail
 * in the SBML specification documents.
 * <p>
 * In SBML Levels 2 and&nbsp;3, {@link Reaction} object identifiers can be
 * referenced in the \'math\' expression of an algebraic rule, but reaction
 * rates can never be <em>determined</em> by algebraic rules.  This is true
 * even when a reaction does not contain a {@link KineticLaw} element.  (In such
 * cases of missing {@link KineticLaw} elements, the model is valid but incomplete;
 * the rates of reactions lacking kinetic laws are simply undefined, and
 * not determined by the algebraic rule.)
 * <p>
 * <p>
 * <h2>General summary of SBML rules</h2>
 * <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into
 * three subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible
 * functional forms (where <em>x</em> is a variable, <em>f</em> is some
 * arbitrary function returning a numerical result, <b><em>V</em></b> is a
 * vector of variables that does not include <em>x</em>, and
 * <b><em>W</em></b> is a vector of variables that may include <em>x</em>):
 * <p>
 * <center>
 * <table border=\'0\' cellpadding=\'0\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * </center>
 * <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)<p>
 * <p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.<p>
 * <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;<p>
 * <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and<p>
 * <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * </ul>
 * <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 * <p>
 * <h2>Additional restrictions on SBML rules</h2>
 * <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * <p>
 * <h3>A model must not contain algebraic loops</h3>
 * <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * <p>
 * <h3>A model must not be overdetermined</h3>
 * <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 * <p>
 * LibSBML implements the static analysis procedure described in Appendix
 * B of the SBML Level&nbsp;3 Version&nbsp;1 Core specification for assessing
 * whether a model is overdetermined.
 * <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 * <p>
 * <p>
 * <h2>{@link Rule} types for SBML Level 1</h2>
 * <p>
 * SBML Level 1 uses a different scheme than SBML Level&nbsp;2 and
 * Level&nbsp;3 for distinguishing rules; specifically, it uses an
 * attribute whose value is drawn from an enumeration of 3 values.  LibSBML
 * supports this using methods that work with the enumeration
 * values  listed in the following table.  
 * <p>
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'normal-font\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <td><strong>Enumerator</strong></td>
 *      <td><strong>Meaning</strong></td>
 *  </tr>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}</code></td><td>Indicates the rule is a \'rate\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}</code></td><td>Indicates the rule is a \'scalar\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}</code></td><td>Indicates the rule type is unknown or not
 * yet set.</td>
 * </table>
 * </center>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) AssignmentRule "
/** 
 * LibSBML implementation of SBML\'s AssignmentRule construct.
 * <p>
 * The rule type {@link AssignmentRule} is derived from the parent class {@link Rule}.  It
 * is used to express equations that set the values of variables.  The
 * left-hand side (the attribute named \'variable\') of an assignment rule
 * can refer to the identifier of a {@link Species}, {@link SpeciesReference} (in SBML
 * Level&nbsp;3), {@link Compartment}, or {@link Parameter} object in the model (but not a
 * {@link Reaction}).  The entity identified must have its \'constant\' attribute set
 * to <code>false.</code>  The effects of an {@link AssignmentRule} are in general terms the
 * same, but differ in the precise details depending on the type of
 * variable being set: <ul>
<p>
 * <li> <em>In the case of a species</em>, an {@link AssignmentRule} sets the
 * referenced species\' quantity (whether a \'concentration\' or \'amount\') to
 * the value determined by the formula in the MathML subelement \'math\'.
 * The unit associated with the value produced by the \'math\' formula 
 * <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or <em>must</em> (in
 * SBML releases prior to Level&nbsp;2 version&nbsp;4) be equal to the unit
 * associated with the species\' quantity.  <em>Restrictions</em>: There
 * must not be both an {@link AssignmentRule} \'variable\' attribute and a
 * {@link SpeciesReference} \'species\' attribute having the same value, unless the
 * referenced {@link Species} object has its \'boundaryCondition\' attribute set to
 * <code>true.</code>  In other words, an assignment rule cannot be defined for a
 * species that is created or destroyed in a reaction unless that species
 * is defined as a boundary condition in the model.
 * <p>
 * <li> (For SBML Level&nbsp;3 only) <em>In the case of a species
 * reference</em>, an {@link AssignmentRule} sets the stoichiometry of the
 * referenced reactant or product to the value determined by the formula in
 * \'math\'.  The unit associated with the value produced by the \'math\'
 * formula should be consistent with the unit \'dimensionless\', because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
  * <p>
 * <li> <em>In the case of a compartment</em>, an {@link AssignmentRule} sets the
 * referenced compartment\'s size to the value determined by the formula in
 * the \'math\' subelement of the {@link AssignmentRule} object.  The overall units
 * of the formula in \'math\' <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4
 * and in SBML Level&nbsp;3) or <em>must</em> (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the same as the units of the size of the compartment.
 * <p>
 * <li> <em>In the case of a parameter</em>, an {@link AssignmentRule} sets the
 * referenced parameter\'s value to that determined by the formula in the
 * \'math\' subelement of the {@link AssignmentRule} object.  The overall units of
 * the formula in the \'math\' subelement <em>should</em> (in SBML Level&nbsp;2
 * Version&nbsp;4 and in SBML Level&nbsp;3) or <em>must</em> (in SBML releases prior to
 * Level&nbsp;2 version&nbsp;4) be the same as the units defined for the
 * parameter.  </ul>
 * <p>
 * In the context of a simulation, assignment rules are in effect at all
 * times, <em>t</em> &#8805; <em>0</em>.  For purposes of evaluating
 * expressions that involve the <em>delay</em> \'csymbol\' (see the SBML
 * Level&nbsp;2 specification), assignment rules are considered to apply
 * also at <em>t</em> &#8804; <em>0</em>.  Please consult the relevant
 * SBML specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * &#8804; <em>0</em>.
 * <p>
 * A model must not contain more than one {@link AssignmentRule} or {@link RateRule}
 * object having the same value of \'variable\'; in other words, in the set
 * of all assignment rules and rate rules in an SBML model, each variable
 * appearing in the left-hand sides can only appear once.  This simply
 * follows from the fact that an indeterminate system would result if a
 * model contained more than one assignment rule for the same variable or
 * both an assignment rule and a rate rule for the same variable.
 * <p>
 * Similarly, a model must also not contain <em>both</em> an {@link AssignmentRule}
 * and an {@link InitialAssignment} for the same variable, because both kinds of
 * constructs apply prior to and at the start of simulation time, i.e.,
 * <em>t</em> &#8804; <em>0</em>.  If a model contained both an initial
 * assignment and an assignment rule for the same variable, an
 * indeterminate system would result.
 * <p>
 * The value calculated by an {@link AssignmentRule} object overrides the value
 * assigned to the given symbol by the object defining that symbol.  For
 * example, if a {@link Compartment} object\'s \'size\' attribute value is set in its
 * definition, and the model also contains an {@link AssignmentRule} object having
 * that compartment\'s \'id\' as its \'variable\' value, then the \'size\'
 * assigned in the {@link Compartment} object definition is ignored and the value
 * assigned based on the computation defined in the {@link AssignmentRule}.  This
 * does <em>not</em> mean that a definition for a given symbol can be
 * omitted if there is an {@link AssignmentRule} object for it.  For example, there
 * must be a {@link Parameter} definition for a given parameter if there is an
 * {@link AssignmentRule} for that parameter.  It is only a question of which value
 * definition takes precedence.
 * <p>
 * <h2>General summary of SBML rules</h2>
 * <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into three
 * subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible functional
 * forms (where <em>x</em> is a variable, <em>f</em> is some arbitrary
 * function returning a numerical result, <b><em>V</em></b> is a vector of
 * variables that does not include <em>x</em>, and <b><em>W</em></b> is a
 * vector of variables that may include <em>x</em>):
 * <p>
 * <center>
 * <table border=\'0\' cellpadding=\'0\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * </center>
 * <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)<p>
 * <p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.<p>
 * <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;<p>
 * <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and<p>
 * <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * </ul>
 * <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 * <p>
 * <h2>Additional restrictions on SBML rules</h2>
 * <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * <p>
 * <h3>A model must not contain algebraic loops</h3>
 * <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * <p>
 * <h3>A model must not be overdetermined</h3>
 * <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 * <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 * <p>
 * <p>
 * <h2>{@link Rule} types for SBML Level 1</h2>
 * <p>
 * SBML Level 1 uses a different scheme than SBML Level&nbsp;2 and
 * Level&nbsp;3 for distinguishing rules; specifically, it uses an
 * attribute whose value is drawn from an enumeration of 3 values.  LibSBML
 * supports this using methods that work with the enumeration
 * values  listed in the following table.  
 * <p>
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'normal-font\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <td><strong>Enumerator</strong></td>
 *      <td><strong>Meaning</strong></td>
 *  </tr>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}</code></td><td>Indicates the rule is a \'rate\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}</code></td><td>Indicates the rule is a \'scalar\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}</code></td><td>Indicates the rule type is unknown or not
 * yet set.</td>
 * </table>
 * </center>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) RateRule "
/** 
 * LibSBML implementation of SBML\'s RateRule construct.
 * <p>
 * The rule type {@link RateRule} is derived from the parent class {@link Rule}.  It is
 * used to express equations that determine the rates of change of
 * variables.  The left-hand side (the \'variable\' attribute) can refer to
 * the identifier of a species, compartment, or parameter (but not a
 * reaction).  The entity identified must have its \'constant\' attribute set
 * to <code>false.</code>  The effects of a {@link RateRule} are in general terms the same,
 * but differ in the precise details depending on which variable is being
 * set:
 * <p>
 * <ul> <li> <em>In the case of a species</em>, a {@link RateRule} sets the rate of
 * change of the species\' quantity (<em>concentration</em> or <em>amount of
 * substance</em>) to the value determined by the formula in the \'math\'
 * subelement of the {@link RateRule} object.  The overall units of the formula in
 * \'math\' <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3) or 
 * <em>must</em> (in SBML releases prior to Level&nbsp;2 version&nbsp;4) be equal to
 * the unit of <em>species quantity</em> divided by the model-wide unit of
 * <em>time</em>.  <em>Restrictions</em>: There must not be both a {@link RateRule}
 * \'variable\' attribute and a {@link SpeciesReference} \'species\' attribute having
 * the same value, unless that species has its \'boundaryCondition\'
 * attribute is set to <code>true.</code>  This means a rate rule cannot be defined
 * for a species that is created or destroyed in a reaction, unless that
 * species is defined as a boundary condition in the model.
 * <p>
 * <li> (For SBML Level&nbsp;3 only) <em>In the case of a species
 * reference</em>, a {@link RateRule} sets the rate of change of the stoichiometry
 * of the referenced reactant or product to the value determined by the
 * formula in \'math\'.  The unit associated with the value produced by the
 * \'math\' formula should be consistent with the unit \'dimensionless\'
 * divided by the model-wide unit of <em>time</em>.
 * <p>
 * <li> <em>In the case of a compartment</em>, a {@link RateRule} sets the rate of
 * change of the compartment\'s size to the value determined by the formula
 * in the \'math\' subelement of the {@link RateRule} object.  The overall units of
 * the formula <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML
 * Level&nbsp;3) or <em>must</em> (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the units of the compartment\'s <em>size</em> divided
 * by the model-wide unit of <em>time</em>.
 * <p>
 * <li> <em>In the case of a parameter</em>, a {@link RateRule} sets the rate of
 * change of the parameter\'s value to that determined by the formula in the
 * \'math\' subelement of the {@link RateRule} object.  The overall units of the
 * formula <em>should</em> (in SBML Level&nbsp;2 Version&nbsp;4 and in SBML
 * Level&nbsp;3) or <em>must</em> (in SBML releases prior to Level&nbsp;2
 * version&nbsp;4) be the {@link Parameter} object\'s \'unit\' attribute value divided
 * by the model-wide unit of <em>time</em>.  </ul>
 * <p>
 * In the context of a simulation, rate rules are in effect for simulation
 * time <em>t</em> &lt; <em>0</em>.  Please consult the relevant SBML
 * specification for additional information about the semantics of
 * assignments, rules, and entity values for simulation time <em>t</em>
 * &#8804; <em>0</em>.
 * <p>
 * As mentioned in the description of {@link AssignmentRule}, a model must not
 * contain more than one {@link RateRule} or {@link AssignmentRule} object having the same
 * value of \'variable\'; in other words, in the set of all assignment rules
 * and rate rules in an SBML model, each variable appearing in the
 * left-hand sides can only appear once.  This simply follows from the fact
 * that an indeterminate system would result if a model contained more than
 * one assignment rule for the same variable or both an assignment rule and
 * a rate rule for the same variable.
 * <p>
 * <h2>General summary of SBML rules</h2>
 * <p>
 * In SBML Level&nbsp;3 as well as Level&nbsp;2, rules are separated into
 * three subclasses for the benefit of model analysis software.  The three
 * subclasses are based on the following three different possible
 * functional forms (where <em>x</em> is a variable, <em>f</em> is some
 * arbitrary function returning a numerical result, <b><em>V</em></b> is a
 * vector of variables that does not include <em>x</em>, and
 * <b><em>W</em></b> is a vector of variables that may include <em>x</em>):
 * <p>
 * <center>
 * <table border=\'0\' cellpadding=\'0\' style=\'font-size: small\'>
 * <tr><td width=\'120px\'><em>Algebraic:</em></td><td width=\'250px\'>left-hand side is zero</td><td><em>0 = f(<b>W</b>)</em></td></tr>
 * <tr><td><em>Assignment:</em></td><td>left-hand side is a scalar:</td><td><em>x = f(<b>V</b>)</em></td></tr>
 * <tr><td><em>Rate:</em></td><td>left-hand side is a rate-of-change:</td><td><em>dx/dt = f(<b>W</b>)</em></td></tr>
 * </table>
 * </center>
 * <p>
 * In their general form given above, there is little to distinguish
 * between <em>assignment</em> and <em>algebraic</em> rules.  They are treated as
 * separate cases for the following reasons:
 * <p>
 * <ul>
 * <li> <em>Assignment</em> rules can simply be evaluated to calculate
 * intermediate values for use in numerical methods.  They are statements
 * of equality that hold at all times.  (For assignments that are only
 * performed once, see {@link InitialAssignment}.)<p>
 * <p>
 * <li> SBML needs to place restrictions on assignment rules, for example
 * the restriction that assignment rules cannot contain algebraic loops.<p>
 * <p>
 * <li> Some simulators do not contain numerical solvers capable of solving
 * unconstrained algebraic equations, and providing more direct forms such
 * as assignment rules may enable those simulators to process models they
 * could not process if the same assignments were put in the form of
 * general algebraic equations;<p>
 * <p>
 * <li> Those simulators that <em>can</em> solve these algebraic equations make a
 * distinction between the different categories listed above; and<p>
 * <p>
 * <li> Some specialized numerical analyses of models may only be applicable
 * to models that do not contain <em>algebraic</em> rules.
 * </ul>
 * <p>
 * The approach taken to covering these cases in SBML is to define an
 * abstract {@link Rule} structure containing a subelement, \'math\', to hold the
 * right-hand side expression, then to derive subtypes of {@link Rule} that add
 * attributes to distinguish the cases of algebraic, assignment and rate
 * rules.  The \'math\' subelement must contain a MathML expression defining the
 * mathematical formula of the rule.  This MathML formula must return a
 * numerical value.  The formula can be an arbitrary expression referencing
 * the variables and other entities in an SBML model.
 * <p>
 * Each of the three subclasses of {@link Rule} (AssignmentRule, {@link AlgebraicRule},
 * {@link RateRule}) inherit the the \'math\' subelement and other fields from {@link SBase}.
 * The {@link AssignmentRule} and {@link RateRule} classes add an additional attribute,
 * \'variable\'.  See the definitions of {@link AssignmentRule}, {@link AlgebraicRule} and
 * {@link RateRule} for details about the structure and interpretation of each one.
 * <p>
 * <h2>Additional restrictions on SBML rules</h2>
 * <p>
 * An important design goal of SBML rule semantics is to ensure that a
 * model\'s simulation and analysis results will not be dependent on when or
 * how often rules are evaluated.  To achieve this, SBML needs to place two
 * restrictions on rule use.  The first concerns algebraic loops in the system
 * of assignments in a model, and the second concerns overdetermined systems.
 * <p>
 * <h3>A model must not contain algebraic loops</h3>
 * <p>
 * The combined set of {@link InitialAssignment}, {@link AssignmentRule} and {@link KineticLaw}
 * objects in a model constitute a set of assignment statements that should be
 * considered as a whole.  (A {@link KineticLaw} object is counted as an assignment
 * because it assigns a value to the symbol contained in the \'id\' attribute of
 * the {@link Reaction} object in which it is defined.)  This combined set of
 * assignment statements must not contain algebraic loops&mdash;dependency
 * chains between these statements must terminate.  To put this more formally,
 * consider a directed graph in which nodes are assignment statements and
 * directed arcs exist for each occurrence of an SBML species, compartment or
 * parameter symbol in an assignment statement\'s \'math\' subelement.  Let the
 * directed arcs point from the statement assigning the symbol to the
 * statements that contain the symbol in their \'math\' subelement expressions.
 * This graph must be acyclic.
 * <p>
 * SBML does not specify when or how often rules should be evaluated.
 * Eliminating algebraic loops ensures that assignment statements can be
 * evaluated any number of times without the result of those evaluations
 * changing.  As an example, consider the set of equations <em>x = x + 1</em>,
 * <em>y = z + 200</em> and <em>z = y + 100</em>.  If this set of equations
 * were interpreted as a set of assignment statements, it would be invalid
 * because the rule for <em>x</em> refers to <em>x</em> (exhibiting one type
 * of loop), and the rule for <em>y</em> refers to <em>z</em> while the rule
 * for <em>z</em> refers back to <em>y</em> (exhibiting another type of loop).
 * Conversely, the following set of equations would constitute a valid set of
 * assignment statements: <em>x = 10</em>, <em>y = z + 200</em>, and <em>z = x
 * + 100</em>.
 * <p>
 * <h3>A model must not be overdetermined</h3>
 * <p>
 * An SBML model must not be overdetermined; that is, a model must not
 * define more equations than there are unknowns in a model.  An SBML model
 * that does not contain {@link AlgebraicRule} structures cannot be overdetermined.
 * <p>
 * LibSBML implements the static analysis procedure described in
 * Appendix&nbsp;B of the SBML Level&nbsp;3 Version&nbsp;1 Core
 * specification for assessing whether a model is overdetermined.
 * <p>
 * (In summary, assessing whether a given continuous, deterministic,
 * mathematical model is overdetermined does not require dynamic analysis; it
 * can be done by analyzing the system of equations created from the model.
 * One approach is to construct a bipartite graph in which one set of vertices
 * represents the variables and the other the set of vertices represents the
 * equations.  Place edges between vertices such that variables in the system
 * are linked to the equations that determine them.  For algebraic equations,
 * there will be edges between the equation and each variable occurring in the
 * equation.  For ordinary differential equations (such as those defined by
 * rate rules or implied by the reaction rate definitions), there will be a
 * single edge between the equation and the variable determined by that
 * differential equation.  A mathematical model is overdetermined if the
 * maximal matchings of the bipartite graph contain disconnected vertexes
 * representing equations.  If one maximal matching has this property, then
 * all the maximal matchings will have this property; i.e., it is only
 * necessary to find one maximal matching.)
 * <p>
 * <p>
 * <h2>{@link Rule} types for SBML Level 1</h2>
 * <p>
 * SBML Level 1 uses a different scheme than SBML Level&nbsp;2 and
 * Level&nbsp;3 for distinguishing rules; specifically, it uses an
 * attribute whose value is drawn from an enumeration of 3 values.  LibSBML
 * supports this using methods that work with the enumeration
 * values  listed in the following table.  
 * <p>
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'normal-font\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <td><strong>Enumerator</strong></td>
 *      <td><strong>Meaning</strong></td>
 *  </tr>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}</code></td><td>Indicates the rule is a \'rate\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}</code></td><td>Indicates the rule is a \'scalar\' rule.</td>
 * <tr><td><code>{@link  libsbmlConstants#RULE_TYPE_INVALID RULE_TYPE_INVALID}</code></td><td>Indicates the rule type is unknown or not
 * yet set.</td>
 * </table>
 * </center>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfRules "
/** 
 * LibSBML implementation of SBML\'s ListOfRules construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;3 and later versions
 * of SBML Level&nbsp;2 as well):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Rule::Rule(const Rule& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Rule}.
   */
 public";


%javamethodmodifiers Rule::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Rule}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Rule} object in the
   * list of rules within which <em>the</em> present object is embedded.
   */
 public";


%javamethodmodifiers Rule::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Rule}.
   * <p>
   * @return a (deep) copy of this {@link Rule}.
   */
 public";


%javamethodmodifiers Rule::getFormula() const "
  /**
   * Returns the mathematical expression of this {@link Rule} in text-string form.
   * <p>
   * The text string is produced by
   * <code><a href=\'{@link libsbml}.html#formulaToString(org.sbml.{@link libsbml}.ASTNode)\'>{@link libsbml}.formulaToString()</a></code>; please consult
   * the documentation for that function to find out more about the format
   * of the text-string formula.
   * <p>
   * @return the formula text string for this {@link Rule}.
   * <p>
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   * <p>
   * @see #getMath()
   */
 public";


%javamethodmodifiers Rule::getMath() const "
  /**
   * Get the mathematical formula of this {@link Rule} as an {@link ASTNode} tree.
   * <p>
   * @return an {@link ASTNode}, the value of the \'math\' subelement of this {@link Rule}.
   * <p>
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   * <p>
   * @see #getFormula()
   */
 public";


%javamethodmodifiers Rule::getVariable() const "
  /**
   * Get the value of the \'variable\' attribute of this {@link Rule} object.
   * <p>
   * In SBML Level&nbsp;1, the different rule types each have a different
   * name for the attribute holding the reference to the object
   * constituting the left-hand side of the rule.  (E.g., for
   * SBML Level&nbsp;1\'s SpeciesConcentrationRule the attribute is \'species\', for
   * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML
   * Levels&nbsp;2 and&nbsp;3, the only two types of {@link Rule} objects with a
   * left-hand side object reference are {@link AssignmentRule} and {@link RateRule}, and
   * both of them use the same name for attribute: \'variable\'.  In order to
   * make it easier for application developers to work with all Levels of
   * SBML, libSBML uses a uniform name for all of such attributes, and it
   * is \'variable\', regardless of whether Level&nbsp;1 rules or
   * Level&nbsp;2&ndash;3 rules are being used.
   * <p>
   * @return the identifier string stored as the \'variable\' attribute value
   * in this {@link Rule}, or <code>null</code> if this object is an {@link AlgebraicRule} object.
   */
 public";


%javamethodmodifiers Rule::getUnits() const "
  /**
   * Returns the units for the
   * mathematical formula of this {@link Rule}.
   * <p>
   * @return the identifier of the units for the expression of this {@link Rule}.
   * <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */
 public";


%javamethodmodifiers Rule::isSetFormula() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Rule}\'s mathematical expression is set.
   * <p>
   * This method is equivalent to isSetMath().  This version is present for
   * easier compatibility with SBML Level&nbsp;1, in which mathematical
   * formulas were written in text-string form.
   * <p>
   * @return <code>true</code> if the mathematical formula for this {@link Rule} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   * <p>
   * @see #isSetMath()
   */
 public";


%javamethodmodifiers Rule::isSetMath() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Rule}\'s mathematical expression is set.
   * <p>
   * This method is equivalent to isSetFormula().
   * <p>
   * @return <code>true</code> if the formula (or equivalently the math) for this
   * {@link Rule} is set, <code>false</code> otherwise.
   * <p>
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   * <p>
   * @see #isSetFormula()
   */
 public";


%javamethodmodifiers Rule::isSetVariable() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Rule}\'s \'variable\' attribute is set.
   * <p>
   * In SBML Level&nbsp;1, the different rule types each have a different
   * name for the attribute holding the reference to the object
   * constituting the left-hand side of the rule.  (E.g., for
   * SBML Level&nbsp;1\'s SpeciesConcentrationRule the attribute is \'species\', for
   * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML
   * Levels&nbsp;2 and&nbsp;3, the only two types of {@link Rule} objects with a
   * left-hand side object reference are {@link AssignmentRule} and {@link RateRule}, and
   * both of them use the same name for attribute: \'variable\'.  In order to
   * make it easier for application developers to work with all Levels of
   * SBML, libSBML uses a uniform name for all such attributes, and it is
   * \'variable\', regardless of whether Level&nbsp;1 rules or
   * Level&nbsp;2&ndash;3 rules are being used.
   * <p>
   * @return <code>true</code> if the \'variable\' attribute value of this {@link Rule} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Rule::isSetUnits() const "
  /**
   * Predicate returning <code>true</code>
   * if this {@link Rule}\'s \'units\' attribute is set.
   * <p>
   * @return <code>true</code> if the units for this {@link Rule} is set, <code>false</code>
   * otherwise
   * <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */
 public";


%javamethodmodifiers Rule::setFormula(const std::string& formula) "
  /**
   * Sets the \'math\' subelement of this {@link Rule} to an expression in
   * text-string form.
   * <p>
   * This is equivalent to setMath(ASTNode math).  The provision of
   * using text-string formulas is retained for easier SBML Level&nbsp;1
   * compatibility.  The formula is converted to an {@link ASTNode} internally.
   * <p>
   * @param formula a mathematical formula in text-string form.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note The attribute \'formula\' is specific to SBML Level&nbsp;1; in
   * higher Levels of SBML, it has been replaced with a subelement named
   * \'math\'.  However, libSBML provides a unified interface to the
   * underlying math expression and this method can be used for models
   * of all Levels of SBML.
   * <p>
   * @see #setMath(ASTNode math)
   */
 public";


%javamethodmodifiers Rule::setMath(const ASTNode* math) "
  /**
   * Sets the \'math\' subelement of this {@link Rule} to a copy of the given
   * {@link ASTNode}.
   * <p>
   * @param math the {@link ASTNode} structure of the mathematical formula.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note The subelement \'math\' is present in SBML Levels&nbsp;2
   * and&nbsp;3.  In SBML Level&nbsp;1, the equivalent construct is the
   * attribute named \'formula\'.  LibSBML provides a unified interface to
   * the underlying math expression and this method can be used for models
   * of all Levels of SBML.
   * <p>
   * @see #setFormula(String formula)
   */
 public";


%javamethodmodifiers Rule::setVariable(const std::string& sid) "
  /**
   * Sets the \'variable\' attribute value of this {@link Rule} object.
   * <p>
   * In SBML Level&nbsp;1, the different rule types each have a different
   * name for the attribute holding the reference to the object
   * constituting the left-hand side of the rule.  (E.g., for
   * SBML Level&nbsp;1\'s SpeciesConcentrationRule the attribute is \'species\', for
   * CompartmentVolumeRule it is \'compartment\', etc.)  In SBML
   * Levels&nbsp;2 and&nbsp;3, the only two types of {@link Rule} objects with a
   * left-hand side object reference are {@link AssignmentRule} and {@link RateRule}, and
   * both of them use the same name for attribute: \'variable\'.  In order to
   * make it easier for application developers to work with all Levels of
   * SBML, libSBML uses a uniform name for all such attributes, and it is
   * \'variable\', regardless of whether Level&nbsp;1 rules or
   * Level&nbsp;2&ndash;3 rules are being used.
   * <p>
   * @param sid the identifier of a {@link Compartment}, {@link Species} or {@link Parameter}
   * elsewhere in the enclosing {@link Model} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Rule::setUnits(const std::string& sname) "
  /**
   * Sets the units for this {@link Rule}.
   * <p>
   * @param sname the identifier of the units
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */
 public";


%javamethodmodifiers Rule::unsetUnits "
  /**
   * Unsets the \'units\' for this {@link Rule}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attribute \'units\' exists on SBML Level&nbsp;1 ParameterRule
   * objects only.  It is not present in SBML Levels&nbsp;2 and&nbsp;3.
   */
 public";


%javamethodmodifiers Rule::getDerivedUnitDefinition "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link Rule}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link Rule} and the model quantities referenced by <code>&lt;ci&gt;</code>
   * elements used within that expression.  The getDerivedUnitDefinition()
   * method returns the calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the {@link Rule}
   * contains pure numbers or parameters with undeclared units.  In those
   * cases, it is not possible to calculate the units of the overall
   * expression without making assumptions.  LibSBML does not make
   * assumptions about the units, and getDerivedUnitDefinition() only
   * returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  <strong>It is important that callers also
   * invoke the method</strong>
   * {@link Rule#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers may
   * wish to take suitable actions in those scenarios.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Rule}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers Rule::getDerivedUnitDefinition() const "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units of
   * measurement assumed for the \'math\' expression of this {@link Rule}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link Rule} and the model quantities referenced by <code>&lt;ci&gt;</code>
   * elements used within that expression.  The getDerivedUnitDefinition()
   * method returns the calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the {@link Rule}
   * contains pure numbers or parameters with undeclared units.  In those
   * cases, it is not possible to calculate the units of the overall
   * expression without making assumptions.  LibSBML does not make
   * assumptions about the units, and getDerivedUnitDefinition() only
   * returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  <strong>It is important that callers also
   * invoke the method</strong>
   * {@link Rule#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers
   * may wish to take suitable actions in those scenarios.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Rule}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers Rule::containsUndeclaredUnits "
  /**
   * Predicate returning <code>true</code> if 
   * the math expression of this {@link Rule} contains
   * parameters/numbers with undeclared units.
   * <p>
   * @return <code>true</code> if the math expression of this {@link Rule}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by getDerivedUnitDefinition() may not accurately represent
   * the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers Rule::containsUndeclaredUnits() const "
  /**
   * Predicate returning <code>true</code> if 
   * the math expression of this {@link Rule} contains
   * parameters/numbers with undeclared units.
   * <p>
   * @return <code>true</code> if the math expression of this {@link Rule}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by getDerivedUnitDefinition() may not accurately represent
   * the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers Rule::getType() const "
  /**
   * Get the type of rule this is.
   * <p>
   * @return the rule type (a value drawn from the enumeration <a
   * class=\'el\' href=\'#RuleType_t\'>RuleType_t</a>) of this {@link Rule}.  The value
   * will be either {@link  libsbmlConstants#RULE_TYPE_RATE RULE_TYPE_RATE}
   * or {@link  libsbmlConstants#RULE_TYPE_SCALAR RULE_TYPE_SCALAR}.
   * <p>
   * @note The attribute \'type\' on {@link Rule} objects is present only in SBML
   * Level&nbsp;1.  In SBML Level&nbsp;2 and later, the type has been
   * replaced by subclassing the {@link Rule} object.
   */
 public";


%javamethodmodifiers Rule::isAlgebraic() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Rule} is an {@link AlgebraicRule}.
   * <p>
   * @return <code>true</code> if this {@link Rule} is an {@link AlgebraicRule}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Rule::isAssignment() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Rule} is an {@link AssignmentRule}.
   * <p>
   * @return <code>true</code> if this {@link Rule} is an {@link AssignmentRule}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Rule::isCompartmentVolume() const "
  /**
   * Predicate returning <code>true</code> if this {@link Rule} is an CompartmentVolumeRule
   * or equivalent.
   * <p>
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit CompartmentVolumeRule), as well as other Levels of
   * SBML.  For Levels above Level&nbsp;1, this method checks the symbol
   * being affected by the rule, and returns <code>true</code> if the symbol is the
   * identifier of a {@link Compartment} object defined in the model.
   * <p>
   * @return <code>true</code> if this {@link Rule} is a CompartmentVolumeRule, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers Rule::isParameter() const "
  /**
   * Predicate returning <code>true</code> if this {@link Rule} is an ParameterRule or
   * equivalent.
   * <p>
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit ParameterRule), as well as other Levels of
   * SBML.  For Levels above Level&nbsp;1, this method checks the symbol
   * being affected by the rule, and returns <code>true</code> if the symbol is the
   * identifier of a {@link Parameter} object defined in the model.
   * <p>
   * @return <code>true</code> if this {@link Rule} is a ParameterRule, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers Rule::isRate() const "
  /**
   * Predicate returning <code>true</code> if this {@link Rule}
   * is a {@link RateRule} (SBML Levels&nbsp;2&ndash;3) or has a \'type\' attribute
   * value of <code>\'rate\'</code> (SBML Level&nbsp;1).
   * <p>
   * @return <code>true</code> if this {@link Rule} is a {@link RateRule} (Level&nbsp;2) or has
   * type \'rate\' (Level&nbsp;1), <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Rule::isScalar() const "
  /**
   * Predicate returning <code>true</code> if this {@link Rule}
   * is an {@link AssignmentRule} (SBML Levels&nbsp;2&ndash;3) or has a \'type\'
   * attribute value of <code>\'scalar\'</code> (SBML Level&nbsp;1).
   * <p>
   * @return <code>true</code> if this {@link Rule} is an {@link AssignmentRule} (Level&nbsp;2) or has
   * type \'scalar\' (Level&nbsp;1), <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Rule::isSpeciesConcentration() const "
  /**
   * Predicate returning <code>true</code> if this {@link Rule} is a
   * SpeciesConcentrationRule or equivalent.
   * <p>
   * This libSBML method works for SBML Level&nbsp;1 models (where there is
   * such a thing as an explicit SpeciesConcentrationRule), as well as
   * other Levels of SBML.  For Levels above Level&nbsp;1, this method
   * checks the symbol being affected by the rule, and returns <code>true</code> if
   * the symbol is the identifier of a {@link Species} object defined in the model.
   * <p>
   * @return <code>true</code> if this {@link Rule} is a SpeciesConcentrationRule, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers Rule::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Rule::getL1TypeCode() const "
  /**
   * Returns the SBML Level&nbsp;1 type code for this {@link Rule} object.
   * <p>
   * This method only applies to SBML Level&nbsp;1 model objects.  If this
   * is not an SBML Level&nbsp;1 rule object, this method will return {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}.
   * <p>
   * @return the SBML Level&nbsp;1 type code for this {@link Rule} (namely, {@link 
   * libsbmlConstants#SBML_COMPARTMENT_VOLUME_RULE
   * SBML_COMPARTMENT_VOLUME_RULE}, {@link 
   * libsbmlConstants#SBML_PARAMETER_RULE SBML_PARAMETER_RULE}, {@link 
   * libsbmlConstants#SBML_SPECIES_CONCENTRATION_RULE
   * SBML_SPECIES_CONCENTRATION_RULE}, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN}).
   */
 public";


%javamethodmodifiers Rule::getElementName() const "
  /**
   * Returns the XML element name of this object
   * <p>
   * The returned value can be any of a number of different strings,
   * depending on the SBML Level in use and the kind of {@link Rule} object this
   * is.  The rules as of libSBML version 5.0.0

   * are the following:
   * <ul>
   * <li> (Level&nbsp;2 and&nbsp;3) RateRule: returns <code>\'rateRule\'</code>
   * <li> (Level&nbsp;2 and&nbsp;3) AssignmentRule: returns <code>\'assignmentRule\'</code> 
   * <li> (Level&nbsp;2 and&nbsp;3) AlgebraicRule: returns <code>\'algebraicRule\'</code>
   * <li> (Level&nbsp;1 Version&nbsp;1) SpecieConcentrationRule: returns <code>\'specieConcentrationRule\'</code>
   * <li> (Level&nbsp;1 Version&nbsp;2) SpeciesConcentrationRule: returns <code>\'speciesConcentrationRule\'</code>
   * <li> (Level&nbsp;1) CompartmentVolumeRule: returns <code>\'compartmentVolumeRule\'</code>
   * <li> (Level&nbsp;1) ParameterRule: returns <code>\'parameterRule\'</code>
   * <li> Unknown rule type: returns <code>\'unknownRule\'</code>
   * </ul>
   * <p>
   * Beware that the last (<code>\'unknownRule\'</code>) is not a valid SBML element
   * name.
   * <p>
   * @return the name of this element
   */
 public";


%javamethodmodifiers Rule::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::setL1TypeCode(int type) "
  /**
   * Sets the SBML Level&nbsp;1 type code for this {@link Rule}.
   * <p>
   * @param type the SBML Level&nbsp;1 type code for this {@link Rule}. The
   * allowable values are {@link  libsbmlConstants#SBML_COMPARTMENT_VOLUME_RULE
   * SBML_COMPARTMENT_VOLUME_RULE}, {@link 
   * libsbmlConstants#SBML_PARAMETER_RULE SBML_PARAMETER_RULE}, and
   * {@link  libsbmlConstants#SBML_SPECIES_CONCENTRATION_RULE
   * SBML_SPECIES_CONCENTRATION_RULE}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * if given <code>type</code> value is not one of the above.
   */
 public";


%javamethodmodifiers Rule::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if all the
   * required elements for this {@link Rule} object have been set.
   * <p>
   * The only required element for a {@link Rule} object is the \'math\' subelement.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Rule::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if all the
   * required attributes for this {@link Rule} object have been set.
   * <p>
   * The required attributes for a {@link Rule} object depend on the type of {@link Rule}
   * it is.  For {@link AssignmentRule} and {@link RateRule} objects (and SBML
   * Level&nbsp1\'s SpeciesConcentrationRule, CompartmentVolumeRule, and
   * ParameterRule objects), the required attribute is \'variable\'; for
   * {@link AlgebraicRule} objects, there is no required attribute.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Rule::getInternalId() const "
  /**
   * Predicate returning <code>true</code> if all the
   * required attributes for this {@link Rule} object have been set.
   * <p>
   * The required attributes for a {@link Rule} object depend on the type of {@link Rule}
   * it is.  For {@link AssignmentRule} and {@link RateRule} objects (and SBML
   * Level&nbsp1\'s SpeciesConcentrationRule, CompartmentVolumeRule, and
   * ParameterRule objects), the required attribute is \'variable\'; for
   * {@link AlgebraicRule} objects, there is no required attribute.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::setInternalId(std::string id) "
  /**
   * Predicate returning <code>true</code> if all the
   * required attributes for this {@link Rule} object have been set.
   * <p>
   * The required attributes for a {@link Rule} object depend on the type of {@link Rule}
   * it is.  For {@link AssignmentRule} and {@link RateRule} objects (and SBML
   * Level&nbsp1\'s SpeciesConcentrationRule, CompartmentVolumeRule, and
   * ParameterRule objects), the required attribute is \'variable\'; for
   * {@link AlgebraicRule} objects, there is no required attribute.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::getId() const "
  /**
   * Predicate returning <code>true</code> if all the
   * required attributes for this {@link Rule} object have been set.
   * <p>
   * The required attributes for a {@link Rule} object depend on the type of {@link Rule}
   * it is.  For {@link AssignmentRule} and {@link RateRule} objects (and SBML
   * Level&nbsp1\'s SpeciesConcentrationRule, CompartmentVolumeRule, and
   * ParameterRule objects), the required attribute is \'variable\'; for
   * {@link AlgebraicRule} objects, there is no required attribute.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Rule::Rule(  int      type , unsigned int        level , unsigned int        version ) "
  /**
   * Only subclasses may create Rules.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::Rule(  int      type , SBMLNamespaces *    sbmlns ) "
  /**
   * Only subclasses may create Rules.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Rule::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers AlgebraicRule::AlgebraicRule(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link AlgebraicRule} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link AlgebraicRule}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link AlgebraicRule}
   * <p>
   * @note Upon the addition of an {@link AlgebraicRule} object to an {@link SBMLDocument}
   * (e.g., using&nbsp; {@link Model#addRule(Rule r)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link AlgebraicRule} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link AlgebraicRule} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers AlgebraicRule::AlgebraicRule(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link AlgebraicRule} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link AlgebraicRule} object to an {@link SBMLDocument}
   * (e.g., using&nbsp; {@link Model#addRule(Rule r)}, the SBML XML namespace of the
   * document <em>overrides</em> the value used when creating the {@link AlgebraicRule}
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link AlgebraicRule} is an
   * important aid to producing valid SBML.  Knowledge of the intented SBML
   * Level and Version determine whether it is valid to assign a particular
   * value to an attribute, or whether it is valid to add an object to an
   * existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers AlgebraicRule::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Rule}.
   * <p>
   * @return a (deep) copy of this {@link Rule}.
   */
 public";


%javamethodmodifiers AlgebraicRule::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link AlgebraicRule}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link AlgebraicRule} object
   * in the list of rules within which <em>the</em> present object is embedded.
   */
 public";


%javamethodmodifiers AlgebraicRule::setInternalIdOnly "
  /**
   * sets the mInternalIdOnly flag
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers AlgebraicRule::getInternalIdOnly() const "
  /**
   * sets the mInternalIdOnly flag
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers AlgebraicRule::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link AlgebraicRule} object
   * have been set.
   * <p>
   * @note In SBML Levels&nbsp;2&ndash;3, there is no required attribute
   * for an {@link AlgebraicRule} object.  For Level&nbsp;1, the only required
   * attribute is \'formula\'.
   * <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers AssignmentRule::AssignmentRule(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link AssignmentRule} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link AssignmentRule}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link AssignmentRule}
   * <p>
   * @note Upon the addition of an {@link AssignmentRule} object to an {@link SBMLDocument}
   * (e.g., using&nbsp; {@link Model#addRule(Rule r)}, the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link AssignmentRule} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link AssignmentRule} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers AssignmentRule::AssignmentRule(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link AssignmentRule} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link AssignmentRule} object to an {@link SBMLDocument}
   * (e.g., using&nbsp; {@link Model#addRule(Rule r)}, the SBML XML namespace of
   * the document <em>overrides</em> the value used when creating the
   * {@link AssignmentRule} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a
   * {@link AssignmentRule} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers AssignmentRule::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Rule}.
   * <p>
   * @return a (deep) copy of this {@link Rule}.
   */
 public";


%javamethodmodifiers AssignmentRule::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link AssignmentRule}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link AssignmentRule} object
   * in the list of rules within which <em>the</em> present object is embedded.
   */
 public";


%javamethodmodifiers AssignmentRule::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link AssignmentRule} object
   * have been set.
   * <p>
   * @note In SBML Levels&nbsp;2&ndash;3, the only required attribute for
   * an {@link AssignmentRule} object is \'variable\'.  For Level&nbsp;1, where the
   * equivalent attribute is known by different names (\'compartment\',
   * \'species\', or \'name\', depending on the type of object), there is an
   * additional required attribute called \'formula\'.
   * <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers RateRule::RateRule(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link RateRule} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link RateRule}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link RateRule}
   * <p>
   * @note Upon the addition of a {@link RateRule} object to an {@link SBMLDocument}
   * (e.g., using&nbsp; {@link Model#addRule(Rule r)}, the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link RateRule} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link RateRule} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
  */
 public";


%javamethodmodifiers RateRule::RateRule(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link RateRule} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link RateRule} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addRule(Rule r)}, the SBML XML namespace of the document
   * <em>overrides</em> the value used when creating the {@link RateRule} object via
   * this constructor.  This is necessary to ensure that an SBML document
   * is a consistent structure.  Nevertheless, the ability to supply the
   * values at the time of creation of a {@link RateRule} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers RateRule::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Rule}.
   * <p>
   * @return a (deep) copy of this {@link Rule}.
   */
 public";


%javamethodmodifiers RateRule::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link RateRule} object
   * in the list of rules within which <em>the</em> present object is embedded.
   */
 public";


%javamethodmodifiers RateRule::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link RateRule} object
   * have been set.
   * <p>
   * @note In SBML Levels&nbsp;2&ndash;3, the only required attribute for a
   * {@link RateRule} object is \'variable\'.  For Level&nbsp;1, where the equivalent
   * attribute is known by different names (\'compartment\', \'species\', or
   * \'name\', depending on the type of object), there is an additional
   * required attribute called \'formula\'.
   * <p>
   * @return <code>true</code> if the required attributes have been set, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers ListOfRules::ListOfRules(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfRules} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfRules::ListOfRules(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfRules} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfRules} object to be created.
   */
 public";


%javamethodmodifiers ListOfRules::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfRules} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfRules}.
   */
 public";


%javamethodmodifiers ListOfRules::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfRules::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Rule} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfRules::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfRules}, the XML element name is <code>\'listOfRules\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfRules\'.</code>
   */
 public";


%javamethodmodifiers ListOfRules::get(unsigned int n) "
  /**
   * Get a {@link Rule} from the {@link ListOfRules}.
   * <p>
   * @param n the index number of the {@link Rule} to get.
   * <p>
   * @return the nth {@link Rule} in this {@link ListOfRules}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfRules::get "
  /**
   * Get a {@link Rule} from the {@link ListOfRules}.
   * <p>
   * @param n the index number of the {@link Rule} to get.
   * <p>
   * @return the nth {@link Rule} in this {@link ListOfRules}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfRules::get(const std::string& sid) "
  /**
   * Get a {@link Rule} from the {@link ListOfRules}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Rule} to get.
   * <p>
   * @return {@link Rule} in this {@link ListOfRules}
   * with the given id or <code>null</code> if no such
   * {@link Rule} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfRules::get(const std::string& sid) const "
  /**
   * Get a {@link Rule} from the {@link ListOfRules}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Rule} to get.
   * <p>
   * @return {@link Rule} in this {@link ListOfRules}
   * with the given id or <code>null</code> if no such
   * {@link Rule} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfRules::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfRules} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfRules::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfRules} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfRules::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfRules::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfRules::isValidTypeForList(SBase * item) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Constraint "
/** 
 * LibSBML implementation of SBML\'s Constraint construct.
 * <p>
 * The {@link Constraint} object class was introduced in SBML Level&nbsp;2
 * Version&nbsp;2 as a mechanism for stating the assumptions under which a
 * model is designed to operate.  The <em>constraints</em> are statements
 * about permissible values of different quantities in a model.
 * Constraints are not used to compute dynamical values for simulation or
 * analysis, but rather, they serve an advisory role for
 * simulation/analysis tools.
 * <p>
 * SBML\'s {@link Constraint} object class has one required attribute, \'id\', to
 * give the parameter a unique identifier by which other parts of an SBML
 * model definition can refer to it.  A {@link Constraint} object can also have an
 * optional \'name\' attribute of type <code>string.</code>  Identifiers and names must
 * be used according to the guidelines described in the SBML specification
 * (e.g., Section 3.3 in the Level&nbsp;2 Version 4 specification).  
 * <p>
 * {@link Constraint} has one required subelement, \'math\', containing a MathML
 * formula defining the condition of the constraint.  This formula must
 * return a boolean value of <code>true</code> when the model is a <em>valid</em>
 * state.  The formula can be an arbitrary expression referencing the
 * variables and other entities in an SBML model.  The evaluation of \'math\'
 * and behavior of constraints are described in more detail below.
 * <p>
 * A {@link Constraint} structure also has an optional subelement called \'message\'.
 * This can contain a message in XHTML format that may be displayed to the
 * user when the condition of the formula in the \'math\' subelement
 * evaluates to a value of <code>false.</code>  Software tools are not required to
 * display the message, but it is recommended that they do so as a matter
 * of best practice.  The XHTML content within a \'message\' subelement must
 * follow the same restrictions as for the \'notes\' element on {@link SBase}
 * described in in the SBML Level&nbsp;2 specification; please consult the
 * <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications\'>SBML
 * specification document</a> corresponding to the SBML Level and Version
 * of your model for more information about the requirements for \'notes\'
 * content.
 * <p>
 * {@link Constraint} was introduced in SBML Level&nbsp;2 Version&nbsp;2.  It is
 * not available in earlier versions of Level&nbsp;2 nor in any version of
 * Level&nbsp;1.
 * <p>
 * <h2>Semantics of Constraints</h2>
 * <p>
 * In the context of a simulation, a {@link Constraint} has effect at all times
 * <em>t &#8805; 0</em>.  Each {@link Constraint}\'s \'math\' subelement is first
 * evaluated after any {@link InitialAssignment} definitions in a model at <em>t =
 * 0</em> and can conceivably trigger at that point.  (In other words, a
 * simulation could fail a constraint immediately.)
 * <p>
 * {@link Constraint} structures <em>cannot and should not</em> be used to compute
 * the dynamical behavior of a model as part of, for example, simulation.
 * Constraints may be used as input to non-dynamical analysis, for instance
 * by expressing flux constraints for flux balance analysis.
 * <p>
 * The results of a simulation of a model containing a constraint are
 * invalid from any simulation time at and after a point when the function
 * given by the \'math\' subelement returns a value of <code>false.</code>  Invalid
 * simulation results do not make a prediction of the behavior of the
 * biochemical reaction network represented by the model.  The precise
 * behavior of simulation tools is left undefined with respect to
 * constraints.  If invalid results are detected with respect to a given
 * constraint, the \'message\' subelement may optionally be displayed to the
 * user.  The simulation tool may also halt the simulation or clearly
 * delimit in output data the simulation time point at which the simulation
 * results become invalid.
 * <p>
 * SBML does not impose restrictions on duplicate {@link Constraint} definitions or
 * the order of evaluation of {@link Constraint} objects in a model.  It is
 * possible for a model to define multiple constraints all with the same
 * mathematical expression.  Since the failure of any constraint indicates
 * that the model simulation has entered an invalid state, a system is not
 * required to attempt to detect whether other constraints in the model
 * have failed once any one constraint has failed.
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) ListOfConstraints "
/** 
 * LibSBML implementation of SBML\'s ListOfConstraints construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Constraint::Constraint(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Constraint} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Constraint}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Constraint}
   * <p>
   * @note Upon the addition of a {@link Constraint} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addConstraint(Constraint c)}), the
   * SBML Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link Constraint} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link Constraint} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Constraint::Constraint(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Constraint} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Constraint} object to an {@link SBMLDocument}
   * (e.g., using {@link Model#addConstraint(Constraint c)}), the
   * SBML XML namespace of the document <em>overrides</em> the value used when
   * creating the {@link Constraint} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link Constraint} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Constraint::Constraint(const Constraint& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Constraint}.
   */
 public";


%javamethodmodifiers Constraint::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Constraint}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Constraint} in the
   * list of constraints within which this {@link Constraint} is embedded (i.e., in
   * the {@link ListOfConstraints} located in the enclosing {@link Model} instance).
   */
 public";


%javamethodmodifiers Constraint::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Constraint}.
   * <p>
   * @return a (deep) copy of this {@link Constraint}.
   */
 public";


%javamethodmodifiers Constraint::getMessage() const "
  /**
   * Get the message, if any, associated with this {@link Constraint}
   * <p>
   * @return the message for this {@link Constraint}, as an {@link XMLNode}.
   */
 public";


%javamethodmodifiers Constraint::getMessageString() const "
  /**
   * Get the message string, if any, associated with this {@link Constraint}
   * <p>
   * @return the message for this {@link Constraint}, as a string.
   */
 public";


%javamethodmodifiers Constraint::getMath() const "
  /**
   * Get the mathematical expression of this {@link Constraint}
   * <p>
   * @return the math for this {@link Constraint}, as an {@link ASTNode}.
   */
 public";


%javamethodmodifiers Constraint::isSetMessage() const "
  /**
   * Predicate returning <code>true</code> if a
   * message is defined for this {@link Constraint}.
   * <p>
   * @return <code>true</code> if the message of this {@link Constraint} is set,
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Constraint::isSetMath() const "
  /**
   * Predicate returning <code>true</code> if a
   * mathematical formula is defined for this {@link Constraint}.
   * <p>
   * @return <code>true</code> if the \'math\' subelement for this {@link Constraint} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Constraint::setMessage(const XMLNode* xhtml) "
  /**
   * Sets the message of this {@link Constraint}.
   * <p>
   * The {@link XMLNode} tree passed in <code>xhtml</code> is copied.
   * <p>
   * @param xhtml an XML tree containing XHTML content.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers Constraint::setMath(const ASTNode* math) "
  /**
   * Sets the mathematical expression of this {@link Constraint} to a copy of the
   * AST given as <code>math</code>.
   * <p>
   * @param math an {@link ASTNode} expression to be assigned as the \'math\'
   * subelement of this {@link Constraint}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers Constraint::unsetMessage "
  /**
   * Unsets the \'message\' subelement of this {@link Constraint}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Constraint::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Constraint::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Constraint}, is
   * always <code>\'constraint\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'constraint\'.</code>
   */
 public";


%javamethodmodifiers Constraint::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Constraint::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Constraint} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Constraint} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Constraint::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Constraint::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Constraint::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Constraint::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Constraint::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Constraint::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfConstraints::ListOfConstraints(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfConstraints} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfConstraints::ListOfConstraints(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfConstraints} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfConstraints} object to be created.
   */
 public";


%javamethodmodifiers ListOfConstraints::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfConstraints} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfConstraints}.
   */
 public";


%javamethodmodifiers ListOfConstraints::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfConstraints::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Constraint} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfConstraints::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfConstraints}, the XML element name is <code>\'listOfConstraints\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfConstraints\'.</code>
   */
 public";


%javamethodmodifiers ListOfConstraints::get(unsigned int n) "
  /**
   * Get a {@link Constraint} from the {@link ListOfConstraints}.
   * <p>
   * @param n the index number of the {@link Constraint} to get.
   * <p>
   * @return the nth {@link Constraint} in this {@link ListOfConstraints}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfConstraints::get "
  /**
   * Get a {@link Constraint} from the {@link ListOfConstraints}.
   * <p>
   * @param n the index number of the {@link Constraint} to get.
   * <p>
   * @return the nth {@link Constraint} in this {@link ListOfConstraints}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfConstraints::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfConstraints} items and returns a
   * pointer to it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfConstraints::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the {@link ListOfConstraints}
   * in a model is (in SBML Level&nbsp;2 Version 4) the tenth ListOf___.
   * (However, it differs for different Levels and Versions of SBML.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfConstraints::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Reaction "
/** 
 * LibSBML implementation of SBML\'s Reaction construct.
 * <p>
 * A <em>reaction</em> represents any transformation, transport or binding
 * process, typically a chemical reaction, that can change the quantity of
 * one or more species.  In SBML, a reaction is defined primarily in terms
 * of the participating reactants and products (and their corresponding
 * stoichiometries), along with optional modifier species, an optional rate
 * at which the reaction takes place, and optional parameters.  
 * <p>
 * As with other major object in SBML, {@link Reaction} has a mandatory attribute,
 * \'id\', used to give the compartment type an identifier.  The identifier
 * must be a text string conforming to the identifer syntax permitted in
 * SBML.  In SBML Level&nbsp;2 and Level&nbsp;3, the reaction \'id\'
 * identifier can be used in mathematical formulas elsewhere in an SBML
 * model to represent the rate of that reaction; this usage is explained
 * below.  {@link Reaction} also has an optional \'name\' attribute, of type 
 * <code>string.</code>  The \'id\' and \'name\' must be used according to the guidelines
 * described in the SBML specification.
 * <p>
 * The species participating as reactants, products, and/or modifiers in a
 * reaction are declared using lists of {@link SpeciesReference} and/or
 * {@link ModifierSpeciesReference} instances stored in subelements
 * \'listOfReactants\', \'listOfProducts\' and \'listOfModifiers\'.  Certain
 * restrictions are placed on the appearance of species in reaction
 * definitions:
 * <ul>
 * <li> The ability of a species to appear as a reactant or product of any
 * reaction in a model is governed by certain flags in that species\'
 * definition; see the definition of {@link Species} for more information.
 * <p>
 * <li> Any species appearing in the mathematical formula of the subelement
 * \'kineticLaw\' (described below) of a {@link Reaction} must be declared in at
 * least one of that {@link Reaction}\'s lists of reactants, products, and/or
 * modifiers.  Put another way, it is an error for a reaction\'s kinetic law
 * formula to refer to species that have not been declared for that
 * reaction.
 * <p>
 * <li> A reaction definition can contain an empty list of reactants
 * <em>or</em> an empty list of products, but it must have at least one
 * reactant or product; in other words, a reaction without any reactant or
 * product species is not permitted.  (This restriction does not apply to
 * modifier species, which remain optional in all cases.)
 * </ul>
 * <p>
 * A reaction can contain up to one {@link KineticLaw} object in a subelement named
 * \'kineticLaw\'.  It defines the speed at which the process defined by the
 * reaction takes place.  The description of {@link KineticLaw} provides more
 * details about its use.  Note that although the inclusion of a {@link KineticLaw}
 * object in an instance of a {@link Reaction} component is optional, there is no
 * useful default that can be substituted in place of a missing rate
 * expression in a reaction.  Moreover, a reaction\'s rate cannot be defined
 * in any other way in SBML&mdash;{@link InitialAssignment}, {@link AssignmentRule},
 * {@link RateRule}, {@link AlgebraicRule}, {@link Event}, and other constructs in SBML cannot be
 * used to set the reaction rate separately.  Nevertheless, for some
 * modeling applications, reactions without any defined rate can be
 * perfectly acceptable.
 * <p>
 * {@link Reaction} also has a boolean attribute named \'reversible\' for indicating
 * whether the reaction is reversible.  This attribute is optional in SBML
 * Level&nbsp;2, with a default of <code>true</code>; it is mandatory in SBML
 * Level&nbsp;3 (with no default value).  To say that a reaction is 
 * <em>reversible</em> is to say it can proceed in either the forward or the reverse
 * direction.  Although the reversibility of a reaction can sometimes be
 * deduced by inspecting its rate expression, this is not always the case,
 * especially for complicated expressions.  Moreover, the need in SBML to
 * allow rate expressions (i.e., {@link KineticLaw}) to be optional leads to the
 * need for a separate flag indicating reversibility.  Note that labeling a
 * reaction as irreversible is an assertion that the reaction always
 * proceeds in the given forward direction.  (Why else would it be flagged
 * as irreversible?)  This implies the rate expression in the {@link KineticLaw}
 * always has a non-negative value during simulations.  Software tools
 * could provide a means of optionally testing that this condition holds.
 * The presence of reversibility information in two places (i.e., the rate
 * expression and the \'reversible\' attribute on {@link Reaction}) leaves open the
 * possibility that a model could contain contradictory information, but
 * the creation of such a model would be an error on the part of the
 * software generating it.
 * <p>
 * The {@link Reaction} object class has another boolean attribute called \'fast\'.
 * This attribute is optional in SBML Level&nbsp;2, with a default of 
 * <code>false</code>; it is mandatory in SBML Level&nbsp;3 (with no default value).  It
 * is used to indicate that a reaction occurs on a vastly faster time scale
 * than others in a system.  Readers are directed to the SBML Level&nbsp;2
 * Version&nbsp;4 specification, which provides more detail about the
 * conditions under which a reaction can be considered to be fast in this
 * sense.  The attribute\'s default value is <code>false.</code>  SBML Level&nbsp;1
 * and Level&nbsp;2 Version&nbsp;1 incorrectly claimed that software tools
 * could ignore this attribute if they did not implement support for the
 * corresponding concept; however, further research in SBML has revealed
 * that this is not true, and \'fast\' <em>cannot be ignored</em> if it is
 * set to <code>true.</code>  SBML Level&nbsp;2 Versions&nbsp;2&ndash;4 therefore
 * stipulate that if a model has any reactions with \'fast\' set to <code>true</code>,
 * a software tool must be able to respect the attribute or else indicate
 * to the user that it does not have the capacity to do so.  Analysis
 * software cannot ignore the value of the \'fast\' attribute because doing
 * so may lead to different results as compared to a software system that
 * <em>does</em> make use of \'fast\'.
 * <p>
 * In SBML Level&nbsp;3 Version&nbsp;1, the {@link Reaction} object has an
 * additional optional attribute named \'compartment\', whose value must be
 * the identifier of a compartment defined in the enclosing {@link Model} object.
 * The \'compartment\' attribute can be used to indicate the compartment in
 * which the reaction is assumed to take place.  If the attribute is
 * present, its value must be the identifier of a {@link Compartment} object
 * defined in the enclosing {@link Model} object.  Similar to the \'reversible\'
 * attribute, the value of the \'compartment\' attribute has no direct impact
 * on the construction of mathematical equations for the SBML model.  When
 * a kinetic law is given for a reaction, the compartment location may
 * already be implicit in the kinetic law (although this cannot always be
 * guaranteed).  Nevertheless, software tools may find the \'compartment\'
 * attribute value useful for such purposes as analyzing the structure of
 * the model, guiding the modeler in constructing correct rate formulas,
 * and visualization purposes.
 * <p>
 * Readers are urged to read the SBML specification for more details about
 * the proper use of {@link Reaction}.
 * <p>
 * <p>
 */
"

%typemap(javaimports) ListOfReactions "
/** 
 * LibSBML implementation of SBML\'s ListOfReactions construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Reaction::Reaction(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Reaction} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Reaction}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Reaction}
   * <p>
   * @note Upon the addition of a {@link Reaction} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addReaction(Reaction r)}), the SBML Level, SBML Version and
   * XML namespace of the document <em>override</em> the values used when
   * creating the {@link Reaction} object via this constructor.  This is necessary
   * to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link Reaction} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Reaction::Reaction(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Reaction} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Reaction} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addReaction(Reaction r)}), the SBML XML namespace of the document
   * <em>overrides</em> the value used when creating the {@link Reaction} object via
   * this constructor.  This is necessary to ensure that an SBML document
   * is a consistent structure.  Nevertheless, the ability to supply the
   * values at the time of creation of a {@link Reaction} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Reaction::Reaction(const Reaction& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Reaction}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers Reaction::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Reaction}.
   * <p>
   * @return a (deep) copy of this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::initDefaults "
  /**
   * Initializes the fields of this {@link Reaction} object to \'typical\' default
   * values.
   * <p>
   * The SBML {@link Reaction} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets the \'reversible\' attribute to <code>true</code>
   * <li> Sets the \'fast\' attribute to <code>false</code>
   * <li> Marks the \'fast\' attribute as <em>not</em> having been set
   * </ul>
   * <p>
   * @warning The \'fast\' attribute must be used with care.  SBML
   * definitions before SBML Level&nbsp;2 Version&nbsp;2 incorrectly
   * indicated that software tools could ignore this attribute if they did
   * not implement support for the corresponding concept; however, further
   * research in SBML has revealed that this is not true, and \'fast\'
   * <em>cannot be ignored</em> if it is set to <code>true.</code>  Beginning with
   * SBML Level&nbsp;2 Versions&nbsp;2, the SBML specifications therefore
   * stipulate that if a model has any reactions with \'fast\' set to 
   * <code>true</code>, a software tool must be able to respect the attribute or else
   * indicate to the user that it does not have the capacity to do so.
   * Readers are directed to the SBML specifications, which provides more
   * detail about the conditions under which a reaction can be considered
   * to be fast in this sense.
   */
 public";


%javamethodmodifiers Reaction::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link Reaction}.
   * <p>
   * @return the id of this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link Reaction}.
   * <p>
   * @return the name of this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getKineticLaw() const "
  /**
   * Returns the {@link KineticLaw} object contained in this {@link Reaction}.
   * <p>
   * @return the {@link KineticLaw} instance.
   */
 public";


%javamethodmodifiers Reaction::getKineticLaw "
  /**
   * Returns the {@link KineticLaw} object contained in this {@link Reaction}.
   * <p>
   * @return the {@link KineticLaw} instance.
   */
 public";


%javamethodmodifiers Reaction::getReversible() const "
  /**
   * Returns the value of the \'reversible\' attribute on the {@link Reaction} as a
   * boolean value.
   * <p>
   * @return the reversibility status of this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getFast() const "
  /**
   * Returns the value of the \'fast\' attribute of this {@link Reaction}.
   * <p>
   * @return the \'fast\' status of this {@link Reaction}.
   * <p>
   * @warning SBML definitions before SBML Level&nbsp;2 Version&nbsp;2 incorrectly
   * indicated that software tools could ignore this attribute if they did
   * not implement support for the corresponding concept; however, further
   * research in SBML has revealed that this is not true, and \'fast\'
   * <em>cannot be ignored</em> if it is set to <code>true.</code>  SBML Level&nbsp;2
   * Versions 2, 3 and 4 therefore stipulate that if a model has any reactions
   * with \'fast\' set to <code>true</code>, a software tool must be able to respect
   * the attribute or else indicate to the user that it does not have the
   * capacity to do so.  Readers are directed to the SBML Level&nbsp;2 Version
   * 4 specification, which provides more detail about the conditions under
   * which a reaction can be considered to be fast in this sense.
   */
 public";


%javamethodmodifiers Reaction::getCompartment() const "
  /**
   * (SBML Level&nbsp;3 only) Returns the value of the \'compartment\'
   * attribute on the {@link Reaction}.
   * <p>
   * @return the compartment of this {@link Reaction}.
   * <p>
   * @note The \'compartment\' attribute is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present on {@link Reaction} in lower Levels of
   * SBML.
   */
 public";


%javamethodmodifiers Reaction::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Reaction::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Reaction::isSetKineticLaw() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Reaction} contains a kinetic law object.
   * <p>
   * @return <code>true</code> if a {@link KineticLaw} is present in this {@link Reaction},, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers Reaction::isSetFast() const "
  /**
   * Predicate returning <code>true</code> if the value of
   * the \'fast\' attribute on this {@link Reaction}.
   * <p>
   * @return <code>true</code> if the \'fast\' attribute is true, <code>false</code> otherwise.
   * <p>
   * @warning SBML definitions before SBML Level&nbsp;2 Version&nbsp;2 incorrectly
   * indicated that software tools could ignore this attribute if they did
   * not implement support for the corresponding concept; however, further
   * research in SBML has revealed that this is not true, and \'fast\'
   * <em>cannot be ignored</em> if it is set to <code>true.</code>  SBML Level&nbsp;2
   * Versions 2, 3 and 4 therefore stipulate that if a model has any reactions
   * with \'fast\' set to <code>true</code>, a software tool must be able to respect
   * the attribute or else indicate to the user that it does not have the
   * capacity to do so.  Readers are directed to the SBML Level&nbsp;2 Version
   * 4 specification, which provides more detail about the conditions under
   * which a reaction can be considered to be fast in this sense.  Note
   * also that in SBML Level&nbsp;1, \'fast\' is defined as optional with a
   * default of <code>false</code>, which means it is effectively always set.
   */
 public";


%javamethodmodifiers Reaction::isSetCompartment() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'compartment\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'compartment\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on {@link Reaction} in
   * lower Levels of SBML.
   */
 public";


%javamethodmodifiers Reaction::isSetReversible() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Reaction}\'s \'reversible\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'reversible\' attribute of this {@link Reaction} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Reaction::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link Reaction}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link Reaction}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Reaction::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link Reaction}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link Reaction}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Reaction::setKineticLaw(const KineticLaw* kl) "
  /**
   * Sets the \'kineticLaw\' subelement of this {@link Reaction} to a copy of the
   * given {@link KineticLaw} object.
   * <p>
   * @param kl the {@link KineticLaw} object to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
  */
 public";


%javamethodmodifiers Reaction::setReversible(bool value) "
  /**
   * Sets the value of the \'reversible\' attribute of this {@link Reaction}.
   * <p>
   * @param value the value of the \'reversible\' attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers Reaction::setFast(bool value) "
  /**
   * Sets the value of the \'fast\' attribute of this {@link Reaction}.
   * <p>
   * @param value the value of the \'fast\' attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @warning SBML definitions before SBML Level&nbsp;2 Version&nbsp;2 incorrectly
   * indicated that software tools could ignore this attribute if they did
   * not implement support for the corresponding concept; however, further
   * research in SBML has revealed that this is not true, and \'fast\'
   * <em>cannot be ignored</em> if it is set to <code>true.</code>  SBML Level&nbsp;2
   * Versions 2, 3 and 4 therefore stipulate that if a model has any reactions
   * with \'fast\' set to <code>true</code>, a software tool must be able to respect
   * the attribute or else indicate to the user that it does not have the
   * capacity to do so.  Readers are directed to the SBML Level&nbsp;2 Version
   * 4 specification, which provides more detail about the conditions under
   * which a reaction can be considered to be fast in this sense.
   */
 public";


%javamethodmodifiers Reaction::setCompartment(const std::string& sid) "
  /**
   * Sets the value of the \'compartment\' attribute of this {@link Reaction}.
   * <p>
   * The string <code>sid</code> is copied.  
   * <p>
   * @param sid the string to use as the compartment of this {@link Reaction}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on {@link Reaction} in
   * lower Levels of SBML.
   */
 public";


%javamethodmodifiers Reaction::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link Reaction}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Reaction::unsetKineticLaw "
  /**
   * Unsets the \'kineticLaw\' subelement of this {@link Reaction}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Reaction::unsetFast "
  /**
   * Unsets the value of the \'fast\' attribute of this {@link Reaction}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @warning In SBML Level&nbsp;1, \'fast\' is optional with a default of 
   * <code>false</code>, which means it is effectively always set (and reset to <code>false</code>
   * if this method is called).  Further, SBML definitions before SBML
   * Level&nbsp;2 Version&nbsp;2 incorrectly indicated that software tools could
   * ignore this attribute if they did not implement support for the
   * corresponding concept; however, further research in SBML has revealed
   * that this is not true, and \'fast\' <em>cannot be ignored</em> if it is
   * set to <code>true.</code>  SBML Level&nbsp;2 Versions 2, 3 and 4 therefore stipulate
   * that if a model has any reactions with \'fast\' set to <code>true</code>, a
   * software tool must be able to respect the attribute or else indicate
   * to the user that it does not have the capacity to do so.  Readers are
   * directed to the SBML Level&nbsp;2 Version&nbsp;4 specification, which provides
   * more detail about the conditions under which a reaction can be
   * considered to be fast in this sense.
   */
 public";


%javamethodmodifiers Reaction::unsetCompartment "
  /**
   * Unsets the value of the \'compartment\' attribute of this {@link Reaction}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The \'compartment\' attribute is available in SBML
   * Level&nbsp;3 Version&nbsp;1 Core, but is not present on {@link Reaction} in
   * lower Levels of SBML.
   */
 public";


%javamethodmodifiers Reaction::addReactant(const SpeciesReference* sr) "
  /**
   * Adds a given {@link SpeciesReference} object as a reactant in this {@link Reaction}.
   * <p>
   * The {@link SpeciesReference} instance in <code>sr</code> is copied.
   * <p>
   * @param sr a {@link SpeciesReference} object referring to a {@link Species} in the
   * enclosing {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Reaction}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Reaction}</em>.  In addition, the caller should make
   * sure to free the original object if it is no longer being used, or
   * else a memory leak will result.  Please see {@link Reaction#createReactant()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createReactant()
   */
 public";


%javamethodmodifiers Reaction::addProduct(const SpeciesReference* sr) "
  /**
   * Adds a given {@link SpeciesReference} object as a product in this {@link Reaction}.
   * <p>
   * The {@link SpeciesReference} instance in <code>sr</code> is copied.
   * <p>
   * @param sr a {@link SpeciesReference} object referring to a {@link Species} in the
   * enclosing {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Reaction}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Reaction}</em>.  In addition, the caller should make
   * sure to free the original object if it is no longer being used, or
   * else a memory leak will result.  Please see {@link Reaction#createProduct()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createProduct()
   */
 public";


%javamethodmodifiers Reaction::addModifier(const ModifierSpeciesReference* msr) "
  /**
   * Adds a given {@link ModifierSpeciesReference} object as a product in this
   * {@link Reaction}.
   * <p>
   * The {@link ModifierSpeciesReference} instance in <code>msr</code> is copied.
   * <p>
   * @param msr a {@link ModifierSpeciesReference} object referring to a {@link Species} in
   * the enclosing {@link Model}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Reaction}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Reaction}</em>.  In addition, the caller should make
   * sure to free the original object if it is no longer being used, or
   * else a memory leak will result.  Please see {@link Reaction#createModifier()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createModifier()
   */
 public";


%javamethodmodifiers Reaction::createReactant "
  /**
   * Creates a new {@link SpeciesReference}, adds it to this {@link Reaction}\'s list of
   * reactants, and returns it.
   * <p>
   * @return a new {@link SpeciesReference} object.
   */
 public";


%javamethodmodifiers Reaction::createProduct "
  /**
   * Creates a new {@link SpeciesReference}, adds it to this {@link Reaction}\'s list of
   * products, and returns it.
   * <p>
   * @return a new {@link SpeciesReference} object.
   */
 public";


%javamethodmodifiers Reaction::createModifier "
  /**
   * Creates a new {@link ModifierSpeciesReference}, adds it to this {@link Reaction}\'s
   * list of modifiers and returns it.
   * <p>
   * @return a new {@link ModifierSpeciesReference} object.
   */
 public";


%javamethodmodifiers Reaction::createKineticLaw "
  /**
   * Creates a new {@link KineticLaw} object, installs it as this {@link Reaction}\'s
   * \'kineticLaw\' subelement, and returns it.
   * <p>
   * If this {@link Reaction} had a previous {@link KineticLaw}, it will be destroyed.
   * <p>
   * @return the new {@link KineticLaw} object
   */
 public";


%javamethodmodifiers Reaction::getListOfReactants() const "
  /**
   * Returns the list of reactants in this {@link Reaction} object.
   * <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as reactants in this reaction
   */
 public";


%javamethodmodifiers Reaction::getListOfReactants "
  /**
   * Returns the list of reactants in this {@link Reaction} object.
   * <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as reactants in this reaction
   */
 public";


%javamethodmodifiers Reaction::getListOfProducts() const "
  /**
   * Returns the list of products in this {@link Reaction} object.
   * <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as products in this reaction
   */
 public";


%javamethodmodifiers Reaction::getListOfProducts "
  /**
   * Returns the list of products in this {@link Reaction} object.
   * <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as products in this reaction
   */
 public";


%javamethodmodifiers Reaction::getListOfModifiers() const "
  /**
   * Returns the list of modifiers in this {@link Reaction} object.
   * <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as modifiers in this reaction
   */
 public";


%javamethodmodifiers Reaction::getListOfModifiers "
  /**
   * Returns the list of modifiers in this {@link Reaction} object.
   * <p>
   * @return the {@link ListOfSpeciesReferences} containing the references to the
   * species acting as modifiers in this reaction
   */
 public";


%javamethodmodifiers Reaction::getReactant "
  /**
   * Returns the nth reactant species (as a {@link SpeciesReference} object) in 
   * the list of reactants in this {@link Reaction}.
   * <p>
   * Callers should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the reactant sought.
   * <p>
   * @return the nth reactant (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getReactant(unsigned int n) "
  /**
   * Returns the nth reactant species (as a {@link SpeciesReference} object) 
   * in the list of reactants in this {@link Reaction}.
   * <p>
   * Callers should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the reactant sought.
   * <p>
   * @return the nth reactant (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getReactant(const std::string& species) const "
  /**
   * Returns the reactant species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   * <p>
   * @param species the identifier of the reactant {@link Species} (\'species\' 
   * attribute of the reactant {@link SpeciesReference} object)
   * <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a reactant in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getReactant(const std::string& species) "
  /**
   * Returns the reactant species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   * <p>
   * @param species the identifier of the reactant {@link Species} (\'species\' 
   * attribute of the reactant {@link SpeciesReference} object)
   * <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a reactant in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getProduct "
  /**
   * Returns the nth product species (as a {@link SpeciesReference} object) in 
   * the list of products in this {@link Reaction}.
   * <p>
   * Callers should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the product sought.
   * <p>
   * @return the nth product (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getProduct(unsigned int n) "
  /**
   * Returns the nth product species (as a {@link SpeciesReference} object) 
   * in the list of products in this {@link Reaction}.
   * <p>
   * Callers should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the product sought.
   * <p>
   * @return the nth product (as a {@link SpeciesReference} object) of this
   * {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getProduct(const std::string& species) const "
  /**
   * Returns the product species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   * <p>
   * @param species the identifier of the product {@link Species} (\'species\'
   * attribute of the product {@link SpeciesReference} object)
   * <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a product in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getProduct(const std::string& species) "
  /**
   * Returns the product species (as a {@link SpeciesReference} object) having 
   * a specific identifier in this {@link Reaction}.
   * <p>
   * @param species the identifier of the product {@link Species} (\'species\'
   * attribute of the product {@link SpeciesReference} object)
   * <p>
   * @return a {@link SpeciesReference} object, or <code>null</code> if no species with the
   * given identifier <code>species</code> appears as a product in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getModifier "
  /**
   * Returns the nth modifier species (as a {@link ModifierSpeciesReference} object) 
   * in the list of modifiers of this {@link Reaction}.
   * <p>
   * Callers should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the modifier species sought
   * <p>
   * @return the nth modifier (as a {@link ModifierSpeciesReference} object) of
   * this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getModifier(unsigned int n) "
  /**
   * Returns the nth modifier species (as a {@link ModifierSpeciesReference} object) 
   * in the list of modifiers of this {@link Reaction}.
   * <p>
   * Callers should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the modifier species sought
   * <p>
   * @return the nth modifier (as a {@link ModifierSpeciesReference} object) of
   * this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getModifier(const std::string& species) const "
  /**
   * Returns the modifier species (as a {@link ModifierSpeciesReference} object) 
   * having a specific identifier in this {@link Reaction}.
   * <p>
   * @param species the identifier of the modifier {@link Species} (\'species\' 
   * attribute of the {@link ModifierSpeciesReference} object)
   * <p>
   * @return a {@link ModifierSpeciesReference} object, or <code>null</code> if no species with
   * the given identifier <code>species</code> appears as a modifier in this
   * {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getModifier(const std::string& species) "
  /**
   * Returns the modifier species (as a {@link ModifierSpeciesReference} object) 
   * having a specific identifier in this {@link Reaction}.
   * <p>
   * @param species the identifier of the modifier {@link Species} (\'species\' 
   * attribute of the {@link ModifierSpeciesReference} object)
   * <p>
   * @return a {@link ModifierSpeciesReference} object, or <code>null</code> if no species with
   * the given identifier <code>species</code> appears as a modifier in this
   * {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getNumReactants() const "
  /**
   * Returns the number of reactant species in this {@link Reaction}.
   * <p>
   * @return the number of reactants in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getNumProducts() const "
  /**
   * Returns the number of product species in this {@link Reaction}.
   * <p>
   * @return the number of products in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::getNumModifiers() const "
  /**
   * Returns the number of modifier species in this {@link Reaction}.
   * <p>
   * @return the number of modifiers in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::removeReactant(unsigned int n) "
  /**
   * Removes the nth reactant species (SpeciesReference object) in the list of 
   * reactants in this {@link Reaction} and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumReactants() to find out how many
   * reactants there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the reactant {@link SpeciesReference} object to remove
   * <p>
   * @return the removed reactant {@link SpeciesReference} object, or <code>null</code> if the 
   * given index is out of range.
   */
 public";


%javamethodmodifiers Reaction::removeReactant(const std::string& species) "
  /**
   * Removes the reactant species (SpeciesReference object) having the given  
   * \'species\' attribute in this {@link Reaction} and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param species the \'species\' attribute of the reactant {@link SpeciesReference} 
   * object
   * <p>
   * @return the removed reactant {@link SpeciesReference} object, or <code>null</code> if no 
   * reactant {@link SpeciesReference} object with the given \'species\' attribute 
   * <code>species</code> exists in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::removeProduct(unsigned int n) "
  /**
   * Removes the nth product species (SpeciesReference object) in the list of 
   * products in this {@link Reaction} and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumProducts() to find out how many
   * products there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the product {@link SpeciesReference} object to remove
   * <p>
   * @return the removed product {@link SpeciesReference} object, or <code>null</code> if the 
   * given index is out of range.
   */
 public";


%javamethodmodifiers Reaction::removeProduct(const std::string& species) "
  /**
   * Removes the product species (SpeciesReference object) having the given  
   * \'species\' attribute in this {@link Reaction} and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param species the \'species\' attribute of the product {@link SpeciesReference} 
   * object
   * <p>
   * @return the removed product {@link SpeciesReference} object, or <code>null</code> if no 
   * product {@link SpeciesReference} object with the given \'species\' attribute 
   * <code>species</code> exists in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::removeModifier(unsigned int n) "
  /**
   * Removes the nth modifier species (ModifierSpeciesReference object) in 
   * the list of  modifiers in this {@link Reaction} and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * The caller should first call getNumModifiers() to find out how many
   * modifiers there are, to avoid using an invalid index number.
   * <p>
   * @param n the index of the {@link ModifierSpeciesReference} object to remove
   * <p>
   * @return the removed {@link ModifierSpeciesReference} object, or <code>null</code> if the 
   * given index is out of range.
   */
 public";


%javamethodmodifiers Reaction::removeModifier(const std::string& species) "
  /**
   * Removes the modifier species (ModifierSpeciesReference object) having 
   * the given \'species\' attribute in this {@link Reaction} and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param species the \'species\' attribute of the {@link ModifierSpeciesReference} 
   * object
   * <p>
   * @return the removed {@link ModifierSpeciesReference} object, or <code>null</code> if no 
   * {@link ModifierSpeciesReference} object with the given \'species\' attribute @p 
   * species exists in this {@link Reaction}.
   */
 public";


%javamethodmodifiers Reaction::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Reaction::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Reaction}, is
   * always <code>\'reaction\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'reaction\'.</code>
   */
 public";


%javamethodmodifiers Reaction::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Reaction} object have been set.
   * <p>
   * @note The required attributes for a {@link Reaction} object are:
   * <li> \'id\' (or \'name\' in SBML Level&nbsp;1)
   * <li> \'fast\' (in Level&nbsp;3 only, where it is defined as a required attribute)
   * <li> \'reversible\' (in Level&nbsp;3 only, where it is defined as a required attribute)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers Reaction::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::isExplicitlySetReversible() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Reaction::isExplicitlySetFast() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfReactions::ListOfReactions(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfReactions} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfReactions::ListOfReactions(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfReactions} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfReactions} object to be created.
   */
 public";


%javamethodmodifiers ListOfReactions::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfReactions} instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfReactions}.
   */
 public";


%javamethodmodifiers ListOfReactions::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfReactions::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Reaction} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfReactions::getElementName() const "
  /**
   * Returns the XML element name of this object
   * <p>
   * For {@link ListOfReactions}, the XML element name is <code>\'listOfReactions\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfReactions\'.</code>
   */
 public";


%javamethodmodifiers ListOfReactions::get(unsigned int n) "
  /**
   * Get a {@link Reaction} from the {@link ListOfReactions}.
   * <p>
   * @param n the index number of the {@link Reaction} to get.
   * <p>
   * @return the nth {@link Reaction} in this {@link ListOfReactions}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfReactions::get "
  /**
   * Get a {@link Reaction} from the {@link ListOfReactions}.
   * <p>
   * @param n the index number of the {@link Reaction} to get.
   * <p>
   * @return the nth {@link Reaction} in this {@link ListOfReactions}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfReactions::get(const std::string& sid) "
  /**
   * Get a {@link Reaction} from the {@link ListOfReactions}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Reaction} to get.
   * <p>
   * @return {@link Reaction} in this {@link ListOfReactions}
   * with the given id or <code>null</code> if no such
   * {@link Reaction} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfReactions::get(const std::string& sid) const "
  /**
   * Get a {@link Reaction} from the {@link ListOfReactions}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Reaction} to get.
   * <p>
   * @return {@link Reaction} in this {@link ListOfReactions}
   * with the given id or <code>null</code> if no such
   * {@link Reaction} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfReactions::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfReactions} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfReactions::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfReactions} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfReactions::getElementPosition() const "
  /**
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfReactions::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) KineticLaw "
/** 
 * LibSBML implementation of SBML\'s KineticLaw construct.
 * <p>
 * An object of class {@link KineticLaw} is used to describe the rate at which the
 * process defined by a given {@link Reaction} takes place.  {@link KineticLaw} has
 * subelements called \'math\' (for MathML content) and \'listOfParameters\'
 * (of class {@link ListOfParameters}), in addition to the attributes and
 * subelements it inherits from {@link SBase}.
 * <p>
 * {@link KineticLaw}\'s \'math\' subelement for holding a MathML formula defines the
 * rate of the reaction.  The formula may refer to other entities in a
 * model as well as local parameter definitions within the scope of the
 * {@link Reaction} (see below).  It is important to keep in mind, however, that
 * the only {@link Species} identifiers that can be used in this formula are those
 * declared in the lists of reactants, products and modifiers in the
 * {@link Reaction} structure.  (In other words, before a species can be referenced
 * in the {@link KineticLaw}, it must be declared in one of those lists.)
 * <p>
 * {@link KineticLaw} provides a way to define <em>local</em> parameters whose
 * identifiers can be used in the \'math\' formula of that {@link KineticLaw}
 * instance.  Prior to SBML Level&nbsp;3, these parameter definitions are
 * stored inside a \'listOfParameters\' subelement containing {@link Parameter}
 * objects; in SBML Level&nbsp;3, this is achieved using a specialized
 * object class called {@link LocalParameter} and the containing subelement is
 * called \'listOfLocalParameters\'.  In both cases, the parameters so
 * defined are only visible within the {@link KineticLaw}; they cannot be accessed
 * outside.  A local parameter within one reaction is not visible from
 * within another reaction, nor is it visible to any other construct
 * outside of the {@link KineticLaw} in which it is defined.  In addition, another
 * important feature is that if such a {@link Parameter} (or in Level&nbsp;3,
 * {@link LocalParameter}) object has the same identifier as another object in the
 * scope of the enclosing {@link Model}, the definition inside the {@link KineticLaw} takes
 * precedence.  In other words, within the {@link KineticLaw}\'s \'math\' formula,
 * references to local parameter identifiers <strong>shadow any identical
 * global identifiers</strong>.
 * <p>
 * The values of local parameters defined within {@link KineticLaw} objects cannot
 * change.  In SBML Level&nbsp;3, this quality is built into the
 * {@link LocalParameter} construct.  In Level&nbsp;2, where the same kind of
 * {@link Parameter} object class is used as for global parameters, the {@link Parameter}
 * objects\' \'constant\' attribute must always have a value of <code>true</code>
 * (either explicitly or left to its default value).
 * <p>
 * <p>
 * <h2>A warning about identifier shadowing</h2>
 * <p>
 * A common misconception is that different classes of objects (e.g.,
 * species, compartments, parameters) in SBML have different identifier
 * scopes.  They do not.  The implication is that if a {@link KineticLaw}\'s local
 * parameter definition uses an identifier identical to <em>any</em> other
 * identifier defined in the model outside the {@link KineticLaw}, even if the
 * other identifier does <em>not</em> belong to a parameter type of object, the
 * local parameter\'s identifier takes precedence within that {@link KineticLaw}\'s
 * \'math\' formula.  It is not an error in SBML for identifiers to shadow
 * each other this way, but can lead to confusing and subtle errors.
 * <p>
 * <p>
 * <h2>SBML Level/Version differences</h2>
 * <p>
 * In SBML Level&nbsp;2 Version&nbsp;1, the SBML specification
 * included two additional attributes on {@link KineticLaw} called \'substanceUnits\'
 * and \'timeUnits\'.  They were removed beginning with SBML Level&nbsp;2
 * Version&nbsp;2 because further research determined they introduced many
 * problems.  The most significant problem was that their use could easily
 * lead to the creation of valid models whose reactions nevertheless could
 * not be integrated into a system of equations without outside knowledge
 * for converting the quantities used.  Examination of real-life models
 * revealed that a common reason for using \'substanceUnits\' on {@link KineticLaw}
 * was to set the units of all reactions to the same set of substance
 * units, something that is better achieved by using {@link UnitDefinition} to
 * redefine <code>\'substance\'</code> for the whole {@link Model}.
 * <p>
 * As mentioned above, in SBML Level&nbsp;2 Versions 2&ndash;4, local
 * parameters are of class {@link Parameter}.  In SBML Level&nbsp;3, the class of
 * object is {@link LocalParameter}.
 */
"

%javamethodmodifiers KineticLaw::KineticLaw(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link KineticLaw} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link KineticLaw}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link KineticLaw}
   * <p>
   * @note Upon the addition of a {@link KineticLaw} object to an {@link SBMLDocument}
   * (e.g., using {@link Reaction#setKineticLaw(KineticLaw kl)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used
   * when creating the {@link KineticLaw} object via this constructor.  This is
   * necessary to ensure that an SBML document is a consistent structure.
   * Nevertheless, the ability to supply the values at the time of creation
   * of a {@link KineticLaw} is an important aid to producing valid SBML.  Knowledge
   * of the intented SBML Level and Version determine whether it is valid
   * to assign a particular value to an attribute, or whether it is valid
   * to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers KineticLaw::KineticLaw(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link KineticLaw} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link KineticLaw} object to an {@link SBMLDocument}
   * (e.g., using {@link Reaction#setKineticLaw(KineticLaw kl)}), the SBML XML namespace of the
   * document <em>overrides</em> the value used when creating the {@link KineticLaw}
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link KineticLaw} is an
   * important aid to producing valid SBML.  Knowledge of the intented SBML
   * Level and Version determine whether it is valid to assign a particular
   * value to an attribute, or whether it is valid to add an object to an
   * existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers KineticLaw::KineticLaw(const KineticLaw& orig) "
  /**
   * Copy constructor; creates a copy of this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link KineticLaw}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers KineticLaw::clone() const "
  /**
   * Creates and returns a deep copy of this {@link KineticLaw} object.
   * <p>
   * @return a (deep) copy of this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getFormula() const "
  /**
   * Returns the mathematical formula for this {@link KineticLaw} object and return
   * it as as a text string.
   * <p>
   * This is fundamentally equivalent to
   * {@link KineticLaw#getMath()}.
   * This variant is provided principally for compatibility compatibility
   * with SBML Level&nbsp;1.
   * <p>
   * @return a string representing the formula of this {@link KineticLaw}.
   * <p>
   * @note SBML Level&nbsp;1 uses a text-string format for mathematical formulas.
SBML Level&nbsp;2 uses MathML, an XML format for representing mathematical
expressions.  LibSBML provides an Abstract Syntax Tree API for working with
mathematical expressions; this API is more powerful than working with
formulas directly in text form, and ASTs can be translated into either
MathML or the text-string syntax.  The libSBML methods that accept
text-string formulas directly (such as this constructor) are provided for
SBML Level&nbsp;1 compatibility, but developers are encouraged to use the
AST mechanisms.

   * <p>
   * @see #getMath()
   */
 public";


%javamethodmodifiers KineticLaw::getMath() const "
  /**
   * Returns the mathematical formula for this {@link KineticLaw} object and return
   * it as as an AST.
   * <p>
   * This is fundamentally equivalent to
   * {@link KineticLaw#getFormula()}.
   * The latter is provided principally for compatibility compatibility
   * with SBML Level&nbsp;1, which represented mathematical formulas in
   * text-string form.
   * <p>
   * @return the {@link ASTNode} representation of the mathematical formula.
   * <p>
   * @see #getFormula()
   */
 public";


%javamethodmodifiers KineticLaw::getTimeUnits() const "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Returns the value of the
   * \'timeUnits\' attribute of this {@link KineticLaw} object.
   * <p>
   * @return the \'timeUnits\' attribute value.
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::getSubstanceUnits() const "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Returns the value of the
   * \'substanceUnits\' attribute of this {@link KineticLaw} object.
   * <p>
   * @return the \'substanceUnits\' attribute value.
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::isSetFormula() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link KineticLaw}\'s \'formula\' attribute is set.
   * <p>
   * This is functionally identical to the method
   * {@link KineticLaw#isSetMath()}.  It is
   * provided in order to mirror the parallel between
   * {@link KineticLaw#getFormula()} and
   * {@link KineticLaw#getMath()}.
   * <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link KineticLaw} is set, <code>false</code> otherwise.
   * <p>
   * @note SBML Level&nbsp;1 uses a text-string format for mathematical formulas.
SBML Level&nbsp;2 uses MathML, an XML format for representing mathematical
expressions.  LibSBML provides an Abstract Syntax Tree API for working with
mathematical expressions; this API is more powerful than working with
formulas directly in text form, and ASTs can be translated into either
MathML or the text-string syntax.  The libSBML methods that accept
text-string formulas directly (such as this constructor) are provided for
SBML Level&nbsp;1 compatibility, but developers are encouraged to use the
AST mechanisms.

   * <p>
   * @see #isSetMath()
   */
 public";


%javamethodmodifiers KineticLaw::isSetMath() const "
  /**
   * Predicate returning <code>true</code> if this
   * Kinetic\'s \'math\' subelement is set.
   * <p>
   * This is identical to the method
   * {@link KineticLaw#isSetFormula()}.
   * It is provided in order to mirror the parallel between
   * {@link KineticLaw#getFormula()} and
   * {@link KineticLaw#getMath()}.
   * <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link KineticLaw} is set, <code>false</code> otherwise.
   * <p>
   * @see #isSetFormula()
   */
 public";


%javamethodmodifiers KineticLaw::isSetTimeUnits() const "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Predicate returning <code>true</code> if
   * this {@link SpeciesReference}\'s \'timeUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'timeUnits\' attribute of this {@link KineticLaw} object
   * is set, <code>false</code> otherwise.
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::isSetSubstanceUnits() const "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Predicate returning <code>true</code> if
   * this {@link SpeciesReference}\'s \'substanceUnits\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'substanceUnits\' attribute of this {@link KineticLaw}
   * object is set, <code>false</code> otherwise.
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::setFormula(const std::string& formula) "
  /**
   * Sets the mathematical expression of this {@link KineticLaw} instance to the
   * given <code>formula</code>.
   * <p>
   * The given <code>formula</code> string is copied.  Internally, libSBML stores the
   * mathematical expression as an {@link ASTNode}.
   * <p>
   * @param formula the mathematical expression to use, represented in
   * text-string form.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note SBML Level&nbsp;1 uses a text-string format for mathematical formulas.
SBML Level&nbsp;2 uses MathML, an XML format for representing mathematical
expressions.  LibSBML provides an Abstract Syntax Tree API for working with
mathematical expressions; this API is more powerful than working with
formulas directly in text form, and ASTs can be translated into either
MathML or the text-string syntax.  The libSBML methods that accept
text-string formulas directly (such as this constructor) are provided for
SBML Level&nbsp;1 compatibility, but developers are encouraged to use the
AST mechanisms.

   * <p>
   * @see #setMath(ASTNode math)
   */
 public";


%javamethodmodifiers KineticLaw::setMath(const ASTNode* math) "
  /**
   * Sets the mathematical expression of this {@link KineticLaw} instance to a copy
   * of the given {@link ASTNode}.
   * <p>
   * This is fundamentally identical to
   * {@link KineticLaw#setFormula(String formula)}.
   * The latter is provided principally for compatibility compatibility with
   * SBML Level&nbsp;1, which represented mathematical formulas in text-string
   * form.
   * <p>
   * @param math an {@link ASTNode} representing a formula tree.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @see #setFormula(String formula)
   */
 public";


%javamethodmodifiers KineticLaw::setTimeUnits(const std::string& sid) "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Sets the \'timeUnits\' attribute
   * of this {@link KineticLaw} object to a copy of the identifier in <code>sid</code>.
   * <p>
   * @param sid the identifier of the units to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::setSubstanceUnits(const std::string& sid) "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Sets the \'substanceUnits\'
   * attribute of this {@link KineticLaw} object to a copy of the identifier given
   * in <code>sid</code>.
   * <p>
   * @param sid the identifier of the units to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::unsetTimeUnits "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Unsets the \'timeUnits\'
   * attribugte of this {@link KineticLaw} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::unsetSubstanceUnits "
  /**
   * (SBML Level&nbsp;2 Version&nbsp;1 only) Unsets the \'substanceUnits\'
   * attribute of this {@link KineticLaw} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attributes \'timeUnits\' and \'substanceUnits\' are present only
   * in SBML Level&nbsp;2 Version&nbsp;1.  In SBML Level&nbsp;2
   * Version&nbsp;2, the \'timeUnits\' and \'substanceUnits\' attributes were
   * removed.  For compatibility with new versions of SBML, users are
   * cautioned to avoid these attributes.
   */
 public";


%javamethodmodifiers KineticLaw::addParameter(const Parameter* p) "
  /**
   * Adds a copy of the given {@link Parameter} object to the list of local
   * parameters in this {@link KineticLaw}.
   * <p>
   * @param p the {@link Parameter} to add
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link KineticLaw}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link KineticLaw}</em>.  In addition, the caller should make
   * sure to free the original object if it is no longer being used, or
   * else a memory leak will result.  Please see
   * {@link KineticLaw#createParameter()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createParameter()
   */
 public";


%javamethodmodifiers KineticLaw::addLocalParameter(const LocalParameter* p) "
  /**
   * Adds a copy of the given {@link LocalParameter} object to the list of local
   * parameters in this {@link KineticLaw}.
   * <p>
   * @param p the {@link LocalParameter} to add
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link KineticLaw}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link KineticLaw}</em>.  In addition, the caller should make
   * sure to free the original object if it is no longer being used, or
   * else a memory leak will result.  Please see
   * {@link KineticLaw#createParameter()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createLocalParameter()
   */
 public";


%javamethodmodifiers KineticLaw::createParameter "
  /**
   * Creates a new {@link Parameter} object, adds it to this {@link KineticLaw}\'s list of
   * local parameters, and returns the {@link Parameter} object created.
   * <p>
   * @return a new {@link Parameter} object instance
   * <p>
   * @see #addParameter(Parameter p)
   */
 public";


%javamethodmodifiers KineticLaw::createLocalParameter "
  /**
   * Creates a new {@link LocalParameter} object, adds it to this {@link KineticLaw}\'s list
   * of local parameters, and returns the {@link LocalParameter} object created.
   * <p>
   * @return a new {@link LocalParameter} object instance
   * <p>
   * @see #addLocalParameter(LocalParameter p)
   */
 public";


%javamethodmodifiers KineticLaw::getListOfParameters() const "
  /**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   * <p>
   * @return the list of Parameters for this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getListOfParameters "
  /**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   * <p>
   * @return the list of Parameters for this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getListOfLocalParameters() const "
  /**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   * <p>
   * @return the list of LocalParameters for this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getListOfLocalParameters "
  /**
   * Returns the list of local parameters in this {@link KineticLaw} object.
   * <p>
   * @return the list of LocalParameters for this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getParameter "
  /**
   * Returns the nth {@link Parameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   * <p>
   * @param n the index of the {@link Parameter} object sought
   * <p>
   * @return the nth {@link Parameter} of this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getParameter(unsigned int n) "
  /**
   * Returns the nth {@link Parameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   * <p>
   * @param n the index of the {@link Parameter} object sought
   * <p>
   * @return the nth {@link Parameter} of this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getLocalParameter "
  /**
   * Returns the nth {@link LocalParameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   * <p>
   * @param n the index of the {@link LocalParameter} object sought
   * <p>
   * @return the nth {@link LocalParameter} of this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getLocalParameter(unsigned int n) "
  /**
   * Returns the nth {@link LocalParameter} object in the list of local parameters in
   * this {@link KineticLaw} instance.
   * <p>
   * @param n the index of the {@link LocalParameter} object sought
   * <p>
   * @return the nth {@link LocalParameter} of this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getParameter(const std::string& sid) const "
  /**
   * Returns a local parameter based on its identifier.
   * <p>
   * @param sid the identifier of the {@link Parameter} being sought.
   * <p>
   * @return the {@link Parameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link Parameter} exists.
   */
 public";


%javamethodmodifiers KineticLaw::getParameter(const std::string& sid) "
  /**
   * Returns a local parameter based on its identifier.
   * <p>
   * @param sid the identifier of the {@link Parameter} being sought.
   * <p>
   * @return the {@link Parameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link Parameter} exists.
   */
 public";


%javamethodmodifiers KineticLaw::getLocalParameter(const std::string& sid) const "
  /**
   * Returns a local parameter based on its identifier.
   * <p>
   * @param sid the identifier of the {@link LocalParameter} being sought.
   * <p>
   * @return the {@link LocalParameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link LocalParameter} exists.
   */
 public";


%javamethodmodifiers KineticLaw::getLocalParameter(const std::string& sid) "
  /**
   * Returns a local parameter based on its identifier.
   * <p>
   * @param sid the identifier of the {@link LocalParameter} being sought.
   * <p>
   * @return the {@link LocalParameter} object in this {@link KineticLaw} instace having the
   * given \'id\', or <code>null</code> if no such {@link LocalParameter} exists.
   */
 public";


%javamethodmodifiers KineticLaw::getNumParameters() const "
  /**
   * Returns the number of local parameters in this {@link KineticLaw} instance.
   * <p>
   * @return the number of Parameters in this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getNumLocalParameters() const "
  /**
   * Returns the number of local parameters in this {@link KineticLaw} instance.
   * <p>
   * @return the number of LocalParameters in this {@link KineticLaw}.
   */
 public";


%javamethodmodifiers KineticLaw::getDerivedUnitDefinition "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link KineticLaw}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link KineticLaw} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * method returns the calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link KineticLaw} contains pure numbers or parameters with undeclared
   * units.  In those cases, it is not possible to calculate the units of
   * the overall expression without making assumptions.  LibSBML does not
   * make assumptions about the units, and
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * only returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  <strong>It is important that callers also
   * invoke the method</strong>
   * {@link KineticLaw#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers may
   * wish to take suitable actions in those scenarios.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link KineticLaw}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers KineticLaw::getDerivedUnitDefinition() const "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link KineticLaw}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link KineticLaw} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * method returns the calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link KineticLaw} contains pure numbers or parameters with undeclared
   * units.  In those cases, it is not possible to calculate the units of
   * the overall expression without making assumptions.  LibSBML does not
   * make assumptions about the units, and
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * only returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  <strong>It is important that callers also
   * invoke the method</strong>
   * {@link KineticLaw#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers
   * may wish to take suitable actions in those scenarios.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link KineticLaw}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers KineticLaw::containsUndeclaredUnits "
  /**
   * Predicate returning <code>true</code> if 
   * the math expression of this {@link KineticLaw} contains
   * parameters/numbers with undeclared units.
   * <p>
   * @return <code>true</code> if the math expression of this {@link KineticLaw}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * may not accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers KineticLaw::containsUndeclaredUnits() const "
  /**
   * Predicate returning <code>true</code> if 
   * the math expression of this {@link KineticLaw} contains
   * parameters/numbers with undeclared units.
   * <p>
   * @return <code>true</code> if the math expression of this {@link KineticLaw}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by
   * {@link KineticLaw#getDerivedUnitDefinition()}
   * may not accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers KineticLaw::removeParameter(unsigned int n) "
  /**
   * Removes the nth {@link Parameter} object in the list of local parameters 
   * in this {@link KineticLaw} instance and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link Parameter} object to remove
   * <p>
   * @return the {@link Parameter} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   */
 public";


%javamethodmodifiers KineticLaw::removeLocalParameter(unsigned int n) "
  /**
   * Removes the nth {@link LocalParameter} object in the list of local parameters 
   * in this {@link KineticLaw} instance and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link LocalParameter} object to remove
   * <p>
   * @return the {@link LocalParameter} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   */
 public";


%javamethodmodifiers KineticLaw::removeParameter(const std::string& sid) "
  /**
   * Removes a {@link Parameter} object with the given identifier in the list of
   * local parameters in this {@link KineticLaw} instance and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param sid the identifier of the {@link Parameter} to remove
   * <p>
   * @return the {@link Parameter} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link Parameter}
   * object with the identifier exists in this {@link KineticLaw} instance.
   */
 public";


%javamethodmodifiers KineticLaw::removeLocalParameter(const std::string& sid) "
  /**
   * Removes a {@link LocalParameter} object with the given identifier in the list of
   * local parameters in this {@link KineticLaw} instance and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param sid the identifier of the {@link LocalParameter} to remove
   * <p>
   * @return the {@link LocalParameter} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link LocalParameter}
   * object with the identifier exists in this {@link KineticLaw} instance.
   */
 public";


%javamethodmodifiers KineticLaw::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   * <p>
   * @param d the {@link SBMLDocument} to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link 
   * libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers KineticLaw::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Species}, is
   * always <code>\'kineticLaw\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'kineticLaw\'.</code>
   */
 public";


%javamethodmodifiers KineticLaw::getElementPosition() const "
  /**
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link KineticLaw} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link KineticLaw} object are:
   * <li> \'formula\' (SBML Level&nbsp;1 only)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers KineticLaw::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link KineticLaw} object
   * have been set.
   * <p>
   * @note The required elements for a {@link KineticLaw} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers KineticLaw::getInternalId() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link KineticLaw} object
   * have been set.
   * <p>
   * @note The required elements for a {@link KineticLaw} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::setInternalId(std::string id) "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link KineticLaw} object
   * have been set.
   * <p>
   * @note The required elements for a {@link KineticLaw} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers KineticLaw::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SimpleSpeciesReference "
/** 
 * LibSBML implementation of SBML\'s SimpleSpeciesReference construct.
 * <p>
 * As mentioned in the description of {@link Reaction}, every species that enters
 * into a given reaction must appear in that reaction\'s lists of reactants,
 * products and/or modifiers.  In an SBML model, all species that may
 * participate in any reaction are listed in the \'listOfSpecies\' element of
 * the top-level {@link Model} object.  Lists of products, reactants and modifiers
 * in {@link Reaction} objects do not introduce new species, but rather, they refer
 * back to those listed in the model\'s top-level \'listOfSpecies\'.  For
 * reactants and products, the connection is made using {@link SpeciesReference}
 * objects; for modifiers, it is made using {@link ModifierSpeciesReference}
 * objects.  {@link SimpleSpeciesReference} is an abstract type that serves as the
 * parent class of both {@link SpeciesReference} and {@link ModifierSpeciesReference}.  It
 * is used simply to hold the attributes and elements that are common to
 * the latter two structures.
 * <p>
 * The {@link SimpleSpeciesReference} structure has a mandatory attribute,
 * \'species\', which must be a text string conforming to the identifer
 * syntax permitted in SBML.  This attribute is inherited by the
 * {@link SpeciesReference} and {@link ModifierSpeciesReference} subclasses derived from
 * {@link SimpleSpeciesReference}.  The value of the \'species\' attribute must be
 * the identifier of a species defined in the enclosing {@link Model}.  The species
 * is thereby declared as participating in the reaction being defined.  The
 * precise role of that species as a reactant, product, or modifier in the
 * reaction is determined by the subclass of {@link SimpleSpeciesReference} (i.e.,
 * either {@link SpeciesReference} or {@link ModifierSpeciesReference}) in which the
 * identifier appears.
 * <p>
 * {@link SimpleSpeciesReference} also contains an optional attribute, \'id\',
 * allowing instances to be referenced from other structures.  No SBML
 * structures currently do this; however, such structures are anticipated
 * in future SBML Levels.
 * <p>
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) SpeciesReference "
/** 
 * LibSBML implementation of SBML\'s SpeciesReference construct.
 * <p>
 * The {@link Reaction} structure provides a way to express which species act as
 * reactants and which species act as products in a reaction.  In a given
 * reaction, references to those species acting as reactants and/or
 * products are made using instances of {@link SpeciesReference} structures in a
 * {@link Reaction} object\'s lists of reactants and products.
 * <p>
 * A species can occur more than once in the lists of reactants and
 * products of a given {@link Reaction} instance.  The effective stoichiometry for
 * a species in a reaction is the sum of the stoichiometry values given on
 * the {@link SpeciesReference} object in the list of products minus the sum of
 * stoichiometry values given on the {@link SpeciesReference} objects in the list
 * of reactants.  A positive value indicates the species is effectively a
 * product and a negative value indicates the species is effectively a
 * reactant.  SBML places no restrictions on the effective stoichiometry of
 * a species in a reaction; for example, it can be zero.  In the following
 * SBML fragment, the two reactions have the same effective stoichiometry
 * for all their species:
 * <div class=\'fragment\'><pre>
 * &lt;reaction id=\'x\'&gt;
 *     &lt;listOfReactants&gt;
 *         &lt;speciesReference species=\'a\'/&gt;
 *         &lt;speciesReference species=\'a\'/&gt;
 *         &lt;speciesReference species=\'b\'/&gt;
 *     &lt;/listOfReactants&gt;
 *     &lt;listOfProducts&gt;
 *         &lt;speciesReference species=\'c\'/&gt;
 *         &lt;speciesReference species=\'b\'/&gt;
 *     &lt;/listProducts&gt;
 * &lt;/reaction&gt;
 * &lt;reaction id=\'y\'&gt;
 *     &lt;listOfReactants&gt;
 *         &lt;speciesReference species=\'a\' stoichiometry=\'2\'/&gt;
 *     &lt;/listOfReactants&gt;
 *     &lt;listOfProducts&gt;
 *         &lt;speciesReference species=\'c\'/&gt;
 *     &lt;/listProducts&gt;
 * &lt;/reaction&gt;</pre></div>
 * <p>
 * The precise structure of {@link SpeciesReference} differs between SBML
 * Level&nbsp;2 and Level&nbsp;3.  We discuss the two variants in separate
 * sections below.
 * <p>
 * <h2>{@link SpeciesReference} in SBML Level 2</h2>
 * <p>
 * The mandatory \'species\' attribute of {@link SpeciesReference} must have as its
 * value the identifier of an existing species defined in the enclosing
 * {@link Model}.  The species is thereby designated as a reactant or product in
 * the reaction.  Which one it is (i.e., reactant or product) is indicated
 * by whether the {@link SpeciesReference} appears in the {@link Reaction}\'s \'reactant\' or
 * \'product\' lists.
 * <p>
 * Product and reactant stoichiometries can be specified using
 * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
 * {@link SpeciesReference} object.  The \'stoichiometry\' attribute is of type
 * double and should contain values greater than zero (0).  The
 * \'stoichiometryMath\' element is implemented as an element containing a
 * MathML expression.  These two are mutually exclusive; only one of
 * \'stoichiometry\' or \'stoichiometryMath\' should be defined in a given
 * {@link SpeciesReference} instance.  When neither the attribute nor the element
 * is present, the value of \'stoichiometry\' in the {@link SpeciesReference}
 * instance defaults to <code>1.</code>
 * <p>
 * For maximum interoperability, the \'stoichiometry\' attribute should be
 * used in preference to \'stoichiometryMath\' when a species\' stoichiometry
 * is a simple scalar number (integer or decimal).  When the stoichiometry
 * is a rational number, or when it is a more complicated formula,
 * \'stoichiometryMath\' must be used.  The MathML expression in
 * \'stoichiometryMath\' may also refer to identifiers of entities in a model
 * (except reaction identifiers).  However, the only species identifiers
 * that can be used in \'stoichiometryMath\' are those referenced in the
 * {@link Reaction} list of reactants, products and modifiers.
 * <p>
 * The following is a simple example of a species reference for species 
 * <code>X0</code>, with stoichiometry <code>2</code>, in a list of reactants within a reaction
 * having the identifier <code>J1:</code>
 * <div class=\'fragment\'><pre>
 * &lt;model&gt;
 *     ...
 *     &lt;listOfReactions&gt;
 *         &lt;reaction id=\'J1\'&gt;
 *             &lt;listOfReactants&gt;
 *                 &lt;speciesReference species=\'X0\' stoichiometry=\'2\'&gt;
 *             &lt;/listOfReactants&gt;
 *             ...
 *         &lt;/reaction&gt;
 *         ...
 *     &lt;/listOfReactions&gt;
 *     ...
 * &lt;/model&gt;</pre></div>
 * <p>
 * The following is a more complex example of a species reference for
 * species X0, with a stoichiometry formula consisting of the parameter
 * <code>x:</code>
 * <div class=\'fragment\'><pre>
 * &lt;model&gt;
 *     ...
 *     &lt;listOfReactions&gt;
 *         &lt;reaction id=\'J1\'&gt;
 *             &lt;listOfReactants&gt;
 *                 &lt;speciesReference species=\'X0\'&gt;
 *                     &lt;stoichiometryMath&gt;
 *                         &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
 *                             &lt;ci&gt;x&lt;/ci&gt;
 *                         &lt;/math&gt;
 *                     &lt;/stoichiometryMath&gt;
 *                 &lt;/speciesReference&gt;
 *             &lt;/listOfReactants&gt;
 *             ...
 *         &lt;/reaction&gt;
 *         ...
 *     &lt;/listOfReactions&gt;
 *     ...
 * &lt;/model&gt;</pre></div>
 * <p>
 * <p>
 * <h2>{@link SpeciesReference} in SBML Level 3</h2>
 * <p>
 * In Level 2\'s definition of a reaction, the stoichiometry attribute of a
 * {@link SpeciesReference} is actually a combination of two factors, the standard
 * biochemical stoichiometry and a conversion factor that may be needed to
 * translate the units of the species quantity to the units of the reaction
 * rate. Unfortunately, Level&nbsp;2 offers no direct way of decoupling
 * these two factors, or for explicitly indicating the units. The only way
 * to do it in Level&nbsp;2 is to use the {@link StoichiometryMath} object
 * associated with SpeciesReferences, and to reference SBML {@link Parameter}
 * objects from within the {@link StoichiometryMath} formula. This works because
 * {@link Parameter} offers a way to attach units to a numerical value, but the
 * solution is indirect and awkward for something that should be a simple
 * matter.  Moreover, the question of how to properly encode
 * stoichiometries in SBML reactions has caused much confusion among
 * implementors of SBML software.
 * <p>
 * SBML Level&nbsp;3 approaches this problem differently.  It (1) extends
 * the the use of the {@link SpeciesReference} identifier to represent the value of
 * the \'stoichiometry\' attribute, (2) makes the \'stoichiometry\' attribute
 * optional, (3) removes {@link StoichiometryMath}, and (4) adds a new \'constant\'
 * boolean attribute on {@link SpeciesReference}.
 * <p>
 * As in Level&nbsp;2, the \'stoichiometry\' attribute is of type
 * <code>double</code> and should contain values greater than zero (<code>0</code>).  A
 * missing \'stoichiometry\' implies that the stoichiometry is either
 * unknown, or to be obtained from an external source, or determined by an
 * {@link InitialAssignment} object or other SBML construct elsewhere in the model.
 * <p>
 * A species reference\'s stoichiometry is set by its \'stoichiometry\'
 * attribute exactly once.  If the {@link SpeciesReference} object\'s \'constant\'
 * attribute has the value <code>true</code>, then the stoichiometry is fixed and
 * cannot be changed except by an {@link InitialAssignment} object.  These two
 * methods of setting the stoichiometry (i.e., using \'stoichiometry\'
 * directly, or using {@link InitialAssignment}) differ in that the \'stoichiometry\'
 * attribute can only be set to a literal floating-point number, whereas
 * {@link InitialAssignment} allows the value to be set using an arbitrary
 * mathematical expression.  (As an example, the approach could be used to
 * set the stoichiometry to a rational number of the form <em>p</em>/<em>q</em>,
 * where <em>p</em> and <em>q</em> are integers, something that is occasionally
 * useful in the context of biochemical reaction networks.)  If the species
 * reference\'s \'constant\' attribute has the value <code>false</code>, the species
 * reference\'s value may be overridden by an {@link InitialAssignment} or changed
 * by {@link AssignmentRule} or {@link AlgebraicRule}, and in addition, for simulation time
 * <em>t &gt; 0</em>, it may also be changed by a {@link RateRule} or {@link Event}
 * objects.  (However, some of these constructs are mutually exclusive; see
 * the SBML Level&nbsp;3 Version&nbsp;1 Core specifiation for more
 * details.)  It is not an error to define \'stoichiometry\' on a species
 * reference and also redefine the stoichiometry using an
 * {@link InitialAssignment}, but the \'stoichiometry\' attribute in that case is
 * ignored.
 * <p>
 * The value of the \'id\' attribute of a {@link SpeciesReference} can be used as the
 * content of a <code>&lt;ci&gt;</code> element in MathML formulas
 * elsewhere in the model.  When the identifier appears in a MathML
 * <code>&lt;ci&gt;</code> element, it represents the stoichiometry of the
 * corresponding species in the reaction where the {@link SpeciesReference} object
 * instance appears.  More specifically, it represents the value of the
 * \'stoichiometry\' attribute on the {@link SpeciesReference} object.
 * <p>
 * In SBML Level 3, the unit of measurement associated with the value of a
 * species\' stoichiometry is always considered to be <code>dimensionless.</code>
 * This has the following implications:
 * <ul>
 * <p>
 * <li> When a species reference\'s identifier appears in mathematical
 * formulas elsewhere in the model, the unit associated with that value is
 * <code>dimensionless.</code>
 * <p>
 * <li> The units of the \'math\' elements of {@link AssignmentRule},
 * {@link InitialAssignment} and {@link EventAssignment} objects setting the stoichiometry
 * of the species reference should be <code>dimensionless.</code>
 * <p>
 * <li> If a species reference\'s identifier is the subject of a {@link RateRule},
 * the unit associated with the {@link RateRule} object\'s value should be
 * <code>dimensionless</code>/<em>time</em>, where <em>time</em> is the
 * model-wide unit of time set on the {@link Model} object.
 * <p>
 * </ul>
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) ModifierSpeciesReference "
/** 
 * LibSBML implementation of SBML\'s ModifierSpeciesReference construct.
 * <p>
 * Sometimes a species appears in the kinetic rate formula of a reaction
 * but is itself neither created nor destroyed in that reaction (for
 * example, because it acts as a catalyst or inhibitor).  In SBML, all such
 * species are simply called <em>modifiers</em> without regard to the detailed
 * role of those species in the model.  The {@link Reaction} structure provides a
 * way to express which species act as modifiers in a given reaction.  This
 * is the purpose of the list of modifiers available in {@link Reaction}.  The list
 * contains instances of {@link ModifierSpeciesReference} structures.
 * <p>
 * The {@link ModifierSpeciesReference} structure inherits the mandatory attribute
 * \'species\' and optional attributes \'id\' and \'name\' from the parent class
 * {@link SimpleSpeciesReference}.  See the description of {@link SimpleSpeciesReference}
 * for more information about these.
 * <p>
 * The value of the \'species\' attribute must be the identifier of a species
 * defined in the enclosing {@link Model}; this species is designated as a modifier
 * for the current reaction.  A reaction may have any number of modifiers.
 * It is permissible for a modifier species to appear simultaneously in the
 * list of reactants and products of the same reaction where it is
 * designated as a modifier, as well as to appear in the list of reactants,
 * products and modifiers of other reactions in the model.
 * <p>
 * <p>
 * <!---------------------------------------------------------------------- -->
 * <p>
 */
"

%typemap(javaimports) ListOfSpeciesReferences "
/** 
 * LibSBML implementation of SBML\'s ListOfSpeciesReferences construct.
 * <p>
 * The {@link ListOfSpeciesReferences} class is used to store lists of reactants
 * and products in a {@link Reaction} object.
 * <p>
 * As with the various other ListOf___ classes in SBML, the
 * {@link ListOfSpeciesReferences} is merely a container used for organizing
 * instances of other objects, in this case {@link SpeciesReference} objects.
 * {@link ListOfSpeciesReferences} is derived from the abstract class {@link SBase}, and
 * inherit the various attributes and subelements of {@link SBase}, such as
 * \'metaid\' as and \'annotation\'.  The ListOf___ classes do not add any
 * attributes of their own.
 */
"

%javamethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link SimpleSpeciesReference} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link SimpleSpeciesReference}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link SimpleSpeciesReference}
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(const SimpleSpeciesReference& orig) "
  /**
  * Copy constructor; creates a copy of this {@link SimpleSpeciesReference}.
  */
 public";


%javamethodmodifiers SimpleSpeciesReference::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * @return the id of this {@link SimpleSpeciesReference}.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * @return the name of this {@link SimpleSpeciesReference}.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::getSpecies() const "
  /**
   * Get the value of the \'species\' attribute.
   * <p>
   * @return the value of the attribute \'species\' for this
   * {@link SimpleSpeciesReference}.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SimpleSpeciesReference}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link SimpleSpeciesReference} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SimpleSpeciesReference}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link SimpleSpeciesReference} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::isSetSpecies() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SimpleSpeciesReference}\'s \'species\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'species\' attribute of this
   * {@link SimpleSpeciesReference} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::setSpecies(const std::string& sid) "
  /**
   * Sets the \'species\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * The identifier string passed in <code>sid</code> is copied.
   * <p>
   * @param sid the identifier of a species defined in the enclosing
   * {@link Model}\'s {@link ListOfSpecies}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link SimpleSpeciesReference}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link SimpleSpeciesReference}
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::unsetId "
  /**
   * Unsets the value of the \'id\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link SimpleSpeciesReference}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::isModifier() const "
  /**
   * Predicate returning <code>true</code> if this
   * is a {@link ModifierSpeciesReference}.
   * <p>
   * @return <code>true</code> if this {@link SimpleSpeciesReference}\'s subclass is
   * ModiferSpeciesReference, <code>false</code> if it is a plain {@link SpeciesReference}.
   */
 public";


%javamethodmodifiers SimpleSpeciesReference::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if this
   * is a {@link ModifierSpeciesReference}.
   * <p>
   * @return <code>true</code> if this {@link SimpleSpeciesReference}\'s subclass is
   * ModiferSpeciesReference, <code>false</code> if it is a plain {@link SpeciesReference}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::SimpleSpeciesReference(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link SimpleSpeciesReference} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link SimpleSpeciesReference} object to an
   * {@link SBMLDocument} (e.g., using {@link Model#addSimpleSpeciesReference()}), the
   * SBML XML namespace of the document <em>overrides</em> the value used when
   * creating the {@link SimpleSpeciesReference} object via this constructor.  This
   * is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a {@link SimpleSpeciesReference} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SimpleSpeciesReference::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::SpeciesReference(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link SpeciesReference} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link SpeciesReference}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link SpeciesReference}
   * <p>
   * @note Upon the addition of a {@link SpeciesReference} object to a {@link Model} (e.g.,
   * using {@link Reaction#addReactant(SpeciesReference sr)} or
   * {@link Reaction#addProduct(SpeciesReference sr)}), the SBML Level,
   * SBML Version and XML namespace of the document <em>override</em> the values
   * used when creating the {@link SpeciesReference} object via this constructor.
   * This is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a {@link SpeciesReference} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers SpeciesReference::SpeciesReference(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link SpeciesReference} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link SpeciesReference} object to a {@link Model} (e.g.,
   * using {@link Reaction#addReactant(SpeciesReference sr)} or
   * {@link Reaction#addProduct(SpeciesReference sr)}), the SBML Level,
   * SBML Version and XML namespace of the document <em>override</em> the values
   * used when creating the {@link SpeciesReference} object via this constructor.
   * This is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a {@link SpeciesReference} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers SpeciesReference::SpeciesReference(const SpeciesReference& orig) "
  /**
   * Copy constructor; creates a copy of this {@link SpeciesReference}.
   */
 public";


%javamethodmodifiers SpeciesReference::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers SpeciesReference::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SpeciesReference} instance.
   * <p>
   * @return a (deep) copy of this {@link SpeciesReference}.
   */
 public";


%javamethodmodifiers SpeciesReference::initDefaults "
  /**
   * Initializes the fields of this {@link SpeciesReference} object to \'typical\'
   * default values.
   * <p>
   * The SBML {@link SpeciesReference} component has slightly different aspects and
   * default attribute values in different SBML Levels and Versions.
   * This method sets the values to certain common defaults, based
   * mostly on what they are in SBML Level&nbsp;2.  Specifically:
   * <ul>
   * <li> Sets attribute \'stoichiometry\' to <code>1.0</code>
   * <li> (Applies to Level&nbsp;1 models only) Sets attribute \'denominator\' to <code>1</code>
   * </ul>
   * <p>
   * @see #getDenominator()
   * @see #setDenominator(int value)
   * @see #getStoichiometry()
   * @see #setStoichiometry(double value)
   * @see #getStoichiometryMath()
   * @see #setStoichiometryMath(StoichiometryMath math)
   */
 public";


%javamethodmodifiers SpeciesReference::getStoichiometry() const "
  /**
   * Get the value of the \'stoichiometry\' attribute.
   * <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   * <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   * <p>
   * @return the value of the (scalar) \'stoichiometry\' attribute of this
   * {@link SpeciesReference}.
   * <p>
   * @see #getStoichiometryMath()
   */
 public";


%javamethodmodifiers SpeciesReference::getStoichiometryMath() const "
  /**
   * Get the content of the \'stoichiometryMath\' subelement as an {@link ASTNode}
   * tree.
   * <p>
   * The \'stoichiometryMath\' element exists only in SBML Level 2.  There,
   * product and reactant stoichiometries can be specified using
   * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or decimal).
   * <p>
   * @return the content of the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference}.
   */
 public";


%javamethodmodifiers SpeciesReference::getStoichiometryMath "
  /**
   * Get the content of the \'stoichiometryMath\' subelement as an {@link ASTNode}
   * tree.
   * <p>
   * The \'stoichiometryMath\' element exists only in SBML Level 2.  There,
   * product and reactant stoichiometries can be specified using
   * <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or decimal).
   * <p>
   * @return the content of the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference}.
   * <p>
   * @see #getStoichiometry()
   */
 public";


%javamethodmodifiers SpeciesReference::getDenominator() const "
  /**
   * Get the value of the \'denominator\' attribute, for the case of a
   * rational-numbered stoichiometry or a model in SBML Level&nbsp;1.
   * <p>
   * The \'denominator\' attribute is only actually written out in the case
   * of an SBML Level&nbsp;1 model.  In SBML Level&nbsp;2, rational-number
   * stoichiometries are written as MathML elements in the
   * \'stoichiometryMath\' subelement.  However, as a convenience to users,
   * libSBML allows the creation and manipulation of rational-number
   * stoichiometries by supplying the numerator and denominator directly
   * rather than having to manually create an {@link ASTNode} structure.  LibSBML
   * will write out the appropriate constructs (either a combination of
   * \'stoichiometry\' and \'denominator\' in the case of SBML Level&nbsp;1, or a
   * \'stoichiometryMath\' subelement in the case of SBML Level&nbsp;2).
   * <p>
   * @return the value of the \'denominator\' attribute of this
   * {@link SpeciesReference}.
   */
 public";


%javamethodmodifiers SpeciesReference::getConstant() const "
  /**
   * Get the value of the \'constant\' attribute.
   * <p>
   * @return the value of the \'constant\' attribute of this
   * {@link SpeciesReference}.
   */
 public";


%javamethodmodifiers SpeciesReference::isSetStoichiometryMath() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesReference}\'s \'stoichiometryMath\' subelement is set
   * <p>
   * @return <code>true</code> if the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SpeciesReference::isSetConstant() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesReference}\'s \'constant\' attribute is set
   * <p>
   * @return <code>true</code> if the \'constant\' attribute of this
   * {@link SpeciesReference} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SpeciesReference::isSetStoichiometry() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link SpeciesReference}\'s \'stoichiometry\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SpeciesReference::setStoichiometry(double value) "
  /**
   * Sets the value of the \'stoichiometry\' attribute of this
   * {@link SpeciesReference}.
   * <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   * <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   * <p>
   * @param value the new value of the \'stoichiometry\' attribute
   * <p>
   * @note In SBML Level&nbsp;2, the \'stoichiometryMath\' subelement of this
   * {@link SpeciesReference} object will be unset because the \'stoichiometry\'
   * attribute and the stoichiometryMath\' subelement are mutually
   * exclusive.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers SpeciesReference::setStoichiometryMath(const StoichiometryMath* math) "
  /**
   * Sets the \'stoichiometryMath\' subelement of this {@link SpeciesReference}.
   * <p>
   * The Abstract Syntax Tree in <code>math</code> is copied.
   * <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   * <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   * <p>
   * @param math the {@link StoichiometryMath} expression that is to be copied as the
   * content of the \'stoichiometryMath\' subelement.
   * <p>
   * @note In SBML Level&nbsp;2, the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} object will be unset (isSetStoichiometry() will
   * return <code>false</code> although getStoichiometry() will return <code>1.0</code>) if the
   * given math is not null because the \'stoichiometry\' attribute and the
   * stoichiometryMath\' subelement are mutually exclusive.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   */
 public";


%javamethodmodifiers SpeciesReference::setDenominator(int value) "
  /**
   * Set the value of the \'denominator\' attribute, for the case of a
   * rational-numbered stoichiometry or a model in SBML Level&nbsp;1.
   * <p>
   * The \'denominator\' attribute is only actually written out in the case
   * of an SBML Level&nbsp;1 model.  In SBML Level&nbsp;2, rational-number
   * stoichiometries are written as MathML elements in the
   * \'stoichiometryMath\' subelement.  However, as a convenience to users,
   * libSBML allows the creation and manipulation of rational-number
   * stoichiometries by supplying the numerator and denominator directly
   * rather than having to manually create an {@link ASTNode} structure.  LibSBML
   * will write out the appropriate constructs (either a combination of
   * \'stoichiometry\' and \'denominator\' in the case of SBML Level&nbsp;1, or
   * a \'stoichiometryMath\' subelement in the case of SBML Level&nbsp;2).
   * <p>
   * @param value the scalar value 
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers SpeciesReference::setConstant(bool flag) "
  /**
   * Sets the \'constant\' attribute of this {@link SpeciesReference} to the given boolean
   * <code>flag</code>.
   * <p>
   * @param flag a boolean, the value for the \'constant\' attribute of this
   * {@link SpeciesReference} instance
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers SpeciesReference::unsetStoichiometryMath "
  /**
   * Unsets the \'stoichiometryMath\' subelement of this {@link SpeciesReference}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * In SBML Level 2, product and reactant stoichiometries can be specified
   * using <em>either</em> \'stoichiometry\' or \'stoichiometryMath\' in a
   * {@link SpeciesReference} object.  The former is to be used when a
   * stoichiometry is simply a scalar number, while the latter is for
   * occasions when it needs to be a rational number or it needs to
   * reference other mathematical expressions.  The \'stoichiometry\'
   * attribute is of type <code>double</code> and should contain values greater than
   * zero (<code>0</code>).  The \'stoichiometryMath\' element is implemented as an
   * element containing a MathML expression.  These two are mutually
   * exclusive; only one of \'stoichiometry\' or \'stoichiometryMath\' should
   * be defined in a given {@link SpeciesReference} instance.  When neither the
   * attribute nor the element is present, the value of \'stoichiometry\' in
   * the {@link SpeciesReference} instance defaults to <code>1.</code>  For maximum
   * interoperability between different software tools, the \'stoichiometry\'
   * attribute should be used in preference to \'stoichiometryMath\' when a
   * species\' stoichiometry is a simple scalar number (integer or
   * decimal).
   * <p>
   * In SBML Level 3, there is no {@link StoichiometryMath}, and {@link SpeciesReference}
   * objects have only the \'stoichiometry\' attribute.
   * <p>
   * @note In SBML Level&nbsp;2, the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} object will be reset to a default value (<code>1.0</code>) if
   * the \'stoichiometry\' attribute has not been set.
   */
 public";


%javamethodmodifiers SpeciesReference::unsetStoichiometry "
  /**
   * Unsets the \'stoichiometry\' attribute of this {@link SpeciesReference}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note In SBML Level&nbsp;1, the \'stoichiometry\' attribute of this
   * {@link SpeciesReference} object will be just reset to a default value (<code>1.0</code>)
   * and isSetStoichiometry() will still return <code>true.</code>  In SBML
   * Level&nbsp;2, the \'stoichiometry\' attribute of this object will be
   * unset (which will result in isSetStoichiometry() returning <code>false</code>,
   * although getStoichiometry() will return <code>1.0</code>) if the
   * \'stoichiometryMath\' subelement is set, otherwise the attribute
   * will be just reset to the default value (<code>1.0</code>) (and
   * isSetStoichiometry() will still return <code>true</code>).  In SBML
   * Level&nbsp;3, the \'stoichiometry\' attribute of this object will be set
   * to <code>NaN</code> and isSetStoichiometry() will return <code>false.</code>
   */
 public";


%javamethodmodifiers SpeciesReference::createStoichiometryMath "
  /**
   * Creates a new, empty {@link StoichiometryMath} object, adds it to this
   * {@link SpeciesReference}, and returns it.
   * <p>
   * @return the newly created {@link StoichiometryMath} object instance
   * <p>
   * @see Reaction#addReactant(SpeciesReference sr)
   * @see Reaction#addProduct(SpeciesReference sr)
   */
 public";


%javamethodmodifiers SpeciesReference::setAnnotation(const XMLNode* annotation) "
  /**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   * <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   * <p>
   * @param annotation an XML structure that is to be used as the content
   * of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   */
 public";


%javamethodmodifiers SpeciesReference::setAnnotation(const std::string& annotation) "
  /**
   * Sets the value of the \'annotation\' subelement of this SBML object to a
   * copy of <code>annotation</code>.
   * <p>
   * Any existing content of the \'annotation\' subelement is discarded.
   * Unless you have taken steps to first copy and reconstitute any
   * existing annotations into the <code>annotation</code> that is about to be
   * assigned, it is likely that performing such wholesale replacement is
   * unfriendly towards other software applications whose annotations are
   * discarded.  An alternative may be to use appendAnnotation().
   * <p>
   * @param annotation an XML string that is to be used as the content
   * of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #appendAnnotation(XMLNode annotation)
   * @see #appendAnnotation(String annotation)
   */
 public";


%javamethodmodifiers SpeciesReference::appendAnnotation(const XMLNode* annotation) "
  /**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   * <p>
   * The content in <code>annotation</code> is copied.  Unlike
   * {@link SpeciesReference#setAnnotation(String annotation)},
   * this method allows other annotations to be preserved when an application
   * adds its own data.
   * <p>
   * @param annotation an XML structure that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #setAnnotation(String annotation)
   * @see #setAnnotation(XMLNode annotation)
   */
 public";


%javamethodmodifiers SpeciesReference::appendAnnotation(const std::string& annotation) "
  /**
   * Appends annotation content to any existing content in the \'annotation\'
   * subelement of this object.
   * <p>
   * The content in <code>annotation</code> is copied.  Unlike
   * {@link SpeciesReference#setAnnotation(String annotation)}, this
   * method allows other annotations to be preserved when an application
   * adds its own data.
   * <p>
   * @param annotation an XML string that is to be copied and appended
   * to the content of the \'annotation\' subelement of this object
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #setAnnotation(String annotation)
   * @see #setAnnotation(XMLNode annotation)
   */
 public";


%javamethodmodifiers SpeciesReference::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers SpeciesReference::getElementName() const "
  /**
   * Returns the XML element name of this object, which for
   * {@link SpeciesReference}, is always <code>\'speciesReference\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'speciesReference\'.</code>
   */
 public";


%javamethodmodifiers SpeciesReference::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::sortMath "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link SpeciesReference} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link SpeciesReference} object are:
   * <li> \'species\'
   * <li> \'constant\' (only available SBML Level&nbsp;3)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers SpeciesReference::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::readL1Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::syncAnnotation "
  /**
   * <p>
   * Synchronizes the annotation of this SBML object.
   * <p>
   * Annotation element (XMLNode mAnnotation) is synchronized with the
   * current {@link CVTerm} objects (List mCVTerm) and id string (String mId)
   * Currently, this method is called in getAnnotation(), isSetAnnotation(),
   * and writeElements() methods.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::isExplicitlySetStoichiometry() const "
  /**
   * <p>
   * Synchronizes the annotation of this SBML object.
   * <p>
   * Annotation element (XMLNode mAnnotation) is synchronized with the
   * current {@link CVTerm} objects (List mCVTerm) and id string (String mId)
   * Currently, this method is called in getAnnotation(), isSetAnnotation(),
   * and writeElements() methods.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SpeciesReference::isExplicitlySetDenominator() const "
  /**
   * <p>
   * Synchronizes the annotation of this SBML object.
   * <p>
   * Annotation element (XMLNode mAnnotation) is synchronized with the
   * current {@link CVTerm} objects (List mCVTerm) and id string (String mId)
   * Currently, this method is called in getAnnotation(), isSetAnnotation(),
   * and writeElements() methods.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ModifierSpeciesReference::ModifierSpeciesReference(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ModifierSpeciesReference} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link ModifierSpeciesReference}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link ModifierSpeciesReference}
   * <p>
   * @note Upon the addition of a {@link ModifierSpeciesReference} object to an
   * {@link SBMLDocument} (e.g., using {@link Reaction#addModifier(ModifierSpeciesReference msr)}), the
   * SBML Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link ModifierSpeciesReference}
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a
   * {@link ModifierSpeciesReference} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers ModifierSpeciesReference::ModifierSpeciesReference(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ModifierSpeciesReference} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link ModifierSpeciesReference} object to an
   * {@link SBMLDocument} (e.g., using {@link Reaction#addModifier(ModifierSpeciesReference msr)}), the
   * SBML XML namespace of the document <em>overrides</em> the value used when
   * creating the {@link ModifierSpeciesReference} object via this constructor.
   * This is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a {@link ModifierSpeciesReference} is an important aid to
   * producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers ModifierSpeciesReference::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers ModifierSpeciesReference::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ModifierSpeciesReference}
   * instance.
   * <p>
   * @return a (deep) copy of this {@link ModifierSpeciesReference}.
   */
 public";


%javamethodmodifiers ModifierSpeciesReference::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ModifierSpeciesReference::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Species}, is
   * always <code>\'modifierSpeciesReference\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'modifierSpeciesReference\'.</code>
   */
 public";


%javamethodmodifiers ModifierSpeciesReference::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link ModifierSpeciesReference} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link ModifierSpeciesReference} object are:
   * species
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::ListOfSpeciesReferences(unsigned int level, unsigned int version) "
  /**
   * Creates a new, empty {@link ListOfSpeciesReferences} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::ListOfSpeciesReferences(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfSpeciesReferences} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfSpeciesReferences} object to be created.
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfSpeciesReferences}
   * instance.
   * <p>
   * @return a (deep) copy of this {@link ListOfSpeciesReferences}.
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link SpeciesReference} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfSpeciesReferences}, the XML element name is 
   * <code>\'listOfSpeciesReferences\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfSpeciesReferences\'.</code>
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::get(unsigned int n) "
  /**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}.
   * <p>
   * @param n the index number of the {@link SpeciesReference} to get.
   * <p>
   * @return the nth {@link SpeciesReference} in this {@link ListOfSpeciesReferences}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::get "
  /**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}.
   * <p>
   * @param n the index number of the {@link SpeciesReference} to get.
   * <p>
   * @return the nth {@link SpeciesReference} in this {@link ListOfSpeciesReferences}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::get(const std::string& sid) "
  /**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesReference} to get.
   * <p>
   * @return {@link SpeciesReference} in this {@link ListOfSpeciesReferences}
   * with the given id or <code>null</code> if no such
   * {@link SpeciesReference} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::get(const std::string& sid) const "
  /**
   * Get a {@link SpeciesReference} from the {@link ListOfSpeciesReferences}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link SpeciesReference} to get.
   * <p>
   * @return {@link SpeciesReference} in this {@link ListOfSpeciesReferences}
   * with the given id or <code>null</code> if no such
   * {@link SpeciesReference} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfSpeciesReferences} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfSpeciesReferences} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfSpeciesReferences::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfSpeciesReferences::setType(SpeciesType type) "
  /**
   * Sets type of this {@link ListOfSpeciesReferences}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfSpeciesReferences::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Event "
/** 
 * LibSBML implementation of SBML\'s Event construct.
 * <p>
 * An SBML {@link Event} object defines when the event can occur, the variables
 * that are affected by it, how the variables are affected, and the event\'s
 * relationship to other events.  The effect of the event can optionally be
 * delayed after the occurrence of the condition which invokes it.
 * <p>
 * The operation of {@link Event} is divided into two phases (even when the event
 * is not delayed): one when the event is <em>triggered</em>, and the other when
 * the event is <em>executed</em>.  {@link Trigger} objects define the conditions for
 * triggering an event, {@link Delay} objects define when the event is actually
 * executed, {@link EventAssignment} objects define the effects of executing the
 * event, and (in SBML Level&nbsp;3) Priority objects influence the order
 * of {@link EventAssignment} performance in cases of simultaneous events.  Please
 * consult the descriptions of {@link Trigger}, {@link Delay}, {@link EventAssignment} and Priority
 * for more information.
 * <p>
 * <h2>SBML Level/Version differences</h2>
 * <p>
 * <h3>SBML Level 3</h3>
 * <p>
 * SBML Level 3 introduces several changes to the structure and components
 * of Events compared to SBML Level&nbsp;2.  These changes fall into two
 * main categories: changes to what is optional or required, and additions
 * of new attributes and elements.
 * <ul>
 * <li> The attribute \'useValuesFromTriggerTime\' on {@link Event} is mandatory (it
 * was optional in Level&nbsp;2);
 * <li> {@link Event}\'s \'listOfEventAssignments\' element (of class
 * {@link ListOfEventAssignments}) is optional (it was mandatory in Level&nbsp;2);
 * <li> {@link Event}\'s \'priority\' element (of class Priority) is new in
 * Level&nbsp;3; and
 * <li> The {@link Trigger} object gains new mandatory attributes (described as part
 * of the definition of {@link Trigger}).
 * </ul>
 * <p>
 * The changes to the attributes of {@link Event} are described below; the changes
 * to {@link Trigger} and Priority are described in their respective sections.
 * <p>
 * <h3>SBML Level 2</h3>
 * <p>
 * In SBML Level&nbsp;2 versions before Version&nbsp;4, the semantics of
 * {@link Event} time delays were defined such that the expressions in the event\'s
 * assignments were always evaluated at the time the event was
 * <em>triggered</em>.  This definition made it difficult to define an event
 * whose assignment formulas were meant to be evaluated at the time the
 * event was <em>executed</em> (i.e., after the time period defined by the
 * value of the {@link Delay} element).  In SBML Level&nbsp;2 Version&nbsp;4 and in
 * Level&nbsp;3, the attribute \'useValuesFromTriggerTime\' on {@link Event} allows a
 * model to indicate the time at which the event\'s assignments are intended
 * the values of the assignment formulas are computed at the moment the
 * event is triggered, not after the delay.  If \'useValuesFromTriggerTime\'=
 * <code>false</code>, it means that the formulas in the event\'s assignments are to be
 * computed <em>after</em> the delay, at the time the event is executed.
 * <p>
 * The definition of {@link Event} in SBML Level&nbsp;2 Versions 1 and 2 includes
 * an additional attribute called \'timeUnits\', which allowed the time units
 * of the {@link Delay} to be set explicitly.  Later Versions of SBML Level&nbsp;2
 * as well as SBML Level&nbsp;3 do not define this attribute.  LibSBML
 * supports this attribute for compatibility with previous versions of SBML
 * Level&nbsp;2; however, if a model in SBML Level&nbsp;3 or Level&nbsp;2
 * Versions&nbsp;3&ndash;4 format sets the attribute, the
 * consistency-checking method {@link SBMLDocument#checkConsistency()} will report
 * an error.
 * <p>
 * The attribute \'useValuesFromTriggerTime\' was introduced in SBML
 * Level&nbsp;2 Version&nbsp;4.  Models defined in prior Versions of SBML
 * Level&nbsp;2 cannot use this attribute, and
 * {@link SBMLDocument#checkConsistency()} will report an error if they do.
 * <p>
 * <h2>Semantics of events in SBML Level 3 Version&nbsp;1</h2>
 * <p>
 * The detailed semantics of events are described in the specification
 * documents for each SBML Level/Version.  Here we include the description
 * from the SBML Level&nbsp;1 Version&nbsp;1.
 * Any transition of a {@link Trigger} object\'s \'math\' formula from the value 
 * <code>false</code> to <code>true</code> will cause the enclosing {@link Event} object to
 * <em>trigger</em>.  Such a transition is not possible at the very start
 * of a simulation (i.e., at time <em>t = 0</em>) unless the {@link Trigger}
 * object\'s \'initialValue\' attribute has a value of <code>false</code>; this defines
 * the value of the trigger formula to be <code>false</code> immediately prior to the
 * start of simulation, thereby giving it the potential to change in value
 * from <code>false</code> to <code>true</code> when the formula is evaluated at <em>t =
 * 0</em>.  If \'initialValue\'=<code>true</code>, then the trigger expression cannot
 * transition from <code>false</code> to <code>true</code> at <em>t = 0</em> but may do so at
 * some time <em>t > 0</em>.
 * <p>
 * Consider an {@link Event} object definition <EM>E</EM> with delay <em>d</em> in
 * which the {@link Trigger} object\'s \'math\' formula makes a transition in value
 * from <code>false</code> to <code>true</code> at times <em>t<sub>1</sub></em> and
 * <em>t<sub>2</sub></em>.  The {@link EventAssignment} within the {@link Event} object
 * will have effect at <em>t<sub>1</sub> + d</em> and
 * <em>t<sub>2</sub> + d</em> irrespective of the relative times of
 * <em>t<sub>1</sub></em> and <em>t<sub>2</sub></em>.  For example, events
 * can \'overlap\' so that <em>t<sub>1</sub> < t<sub>2</sub> <
 * t<sub>1</sub> + d</em> still causes an event assignments to occur at
 * <em>t<sub>1</sub> + d</em> and <em>t<sub>2</sub> + d</em>.
 * <p>
 * It is entirely possible for two events to be executed simultaneously,
 * and it is possible for events to trigger other events (i.e., an event
 * assignment can cause an event to trigger).  This leads to several
 * points:
 * <ul>
 * <p>
 * <li> A software package should retest all event triggers after executing
 * an event assignment in order to account for the possibility that the
 * assignment causes another event trigger to transition from <code>false</code> to
 * <code>true.</code>  This check should be made after each individual {@link Event} object\'s
 * execution, even when several events are to be executed simultaneously.
 * <p>
 * <li> Any {@link Event} object whose {@link Trigger} \'persistent\' attribute has the value
 * <code>false</code> must have its trigger expression reevaluated continuously
 * between when the event is triggered and when it is executed.  If
 * its trigger expression ever evaluates to <code>false</code>, it must be removed
 * from the queue of events pending execution and treated as any other
 * event whose trigger expression evaluates to <code>false.</code>
 * <p>
 * <li> Although the precise time at which events are executed is not
 * resolved beyond the given execution point in simulated time, it is
 * assumed that the order in which the events occur <em>is</em> resolved.
 * This order can be significant in determining the overall outcome of a
 * given simulation.  When an event <EM>X</EM> <em>triggers</em> another
 * event <EM>Y</EM> and event <EM>Y</EM> has zero delay, then event
 * <EM>Y</EM> is added to the existing set of simultaneous events that are
 * pending <em>execution</em>.  Events <EM>X</EM> and <EM>Y</EM> form a
 * cascade of events at the same point in simulation time.  An event such
 * as <EM>Y</EM> may have a special priority if it contains a Priority
 * subobject.
 * <p>
 * <li> All events in a model are open to being in a cascade.  The position
 * of an event in the event queue does not affect whether it can be in the
 * cascade: event <EM>Y</EM> can be triggered whether it is before or after
 * <EM>X</EM> in the queue of events pending execution.  A cascade of
 * events can be potentially infinite (never terminate); when this occurs a
 * simulator should indicate this has occurred&mdash;it is incorrect for a
 * simulator to break a cascade arbitrarily and continue the simulation
 * without at least indicating that the infinite cascade occurred.
 * <p>
 * <li> Simultaneous events having no defined priorities are executed in an
 * undefined order.  This does not mean that the behavior of the simulation
 * is completely undefined; merely that the <em>order</em> of execution of
 * these particular events is undefined.  A given simulator may use any
 * algorithm to choose an order as long as every event is executed exactly
 * once.
 * <p>
 * <li> Events with defined priorities are executed in the order implied by
 * their Priority \'math\' formula values, with events having higher
 * priorities being executed ahead of events with lower priorities, and
 * events with identical priorities being executed in a random order with
 * respect to one another (as determined at run-time by some random
 * algorithm equivalent to coin-flipping).  Newly-triggered events that are
 * to be executed immediately (i.e., if they define no delays) should be
 * inserted into the queue of events pending execution according to their
 * priorities: events with higher priority values value must be inserted
 * ahead of events with lower priority values and after any pending events
 * with even higher priorities, and inserted randomly among pending events
 * with the same priority values.  Events without Priority objects must be
 * inserted into the queue in some fashion, but the algorithm used to place
 * it in the queue is undefined.  Similarly, there is no restriction on the
 * order of a newly-inserted event with a defined Priority with respect to
 * any other pending {@link Event} without a defined Priority.
 * <p>
 * <li> A model variable that is the target of one or more event
 * assignments can change more than once when simultaneous events are
 * processed at some time point <em>t</em>.  The model\'s behavior (output)
 * for such a variable is the value of the variable at the end of
 * processing all the simultaneous events at time <em>t</em>.
 * <p>
 * </ul>
 * <p>
 * @see Trigger
 * @see Priority
 * @see Delay
 * @see EventAssignment
 * <p>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ListOfEvents "
/** 
 * LibSBML implementation of SBML\'s ListOfEvents construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * The relationship between the lists and the rest of an SBML model is
 * illustrated by the following (for SBML Level&nbsp;2 Version&nbsp;4):
 * <p>
 * <center><img src=\'listof-illustration.jpg\'></center><br>
 * 
 * <p>
 * Readers may wonder about the motivations for using the ListOf___
 * containers.  A simpler approach in XML might be to place the components
 * all directly at the top level of the model definition.  The choice made
 * in SBML is to group them within XML elements named after
 * {@link ListOf}<em>Classname</em>, in part because it helps organize the
 * components.  More importantly, the fact that the container classes are
 * derived from {@link SBase} means that software tools can add information <em>about</em>
 * the lists themselves into each list container\'s \'annotation\'.
 * <p>
 * @see ListOfFunctionDefinitions
 * @see ListOfUnitDefinitions
 * @see ListOfCompartmentTypes
 * @see ListOfSpeciesTypes
 * @see ListOfCompartments
 * @see ListOfSpecies
 * @see ListOfParameters
 * @see ListOfInitialAssignments
 * @see ListOfRules
 * @see ListOfConstraints
 * @see ListOfReactions
 * @see ListOfEvents
 */
"

%javamethodmodifiers Event::Event(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Event} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Event}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Event}
   * <p>
   * @note Upon the addition of an {@link Event} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addEvent(Event e)}), the SBML Level, SBML Version and XML
   * namespace of the document <em>override</em> the values used when creating
   * the {@link Event} object via this constructor.  This is necessary to ensure
   * that an SBML document is a consistent structure.  Nevertheless, the
   * ability to supply the values at the time of creation of an {@link Event} is an
   * important aid to producing valid SBML.  Knowledge of the intented SBML
   * Level and Version determine whether it is valid to assign a particular
   * value to an attribute, or whether it is valid to add an object to an
   * existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Event::Event(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Event} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of an {@link Event} object to an {@link SBMLDocument} (e.g.,
   * using {@link Model#addEvent(Event e)}), the SBML XML namespace of the document 
   * <em>overrides</em> the value used when creating the {@link Event} object via this
   * constructor.  This is necessary to ensure that an SBML document is a
   * consistent structure.  Nevertheless, the ability to supply the values
   * at the time of creation of a {@link Event} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers Event::Event(const Event& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Event}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link Event} in the list
   * of events within which this {@link Event} is embedded.
   */
 public";


%javamethodmodifiers Event::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Event}.
   * <p>
   * @return a (deep) copy of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getId() const "
  /**
   * Returns the value of the \'id\' attribute of this {@link Event}.
   * <p>
   * @return the id of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getName() const "
  /**
   * Returns the value of the \'name\' attribute of this {@link Event}.
   * <p>
   * @return the name of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getTrigger() const "
  /**
   * Get the event trigger portion of this {@link Event}.
   * <p>
   * @return the {@link Trigger} object of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getTrigger "
  /**
   * Get the event trigger portion of this {@link Event}.
   * <p>
   * @return the {@link Trigger} object of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getDelay() const "
  /**
   * Get the assignment delay portion of this {@link Event}, if there is one.
   * <p>
   * @return the delay of this {@link Event} if one is defined, or <code>null</code> if none
   * is defined.
   */
 public";


%javamethodmodifiers Event::getDelay "
  /**
   * Get the assignment delay portion of this {@link Event}, if there is one.
   * <p>
   * @return the delay of this {@link Event} if one is defined, or <code>null</code> if none
   * is defined.
   */
 public";


%javamethodmodifiers Event::getPriority() const "
  /**
   * (SBML Level&nbsp;3 only) Get the event priority portion of this
   * {@link Event}.
   * <p>
   * @return the Priority object of this {@link Event}.
   * <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Event::getPriority "
  /**
   * (SBML Level&nbsp;3 only) Get the event priority portion of this
   * {@link Event}.
   * <p>
   * @return the Priority object of this {@link Event}.
   * <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Event::getTimeUnits() const "
  /**
   * Get the value of the \'timeUnits\' attribute of this {@link Event}, if it has one.
   * <p>
   * @return the value of the attribute \'timeUnits\' as a string.
   * <p>
   * @warning Definitions of {@link Event} in SBML Level 2 Versions&nbsp;1
   * and&nbsp;2 included the additional attribute called \'timeUnits\', but
   * it was removed in SBML Level&nbsp;2 Version&nbsp;3.  LibSBML supports
   * this attribute for compatibility with previous versions of SBML
   * Level&nbsp;2, but its use is discouraged since models in Level 2
   * Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a Version&nbsp;3
   * or&nbsp;4 model sets the attribute, the consistency-checking method
   * {@link SBMLDocument#checkConsistency()} will report an error.
   */
 public";


%javamethodmodifiers Event::getUseValuesFromTriggerTime() const "
  /**
   * Get the value of the \'useValuesFromTriggerTime\' attribute of this {@link Event}.
   * <p>
   * The optional {@link Delay} on {@link Event} means there are two times to consider when
   * computing the results of an event: the time at which the event is
   * <em>triggered</em>, and the time at which assignments are
   * <em>executed</em>.  It is also possible to distinguish between the
   * time at which the {@link EventAssignment}\'s expression is calculated, and the
   * time at which the assignment is made: the expression could be
   * evaluated at the same time the assignments are performed, i.e., when
   * the event is <em>executed</em>, but it could also be defined to be
   * evaluated at the time the event is <em>triggered</em>.
   * <p>
   * In SBML Level&nbsp;2 versions prior to Version&nbsp;4, the semantics
   * of {@link Event} time delays were defined such that the expressions in the
   * event\'s assignments were always evaluated at the time the event was
   * <em>triggered</em>.  This definition made it difficult to define an
   * event whose assignment formulas were meant to be evaluated at the time
   * the event was <em>executed</em> (i.e., after the time period defined
   * by the value of the {@link Delay} element).  In SBML Level&nbsp;2
   * Version&nbsp;4, the attribute \'useValuesFromTriggerTime\' on {@link Event}
   * allows a model to indicate the time at which the event\'s assignments
   * are intended to be evaluated.  In SBML Level&nbsp;2, the attribute has
   * a default value of <code>true</code>, which corresponds to the interpretation of
   * event assignments prior to Version&nbsp;4: the values of the
   * assignment formulas are computed at the moment the event is triggered,
   * not after the delay.  If \'useValuesFromTriggerTime\'=<code>false</code>, it means
   * that the formulas in the event\'s assignments are to be computed after
   * the delay, at the time the event is executed.  In SBML Level&nbsp;3,
   * the attribute is mandatory, not optional, and all events must specify
   * a value for it.
   * <p>
   * @return the value of the attribute \'useValuesFromTriggerTime\' as a boolean.
   * <p>
   * @warning The attribute \'useValuesFromTriggerTime\' was introduced in
   * SBML Level&nbsp;2 Version&nbsp;4.  It is not valid in models defined
   * using SBML Level&nbsp;2 versions prior to Version&nbsp;4.  If a
   * Level&nbsp;2 Version&nbsp;1&ndash;3 model sets the attribute, the
   * consistency-checking method {@link SBMLDocument#checkConsistency()} will
   * report an error.
   */
 public";


%javamethodmodifiers Event::isSetId() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Event}\'s \'id\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'id\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Event::isSetName() const "
  /**
   * Predicate returning <code>true</code> if this
   * {@link Event}\'s \'name\' attribute is set.
   * <p>
   * @return <code>true</code> if the \'name\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Event::isSetTrigger() const "
  /**
   * Predicate for testing whether the trigger for this {@link Event} is set.
   * <p>
   * @return <code>true</code> if the trigger of this {@link Event} is set, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers Event::isSetDelay() const "
  /**
   * Predicate for testing whether the delay for this {@link Event} is set.
   * <p>
   * @return <code>true</code> if the delay of this {@link Event} is set, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers Event::isSetPriority() const "
  /**
   * (SBML Level&nbsp;3 only) Predicate for testing whether the priority
   * for this {@link Event} is set.
   * <p>
   * @return <code>true</code> if the priority of this {@link Event} is set, <code>false</code>
   * otherwise.
   * <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Event::isSetTimeUnits() const "
  /**
   * Predicate for testing whether the \'timeUnits\' attribute of this {@link Event}
   * is set.
   * <p>
   * @return <code>true</code> if the \'timeUnits\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   * <p>
   * @warning Definitions of {@link Event} in SBML Level 2 Versions&nbsp;1
   * and&nbsp;2 included the additional attribute called \'timeUnits\', but
   * it was removed in SBML Level&nbsp;2 Version&nbsp;3.  LibSBML supports
   * this attribute for compatibility with previous versions of SBML
   * Level&nbsp;2, but its use is discouraged since models in Level 2
   * Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a Version&nbsp;3
   * or&nbsp;4 model sets the attribute, the consistency-checking method
   * {@link SBMLDocument#checkConsistency()} will report an error.
   */
 public";


%javamethodmodifiers Event::isSetUseValuesFromTriggerTime() const "
  /**
   * Predicate for testing whether the \'useValuesFromTriggerTime\' attribute of this {@link Event}
   * is set.
   * <p>
   * @return <code>true</code> if the \'useValuesFromTriggerTime\' attribute of this {@link Event} is
   * set, <code>false</code> otherwise.
   * <p>
   * @note In SBML Level&nbsp;2, this attribute is optional and has a default value of
   * <code>true</code>, whereas in Level&nbsp;3 Version&nbsp;1, this optional is mandatory and
   * has no default value.
   */
 public";


%javamethodmodifiers Event::setId(const std::string& sid) "
  /**
   * Sets the value of the \'id\' attribute of this {@link Event}.
   * <p>
   * The string <code>sid</code> is copied.  Note that SBML has strict requirements
   * for the syntax of identifiers.  The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @param sid the string to use as the identifier of this {@link Event}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Event::setName(const std::string& name) "
  /**
   * Sets the value of the \'name\' attribute of this {@link Event}.
   * <p>
   * The string in <code>name</code> is copied.
   * <p>
   * @param name the new name for the {@link Event}
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Event::setTrigger(const Trigger* trigger) "
  /**
   * Sets the trigger definition of this {@link Event} to a copy of the given
   * {@link Trigger} object instance.
   * <p>
   * @param trigger the {@link Trigger} object instance to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   */
 public";


%javamethodmodifiers Event::setDelay(const Delay* delay) "
  /**
   * Sets the delay definition of this {@link Event} to a copy of the given {@link Delay}
   * object instance.
   * <p>
   * @param delay the {@link Delay} object instance to use
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   */
 public";


%javamethodmodifiers Event::setPriority(const Priority* priority) "
  /**
   * (SBML Level&nbsp;3 only) Sets the priority definition of this {@link Event}
   * to a copy of the given Priority object instance.
   * <p>
   * @param priority the Priority object instance to use
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Event::setTimeUnits(const std::string& sid) "
  /**
   * Sets the \'timeUnits\' attribute of this {@link Event} to a copy of <code>sid</code>.
   * <p>
   * @param sid the identifier of the time units to use.
   * <p>
   * @warning Definitions of {@link Event} in SBML Level 2 Versions&nbsp;1
   * and&nbsp;2 included the additional attribute called \'timeUnits\', but
   * it was removed in SBML Level&nbsp;2 Version&nbsp;3.  LibSBML supports
   * this attribute for compatibility with previous versions of SBML
   * Level&nbsp;2, but its use is discouraged since models in Level 2
   * Versions&nbsp;3 and&nbsp;4 cannot contain it.  If a Version&nbsp;3
   * or&nbsp;4 model sets the attribute, the consistency-checking method
   * {@link SBMLDocument#checkConsistency()} will report an error.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers Event::setUseValuesFromTriggerTime(bool value) "
  /**
   * Sets the \'useValuesFromTriggerTime\' attribute of this {@link Event} to a <code>value</code>.
   * <p>
   * The optional {@link Delay} on {@link Event} means there are two times to consider when
   * computing the results of an event: the time at which the event is
   * <em>triggered</em>, and the time at which assignments are
   * <em>executed</em>.  It is also possible to distinguish between the
   * time at which the {@link EventAssignment}\'s expression is calculated, and the
   * time at which the assignment is made: the expression could be
   * evaluated at the same time the assignments are performed, i.e., when
   * the event is <em>executed</em>, but it could also be defined to be
   * evaluated at the time the event is <em>triggered</em>.
   * <p>
   * In SBML Level&nbsp;2 versions prior to Version&nbsp;4, the semantics
   * of {@link Event} time delays were defined such that the expressions in the
   * event\'s assignments were always evaluated at the time the event was
   * <em>triggered</em>.  This definition made it difficult to define an
   * event whose assignment formulas were meant to be evaluated at the time
   * the event was <em>executed</em> (i.e., after the time period defined
   * by the value of the {@link Delay} element).  In SBML Level&nbsp;2
   * Version&nbsp;4, the attribute \'useValuesFromTriggerTime\' on {@link Event}
   * allows a model to indicate the time at which the event\'s assignments
   * are intended to be evaluated.  In SBML Level&nbsp;2, the attribute has
   * a default value of <code>true</code>, which corresponds to the interpretation of
   * event assignments prior to Version&nbsp;4: the values of the
   * assignment formulas are computed at the moment the event is triggered,
   * not after the delay.  If \'useValuesFromTriggerTime\'=<code>false</code>, it means
   * that the formulas in the event\'s assignments are to be computed after
   * the delay, at the time the event is executed.  In SBML Level&nbsp;3,
   * the attribute is mandatory, not optional, and all events must specify
   * a value for it.
   * <p>
   * @param value the value of useValuesFromTriggerTime to use.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @warning The attribute \'useValuesFromTriggerTime\' was introduced in
   * SBML Level&nbsp;2 Version&nbsp;4.  It is not valid in models defined
   * using SBML Level&nbsp;2 versions prior to Version&nbsp;4.  If a
   * Version&nbsp;1&ndash;&nbsp;3 model sets the attribute, the
   * consistency-checking method {@link SBMLDocument#checkConsistency()} will
   * report an error.
   */
 public";


%javamethodmodifiers Event::unsetId "
  /**
   * Unsets the value of the \'id\' attribute of this {@link Event}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Event::unsetName "
  /**
   * Unsets the value of the \'name\' attribute of this {@link Event}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Event::unsetDelay "
  /**
   * Unsets the {@link Delay} of this {@link Event}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers Event::unsetPriority "
  /**
   * (SBML Level&nbsp;3 only) Unsets the Priority of this {@link Event}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Event::unsetTimeUnits "
  /**
   * Unsets the \'timeUnits\' attribute of this {@link Event}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @warning Definitions of {@link Event} in SBML Level&nbsp;2 Versions 1 and 2
   * included the attribute called \'timeUnits\', but it was removed in SBML
   * Level&nbsp;2 Version&nbsp;3.  LibSBML supports this attribute for
   * compatibility with previous versions of SBML Level&nbsp;2, but its use
   * is discouraged since models in Level&nbsp;2 Version&nbsp;3 and
   * Version&nbsp;4 cannot contain it.  If a Version&nbsp;3 or&nbsp;4 model
   * sets this attribute, the consistency-checking method
   * {@link SBMLDocument#checkConsistency()} will report an error.
   */
 public";


%javamethodmodifiers Event::addEventAssignment(const EventAssignment* ea) "
  /**
   * Appends a copy of the given {@link EventAssignment} to this {@link Event}.
   * <p>
   * @param ea the {@link EventAssignment} object to add.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_LEVEL_MISMATCH LIBSBML_LEVEL_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_VERSION_MISMATCH LIBSBML_VERSION_MISMATCH }
   * <li> {@link  libsbmlConstants#LIBSBML_DUPLICATE_OBJECT_ID LIBSBML_DUPLICATE_OBJECT_ID }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note This method should be used with some caution.  The fact that
   * this method <em>copies</em> the object passed to it means that the caller
   * will be left holding a physically different object instance than the
   * one contained in this {@link Event}.  Changes made to the original object
   * instance (such as resetting attribute values) will <em>not affect the
   * instance in the {@link Event}</em>.  In addition, the caller should make sure
   * to free the original object if it is no longer being used, or else a
   * memory leak will result.  Please see {@link Event#createEventAssignment()}
   * for a method that does not lead to these issues.
   * <p>
   * @see #createEventAssignment()
   */
 public";


%javamethodmodifiers Event::createEventAssignment "
  /**
   * Creates a new, empty {@link EventAssignment}, adds it to this {@link Event}\'s list of
   * event assignments and returns the {@link EventAssignment}.
   * <p>
   * @return the newly created {@link EventAssignment} object instance
   * <p>
   * @see #addEventAssignment(EventAssignment ea)
   */
 public";


%javamethodmodifiers Event::createTrigger "
  /**
   * Creates a new, empty {@link Trigger}, adds it to this {@link Event} and 
   * returns the {@link Trigger}.
   * <p>
   * @return the newly created {@link Trigger} object instance
   */
 public";


%javamethodmodifiers Event::createDelay "
  /**
   * Creates a new, empty {@link Delay}, adds it to this {@link Event} and 
   * returns the {@link Delay}.
   * <p>
   * @return the newly created {@link Delay} object instance
   */
 public";


%javamethodmodifiers Event::createPriority "
  /**
   * (SBML Level&nbsp;3 only) Creates a new, empty Priority, adds it to this
   * {@link Event} and returns the Priority.
   * <p>
   * @return the newly created Priority object instance
   * <p>
   * @note The element \'priority\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Event::getListOfEventAssignments() const "
  /**
   * Returns the list of event assignments for this {@link Event}.
   * <p>
   * @return the list of EventAssignments for this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getListOfEventAssignments "
  /**
   * Returns the list of event assignments for this {@link Event}.
   * <p>
   * @return the list of EventAssignments for this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getEventAssignment "
  /**
   * Return a specific {@link EventAssignment} object of this {@link Event}.
   * <p>
   * @param n an integer, the index of the {@link EventAssignment} object to return
   * <p>
   * @return the <code>n</code>th {@link EventAssignment} of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getEventAssignment(unsigned int n) "
  /**
   * Return a specific {@link EventAssignment} object of this {@link Event}.
   * <p>
   * @param n an integer, the index of the {@link EventAssignment} object to return
   * <p>
   * @return the <code>n</code>th {@link EventAssignment} of this {@link Event}.
   */
 public";


%javamethodmodifiers Event::getEventAssignment(const std::string& variable) const "
  /**
   * Return the event assignment indicated by the given <code>variable</code>.
   * <p>
   * @param variable a string, the identifier of the variable whose
   * {@link EventAssignment} is being sought.
   * <p>
   * @return the {@link EventAssignment} for the given <code>variable</code>, or <code>null</code> if
   * no such {@link EventAssignment} exits.
   */
 public";


%javamethodmodifiers Event::getEventAssignment(const std::string& variable) "
  /**
   * Return the event assignment indicated by the given <code>variable</code>.
   * <p>
   * @param variable a string, the identifier of the variable whose
   * {@link EventAssignment} is being sought.
   * <p>
   * @return the {@link EventAssignment} for the given <code>variable</code>, or <code>null</code> if
   * no such {@link EventAssignment} exits.
   */
 public";


%javamethodmodifiers Event::getNumEventAssignments() const "
  /**
   * Returns the number of {@link EventAssignment} objects attached to this
   * {@link Event}.
   * <p>
   * @return the number of EventAssignments in this {@link Event}.
   */
 public";


%javamethodmodifiers Event::removeEventAssignment(unsigned int n) "
  /**
   * Removes the nth {@link EventAssignment} object from this {@link Event} object and
   * returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * <p>
   * @param n the index of the {@link EventAssignment} object to remove
   * <p>
   * @return the {@link EventAssignment} object removed.  As mentioned above, 
   * the caller owns the returned item. <code>null</code> is returned if the given index 
   * is out of range.
   * <p>
   */
 public";


%javamethodmodifiers Event::removeEventAssignment(const std::string& variable) "
  /**
   * Removes the {@link EventAssignment} object with the given \'variable\' attribute 
   * from this {@link Event} object and returns a pointer to it.
   * <p>
   * The caller owns the returned object and is responsible for deleting it.
   * If none of the {@link EventAssignment} objects in this {@link Event} object have the 
   * \'variable\' attribute <code>variable</code>, then <code>null</code> is returned.
   * <p>
   * @param variable the \'variable\' attribute of the {@link EventAssignment} object 
   * to remove
   * <p>
   * @return the {@link EventAssignment} object removed.  As mentioned above, the 
   * caller owns the returned object. <code>null</code> is returned if no {@link EventAssignment}
   * object with the \'variable\' attribute exists in this {@link Event} object.
   */
 public";


%javamethodmodifiers Event::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   * <p>
   * @param d the {@link SBMLDocument} to use
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::connectToChild "
  /**
   * Sets this SBML object to child SBML objects (if any).
   * (Creates a child-parent relationship by the parent)
   * <p>
   * Subclasses must override this function if they define
   * one ore more child elements.
   * Basically, this function needs to be called in
   * constructor, copy constructor and assignment operator.
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with this element and child
   * elements (if any).
   * (This is an internal implementation for enablePakcage function)
   * <p>
   * @note Subclasses of the SBML Core package in which one or more child
   * elements are defined must override this function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Event::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Event}, is
   * always <code>\'event\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'event\'.</code> 
   */
 public";


%javamethodmodifiers Event::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::setInternalIdOnly "
  /**
   * sets the mInternalIdOnly flag
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if all the required attributes for this
   * {@link Event} object have been set.
   * <p>
   * @note The required attributes for a {@link Event} object are:
   * <li> \'useValuesfromTriggerTime\' (required in SBML Level&nbsp;3)
   */
 public";


%javamethodmodifiers Event::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Event} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Event} object are:
   * <li> \'trigger\'
   * <li> \'listOfEventAssignments\' (required in SBML Level&nbsp;2, optional in Level&nbsp;3)
   */
 public";


%javamethodmodifiers Event::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Event::isExplicitlySetUVFTT() const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfEvents::ListOfEvents(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfEvents} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfEvents::ListOfEvents(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfEvents} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfEvents} object to be created.
   */
 public";


%javamethodmodifiers ListOfEvents::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfEvents}.
   * <p>
   * @return a (deep) copy of this {@link ListOfEvents}.
   */
 public";


%javamethodmodifiers ListOfEvents::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfEvents::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link Event} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfEvents::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfEvents}, the XML element name is <code>\'listOfEvents\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfEvents\'.</code>
   */
 public";


%javamethodmodifiers ListOfEvents::get(unsigned int n) "
   /**
   * Get a {@link Event} from the {@link ListOfEvents}.
   * <p>
   * @param n the index number of the {@link Event} to get.
   * <p>
   * @return the <code>n</code>th {@link Event} in this {@link ListOfEvents}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEvents::get "
  /**
   * Get a {@link Event} from the {@link ListOfEvents}.
   * <p>
   * @param n the index number of the {@link Event} to get.
   * <p>
   * @return the <code>n</code>th {@link Event} in this {@link ListOfEvents}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEvents::get(const std::string& sid) "
  /**
   * Get a {@link Event} from the {@link ListOfEvents}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Event} to get.
   * <p>
   * @return {@link Event} in this {@link ListOfEvents}
   * with the given id or <code>null</code> if no such
   * {@link Event} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEvents::get(const std::string& sid) const "
  /**
   * Get a {@link Event} from the {@link ListOfEvents}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link Event} to get.
   * <p>
   * @return {@link Event} in this {@link ListOfEvents}
   * with the given id or <code>null</code> if no such
   * {@link Event} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEvents::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfEvents} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEvents::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfEvents} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfEvents::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * The ordering of elements in the XML form of SBML is generally fixed
   * for most components in SBML.  So, for example, the {@link ListOfEvents} in a
   * model is (in SBML Level&nbsp;2 Version&nbsp;4) the twelfth ListOf___.
   * (However, it differs for different Levels and Versions of SBML, so
   * calling code should not hardwire this number.)
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfEvents::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) EventAssignment "
/** 
 * LibSBML implementation of SBML\'s EventAssignment construct for Event.
 * <p>
 * {@link Event} contains an optional element called \'listOfEventAssignments\', of
 * class {@link ListOfEventAssignments}.  In every instance of an event definition
 * in a model, the object\'s \'listOfEventAssignments\' element must have a
 * non-empty list of one or more \'eventAssignment\' elements of class
 * {@link EventAssignment}.  The object class {@link EventAssignment} has one required
 * attribute, \'variable\', and a required element, \'math\'.  Being derived
 * from {@link SBase}, it also has all the usual attributes and elements of its
 * parent class.
 * <p>
 * An {@link Event} object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The purpose
 * of the {@link EventAssignment} object class is to define how variables are
 * affected by an {@link Event}.  In SBML Level&nbsp;2, every {@link Event} object instance
 * must have a nonempty list of event assignments; in SBML Level&nbsp;3,
 * the list of assignments is optional.
 * <p>
 * The operation of an {@link Event} is divided into two phases (regardless of
 * whether a delay is involved): one phase when the event is <em>triggered</em>,
 * and the other when the event is <em>executed</em>.   {@link EventAssignment} objects
 * are interpreted when an event is executed.  The effects are described
 * below.
 * <p>
 * <h2>The attribute \'variable\'</h2>
 * <p>
 * The {@link EventAssignment} attribute \'variable\' must be the identifier of an
 * existing {@link Compartment}, {@link Species}, {@link SpeciesReference}, or {@link Parameter}
 * instance defined in the model.  When the event is executed, the value of
 * the model component identified by \'variable\' is changed by the
 * {@link EventAssignment} to the value computed by the \'math\' element; that is, a
 * species\' quantity, species reference\'s stoichiometry, compartment\'s size
 * or parameter\'s value are reset to the value computed by \'math\'.
 * <p>
 * Certain restrictions are placed on what can appear in \'variable\':
 * <ul>
 * <li> The object identified by the value of the {@link EventAssignment} attribute
 * \'variable\' must not have its \'constant\' attribute set to or default to
 * <code>true.</code>  (Constants cannot be affected by events.)
 * <p>
 * <li> The \'variable\' attribute must not contain the identifier of a
 * reaction; only species, species references, compartment and parameter
 * values may be set by an {@link Event}.
 * <p>
 * <li> The value of every \'variable\' attribute must be unique among the set
 * of {@link EventAssignment} structures within a given {@link Event} structure.  In other
 * words, a single event cannot have multiple {@link EventAssignment} objects
 * assigning the same variable.  (All of them would be performed at the
 * same time when that particular {@link Event} triggers, resulting in
 * indeterminacy.)  However, <em>separate</em> {@link Event} instances can refer to the
 * same variable.
 * <p>
 * <li> A variable cannot be assigned a value in an {@link EventAssignment} object
 * instance and also be assigned a value by an {@link AssignmentRule}; i.e., the
 * value of an {@link EventAssignment}\'s \'variable\' attribute cannot be the same as
 * the value of a {@link AssignmentRule}\' \'variable\' attribute.  (Assignment rules
 * hold at all times, therefore it would be inconsistent to also define an
 * event that reassigns the value of the same variable.)
 * </ul>
 * <p>
 * Note that the time of assignment of the object identified by the
 * value of the \'variable\' attribute is always the time at which the {@link Event}
 * is <em>executed</em>, not when it is <em>triggered</em>.  The timing is
 * controlled by the optional {@link Delay} in an {@link Event}.  The time of
 * assignment is not affected by the \'useValuesFromTriggerTime\'
 * attribute on Eventmdash;that attribute affects the time at which the
 * {@link EventAssignment}\'s \'math\' expression is <em>evaluated</em>.  In other
 * words, SBML allows decoupling the time at which the
 * \'variable\' is assigned from the time at which its value
 * expression is calculated.
 * <p>
 * <h2>The \'math\' subelement in an {@link EventAssignment}</h2>
 * <p>
 * The MathML expression contained in an {@link EventAssignment} defines the new
 * value of the variable being assigned by the {@link Event}.
 * <p>
 * As mentioned above, the time at which the expression in \'math\' is
 * evaluated is determined by the attribute \'useValuesFromTriggerTime\' on
 * {@link Event}.  If the attribute value is <code>true</code>, the expression must be
 * evaluated when the event is <em>triggered</em>; more precisely, the values of
 * identifiers occurring in MathML <code>&lt;ci&gt;</code> elements in the
 * {@link EventAssignment}\'s \'math\' expression are the values they have at the
 * point when the event <em>triggered</em>.  If, instead,
 * \'useValuesFromTriggerTime\'\'s value is <code>false</code>, it means the values at
 * <em>execution</em> time should be used; that is, the values of identifiers
 * occurring in MathML <code>&lt;ci&gt;</code> elements in the
 * {@link EventAssignment}\'s \'math\' expression are the values they have at the
 * point when the event <em>executed</em>.
 * <p>
 * <h2>SBML Level/Version differences</h2>
 * <p>
 * Between Version&nbsp;4 and previous versions of SBML Level&nbsp;2, the
 * requirements regarding the matching of units between an
 * EvengAssignment\'s formula and the units of the object identified by the
 * \'variable\' attribute changed.  Previous versions required consistency,
 * but in SBML Level&nbsp;2 Version&nbsp;4 and in SBML Level&nbsp;3, unit
 * consistency is only <em>recommended</em>.  More precisely:
 * <ul>
 * <p>
 * <li> In the case of a species, an {@link EventAssignment} sets the referenced
 * species\' quantity (concentration or amount of substance) to the value
 * determined by the formula in the {@link EventAssignment}\'s \'math\' subelement.
 * The units of the \'math\' formula should (in SBML Level&nbsp;2
 * Version&nbsp;4 and in Level&nbsp;3) or must (in previous Versions of
 * Level&nbsp;2) be identical to the units of the species.
 * <p>
 * <li> (SBML Level&nbsp;3 only.) In the case of a species reference, an
 * {@link EventAssignment} sets the stoichiometry of the reactant or product
 * referenced by the {@link SpeciesReference} object to the value determined by the
 * formula in the \'math\' element.  The unit associated with the value
 * produced by the \'math\' formula should be <code>dimensionless</code>, because
 * reactant and product stoichiometries in reactions are dimensionless
 * quantities.
 * <p>
 * <li> In the case of a compartment, an {@link EventAssignment} sets the
 * referenced compartment\'s size to the size determined by the formula in
 * the \'math\' subelement of the {@link EventAssignment}.  The overall units of the
 * formula should (in SBML Level&nbsp;2 Version&nbsp;4 and in Level&nbsp;3)
 * or must (in previous Versions of Level&nbsp;2) be identical to the units
 * specified for the size of the compartment identified by the
 * {@link EventAssignment}\'s \'variable\' attribute.
 * <p>
 * <li> In the case of a parameter, an {@link EventAssignment} sets the referenced
 * parameter\'s value to that determined by the formula in \'math\'.  The
 * overall units of the formula should (in SBML Level&nbsp;2 Version&nbsp;4
 * and Level&nbsp;3) or must (in previous Versions of Level&nbsp;2) be
 * identical to the units defined for the parameter.
 * </ul>
 * <p>
 * Note that the formula placed in the \'math\' element <em>has no assumed
 * units</em>.  The consistency of the units of the formula, and the units
 * of the entity which the assignment affects, must be explicitly
 * established just as in the case of the value of the {@link Delay} subelement.
 * An approach similar to the one discussed in the context of {@link Delay} may be
 * used for the formula of an {@link EventAssignment}.
 * <p>
 * @see Event
 * <p>
 * <p>
 */
"

%typemap(javaimports) ListOfEventAssignments "
/** 
 * LibSBML implementation of SBML\'s ListOfEventAssignments construct.
 * <p>
 * The various ListOf___ classes in SBML are merely containers used for
 * organizing the main components of an SBML model.  All are derived from
 * the abstract class {@link SBase}, and inherit the various attributes and
 * subelements of {@link SBase}, such as \'metaid\' as and \'annotation\'.  The
 * ListOf___ classes do not add any attributes of their own.
 * <p>
 * {@link ListOfEventAssignments} is entirely contained within {@link Event}.
 */
"

%javamethodmodifiers EventAssignment::EventAssignment(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link EventAssignment} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link EventAssignment}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link EventAssignment}
   * <p>
   * @note Upon the addition of a {@link EventAssignment} object to an {@link SBMLDocument}
   * (e.g., using {@link Event#addEventAssignment(EventAssignment ea)}), 
   * the SBML Level, SBML Version and XML namespace of the document 
   * <em>override</em> the values used when creating the {@link EventAssignment} object via
   * this constructor.  This is necessary to ensure that an SBML document
   * is a consistent structure.  Nevertheless, the ability to supply the
   * values at the time of creation of a {@link EventAssignment} is an important
   * aid to producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers EventAssignment::EventAssignment(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link EventAssignment} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link EventAssignment} object to an {@link SBMLDocument}
   * (e.g., using {@link Event#addEventAssignment(EventAssignment ea)}),
   * the SBML XML namespace of the document <em>overrides</em> the value used
   * when creating the {@link EventAssignment} object via this constructor.  This
   * is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a {@link EventAssignment} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers EventAssignment::EventAssignment(const EventAssignment& orig) "
  /**
   * Copy constructor; creates a copy of this {@link EventAssignment}.
   */
 public";


%javamethodmodifiers EventAssignment::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link EventAssignment}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>, which indicates
   * whether the Visitor would like to visit the next {@link EventAssignment} in
   * the list within which this {@link EventAssignment} is embedded (i.e., in the
   * {@link ListOfEventAssignments} located in the enclosing {@link Event} instance).
   */
 public";


%javamethodmodifiers EventAssignment::clone() const "
  /**
   * Creates and returns a deep copy of this {@link EventAssignment}.
   * <p>
   * @return a (deep) copy of this {@link EventAssignment}.
   */
 public";


%javamethodmodifiers EventAssignment::getVariable() const "
  /**
   * Get the value of this {@link EventAssignment}\'s \'variable\' attribute.
   * <p>
   * @return the identifier stored in the \'variable\' attribute of this
   * {@link EventAssignment}.
   */
 public";


%javamethodmodifiers EventAssignment::getMath() const "
  /**
   * Get the mathematical expression in this {@link EventAssignment}\'s \'math\'
   * subelement.
   * <p>
   * @return the top {@link ASTNode} of an abstract syntax tree representing the
   * mathematical formula in this {@link EventAssignment}.
   */
 public";


%javamethodmodifiers EventAssignment::isSetVariable() const "
  /**
   * Predicate for testing whether the attribute \'variable\' of this
   * {@link EventAssignment} is set.
   * <p>
   * @return <code>true</code> if the \'variable\' attribute of this {@link EventAssignment}
   * is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers EventAssignment::isSetMath() const "
  /**
   * Predicate for testing whether the \'math\' subelement of this
   * {@link EventAssignment} is set.
   * <p>
   * @return <code>true</code> if this {@link EventAssignment} has a \'math\' subelement,
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers EventAssignment::setVariable(const std::string& sid) "
  /**
   * Sets the attribute \'variable\' of this {@link EventAssignment} to a copy of
   * the given identifier string.
   * <p>
   * @param sid the identifier of a {@link Compartment}, {@link Species} or (global)
   * {@link Parameter} defined in this model.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers EventAssignment::setMath(const ASTNode* math) "
  /**
   * Sets the \'math\' subelement of this {@link EventAssignment} to a copy of the
   * given {@link ASTNode}.
   * <p>
   * @param math an {@link ASTNode} that will be copied and stored as the
   * mathematical formula for this {@link EventAssignment}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers EventAssignment::getDerivedUnitDefinition "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link EventAssignment}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link EventAssignment} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link EventAssignment#getDerivedUnitDefinition()} method returns the
   * calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link EventAssignment} contains literal numbers or parameters with undeclared
   * units.  In those cases, it is not possible to calculate the units of
   * the overall expression without making assumptions.  LibSBML does not
   * make assumptions about the units, and
   * {@link EventAssignment#getDerivedUnitDefinition()} only returns the units as
   * far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When
   * using this method, <strong>it is critical that callers also invoke the
   * method</strong> {@link EventAssignment#containsUndeclaredUnits()} <strong>to
   * determine whether this situation holds</strong>.  Callers should take
   * suitable action in those situations.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link EventAssignment}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers EventAssignment::getDerivedUnitDefinition() const "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this
   * {@link EventAssignment}.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link EventAssignment} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link EventAssignment#getDerivedUnitDefinition()} method returns the
   * calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link EventAssignment} contains literal numbers or parameters with undeclared
   * units.  In those cases, it is not possible to calculate the units of
   * the overall expression without making assumptions.  LibSBML does not
   * make assumptions about the units, and
   * {@link EventAssignment#getDerivedUnitDefinition()} only returns the units as
   * far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When
   * using this method, <strong>it is critical that callers also invoke the
   * method</strong> {@link EventAssignment#containsUndeclaredUnits()} <strong>to
   * determine whether this situation holds</strong>.  Callers should take
   * suitable action in those situations.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link EventAssignment}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers EventAssignment::containsUndeclaredUnits "
  /**
   * Predicate returning <code>true</code> if the math
   * expression of this {@link EventAssignment} contains literal numbers or
   * parameters with undeclared units.
   * <p>
   * The {@link EventAssignment#getDerivedUnitDefinition()} method returns what
   * libSBML computes to be the units of the \'math\', to the extent that
   * libSBML can compute them.  However, if the expression contains literal
   * numbers or parameters with undeclared units, libSBML may not be able
   * to compute the full units of the expression and will only return what
   * it can compute.  Callers should always use
   * {@link EventAssignment#containsUndeclaredUnits()} when using
   * {@link EventAssignment#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   * <p>
   * @return <code>true</code> if the math expression of this {@link EventAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link EventAssignment#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers EventAssignment::containsUndeclaredUnits() const "
  /**
   * Predicate returning <code>true</code> if the math
   * expression of this {@link EventAssignment} contains literal numbers or
   * parameters with undeclared units.
   * <p>
   * The {@link EventAssignment#getDerivedUnitDefinition()} method returns what
   * libSBML computes to be the units of the \'math\', to the extent that
   * libSBML can compute them.  However, if the expression contains literal
   * numbers or parameters with undeclared units, libSBML may not be able
   * to compute the full units of the expression and will only return what
   * it can compute.  Callers should always use
   * {@link EventAssignment#containsUndeclaredUnits()} when using
   * {@link EventAssignment#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   * <p>
   * @return <code>true</code> if the math expression of this {@link EventAssignment}
   * includes parameters/numbers 
   * with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link EventAssignment#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers EventAssignment::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers EventAssignment::getElementName() const "
  /**
   * Returns the XML element name of this object, which for
   * {@link EventAssignment}, is always <code>\'eventAssignment\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'eventAssignment\'.</code> 
   */
 public";


%javamethodmodifiers EventAssignment::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link EventAssignment} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link EventAssignment} object are:
   * <li> \'variable\'
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers EventAssignment::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link EventAssignment} object
   * have been set.
   * <p>
   * @note The required elements for a {@link EventAssignment} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers EventAssignment::getId() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link EventAssignment} object
   * have been set.
   * <p>
   * @note The required elements for a {@link EventAssignment} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers EventAssignment::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfEventAssignments::ListOfEventAssignments(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link ListOfEventAssignments} object.
   * <p>
   * The object is constructed such that it is valid for the given SBML
   * Level and Version combination.
   * <p>
   * @param level the SBML Level
   * <p>
   * @param version the Version within the SBML Level
   */
 public";


%javamethodmodifiers ListOfEventAssignments::ListOfEventAssignments(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link ListOfEventAssignments} object.
   * <p>
   * The object is constructed such that it is valid for the SBML Level and
   * Version combination determined by the {@link SBMLNamespaces} object in 
   * <code>sbmlns</code>.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object that is used to determine the
   * characteristics of the {@link ListOfEventAssignments} object to be created.
   */
 public";


%javamethodmodifiers ListOfEventAssignments::clone() const "
  /**
   * Creates and returns a deep copy of this {@link ListOfEventAssignments}.
   * <p>
   * @return a (deep) copy of this {@link ListOfEventAssignments}.
   */
 public";


%javamethodmodifiers ListOfEventAssignments::getTypeCode() const "
  /**
   * Returns the libSBML type code for this SBML object.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::getItemTypeCode() const "
  /**
   * Returns the libSBML type code for the objects contained in this {@link ListOf}
   * (i.e., {@link EventAssignment} objects, if the list is non-empty).
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for the objects contained in this {@link ListOf}
   * instance, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::getElementName() const "
  /**
   * Returns the XML element name of this object.
   * <p>
   * For {@link ListOfEventAssignments}, the XML element name is 
   * <code>\'listOfEventAssignments\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'listOfEventAssignments\'.</code>
   */
 public";


%javamethodmodifiers ListOfEventAssignments::get(unsigned int n) "
  /**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}.
   * <p>
   * @param n the index number of the {@link EventAssignment} to get.
   * <p>
   * @return the nth {@link EventAssignment} in this {@link ListOfEventAssignments}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::get "
  /**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}.
   * <p>
   * @param n the index number of the {@link EventAssignment} to get.
   * <p>
   * @return the nth {@link EventAssignment} in this {@link ListOfEventAssignments}.
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::get(const std::string& sid) "
  /**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link EventAssignment} to get.
   * <p>
   * @return {@link EventAssignment} in this {@link ListOfEventAssignments}
   * with the given id or <code>null</code> if no such
   * {@link EventAssignment} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::get(const std::string& sid) const "
  /**
   * Get a {@link EventAssignment} from the {@link ListOfEventAssignments}
   * based on its identifier.
   * <p>
   * @param sid a string representing the identifier 
   * of the {@link EventAssignment} to get.
   * <p>
   * @return {@link EventAssignment} in this {@link ListOfEventAssignments}
   * with the given id or <code>null</code> if no such
   * {@link EventAssignment} exists.
   * <p>
   * @see #get(long n)
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::remove(unsigned int n) "
  /**
   * Removes the nth item from this {@link ListOfEventAssignments} items and returns a pointer to
   * it.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * <p>
   * @param n the index of the item to remove
   * <p>
   * @see #size()
   */
 public";


%javamethodmodifiers ListOfEventAssignments::remove(const std::string& sid) "
  /**
   * Removes item in this {@link ListOfEventAssignments} items with the given identifier.
   * <p>
   * The caller owns the returned item and is responsible for deleting it.
   * If none of the items in this list have the identifier <code>sid</code>, then 
   * <code>null</code> is returned.
   * <p>
   * @param sid the identifier of the item to remove
   * <p>
   * @return the item removed.  As mentioned above, the caller owns the
   * returned item.
   */
 public";


%javamethodmodifiers ListOfEventAssignments::getElementPosition() const "
  /**
   * Get the ordinal position of this element in the containing object
   * (which in this case is the {@link Model} object).
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings, or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ListOfEventAssignments::createObject(XMLInputStream& stream) "
  /**
   * @return the SBML object corresponding to next {@link XMLToken} in the
   * XMLInputStream or <code>null</code> if the token was not recognized.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Trigger "
/** 
 * LibSBML implementation of SBML\'s Trigger construct for Event.
 * <p>
 * An {@link Event} object defines when the event can occur, the variables that are
 * affected by the event, and how the variables are affected.  The {@link Trigger}
 * construct in SBML is used to define a mathematical expression that
 * determines when an {@link Event} is <em>triggered</em>.
 * <p>
 * A {@link Trigger} object in SBML Level&nbsp;2 and Level&nbsp;3 contains one
 * subelement named \'math\' containing a MathML expression.  The expression
 * must evaluate to a value of type <code>boolean.</code>  The exact moment at which
 * the expression evaluates to <code>true</code> is the time point when the {@link Event} is
 * <em>triggered</em>.  In SBML Level&nbsp;3, {@link Trigger} has additional attributes
 * that must be assigned values; they are discussed in a separate section
 * below.
 * <p>
 * An event only <em>triggers</em> when its {@link Trigger} expression makes the
 * transition in value from <code>false</code> to <code>true.</code>  The event will also
 * trigger at any subsequent time points when the trigger makes this
 * transition; in other words, an event can be triggered multiple times
 * during a simulation if its trigger condition makes the transition from
 * <code>false</code> to <code>true</code> more than once.  In SBML Level&nbsp;3, the behavior
 * at the very start of simulation (i.e., at <em>t = 0</em>, where
 * <em>t</em> stands for time) is determined in part by the boolean flag
 * \'initialValue\'.  This and other additional features introduced in SBML
 * Level&nbsp;3 are discussed further below.
 * <p>
 * <h2>Version differences</h2>
 * <p>
 * SBML Level&nbsp;3 Version&nbsp;1 introduces two required attributes
 * on the {@link Trigger} object: \'persistent\' and \'initialValue\'.  The rest of
 * this introduction describes these two attributes.
 * <p>
 * <h3>The \'persistent\' attribute on {@link Trigger}</h3>
 * <p>
 * In the interval between when an {@link Event} object <em>triggers</em> (i.e.,
 * its {@link Trigger} object expression transitions in value from <code>false</code> to
 * <code>true</code>) and when its assignments are to be <em>executed</em>, conditions
 * in the model may change such that the trigger expression transitions
 * back from <code>true</code> to <code>false.</code>  Should the event\'s assignments still be
 * made if this happens?  Answering this question is the purpose of the
 * \'persistent\' attribute on {@link Trigger}.
 * <p>
 * If the boolean attribute \'persistent\' has a value of <code>true</code>, then once
 * the event is triggered, all of its assignments are always performed when
 * the time of execution is reached.  The name <em>persistent</em> is meant to
 * evoke the idea that the trigger expression does not have to be
 * re-checked after it triggers if \'persistent\'=<code>true.</code>  Conversely, if
 * the attribute value is <code>false</code>, then the trigger expression is not
 * assumed to persist: if the expression transitions in value back to 
 * <code>false</code> at any time between when the event triggered and when it is to be
 * executed, the event is no longer considered to have triggered and its
 * assignments are not executed.  (If the trigger expression transitions
 * once more to <code>true</code> after that point, then the event is triggered, but
 * this then constitutes a whole new event trigger-and-execute sequence.)
 * <p>
 * The \'persistent\' attribute can be especially useful when {@link Event} objects
 * contain {@link Delay} objects, but it is relevant even in a model without delays
 * if the model contains two or more events.  As explained in the
 * introduction to this section, the operation of all events in SBML
 * (delayed or not) is conceptually divided into two phases,
 * <em>triggering</em> and <em>execution</em>; however, unless events have
 * priorities associated with them, SBML does not mandate a particular
 * ordering of event execution in the case of simultaneous events.  Models
 * with multiple events can lead to situations where the execution of one
 * event affects another event\'s trigger expression value.  If that other
 * event has \'persistent\'=<code>false</code>, and its trigger expression evaluates to
 * <code>false</code> before it is to be executed, the event must not be executed
 * after all.
 * <p>
 * <h3>The \'initialValue\' attribute on {@link Trigger}</h3>
 * <p>
 * As mentioned above, an event <em>triggers</em> when the mathematical
 * expression in its {@link Trigger} object transitions in value from <code>false</code> to
 * <code>true.</code>  An unanswered question concerns what happens at the start of a
 * simulation: can event triggers make this transition at <em>t = 0</em>,
 * where <em>t</em> stands for time?
 * <p>
 * In order to determine whether an event may trigger at <em>t = 0</em>, it
 * is necessary to know what value the {@link Trigger} object\'s \'math\' expression
 * had immediately prior to <em>t = 0</em>.  This starting value of the
 * trigger expression is determined by the value of the boolean attribute
 * \'initialValue\'.  A value of <code>true</code> means the trigger expression is
 * taken to have the value <code>true</code> immediately prior to <em>t = 0</em>.  In
 * that case, the trigger cannot transition in value from <code>false</code> to 
 * <code>true</code> at the moment simulation begins (because it has the value <code>true</code>
 * both before and after <em>t = 0</em>), and can only make the transition
 * from <code>false</code> to <code>true</code> sometime <em>after</em> <em>t = 0</em>.  (To do
 * that, it would also first have to transition to <code>false</code> before it could
 * make the transition from <code>false</code> back to <code>true.</code>)  Conversely, if
 * \'initialValue\'=<code>false</code>, then the trigger expression is assumed to start
 * with the value <code>false</code>, and therefore may trigger at <em>t = 0</em> if
 * the expression evaluates to <code>true</code> at that moment.
 * <p>
 * <p>
 * @see Event
 * @see Delay
 * @see EventAssignment
 */
"

%javamethodmodifiers Trigger::Trigger(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Trigger} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Trigger}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Trigger}
   */
 public";


%javamethodmodifiers Trigger::Trigger(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Trigger} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers Trigger::Trigger(const Trigger& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Trigger}.
   */
 public";


%javamethodmodifiers Trigger::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Trigger}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers Trigger::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Trigger}.
   * <p>
   * @return a (deep) copy of this {@link Trigger}.
   */
 public";


%javamethodmodifiers Trigger::getMath() const "
  /**
   * Get the mathematical formula for the trigger and return it
   * as an AST.
   * <p>
   * @return the math of this {@link Trigger}.
   */
 public";


%javamethodmodifiers Trigger::getInitialValue() const "
  /**
   * (SBML Level&nbsp;3 only) Get the value of the \'initialValue\' attribute
   * of this {@link Trigger}.
   * <p>
   * @return the boolean value stored as the \'initialValue\' attribute value
   * in this {@link Trigger}.
   * <p>
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Trigger::getPersistent() const "
  /**
   * (SBML Level&nbsp;3 only) Get the value of the \'persistent\' attribute
   * of this {@link Trigger}.
   * <p>
   * @return the boolean value stored as the \'persistent\' attribute value
   * in this {@link Trigger}.
   * <p>
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Trigger::isSetMath() const "
  /**
   * Predicate to test whether the math for this trigger is set.
   * <p>
   * @return <code>true</code> if the formula (meaning the \'math\' subelement) of
   * this {@link Trigger} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Trigger::isSetInitialValue() const "
  /**
   * (SBML Level&nbsp;3 only) Predicate to test whether the \'initialValue\'
   * attribute for this trigger is set.
   * <p>
   * @return <code>true</code> if the initialValue attribute of
   * this {@link Trigger} is set, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Trigger::isSetPersistent() const "
  /**
   * (SBML Level&nbsp;3 only) Predicate to test whether the \'persistent\'
   * attribute for this trigger is set.
   * <p>
   * @return <code>true</code> if the persistent attribute of
   * this {@link Trigger} is set, <code>false</code> otherwise.
   * <p>
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Trigger::setMath(const ASTNode* math) "
  /**
   * Sets the trigger expression of this {@link Trigger} instance to a copy of the given
   * {@link ASTNode}.
   * <p>
   * @param math an {@link ASTNode} representing a formula tree.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers Trigger::setInitialValue(bool initialValue) "
  /**
   * (SBML Level&nbsp;3 only) Sets the \'initialValue\' attribute of this {@link Trigger} instance.
   * <p>
   * @param initialValue a boolean representing the initialValue to be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attribute \'initialValue\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Trigger::setPersistent(bool persistent) "
  /**
   * (SBML Level&nbsp;3 only) Sets the \'persistent\' attribute of this {@link Trigger} instance.
   * <p>
   * @param persistent a boolean representing the persistent value to be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <p>
   * @note The attribute \'persistent\' is available in SBML Level&nbsp;3
   * Version&nbsp;1 Core, but is not present in lower Levels of SBML.
   */
 public";


%javamethodmodifiers Trigger::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this SBML object.
   * <p>
   * @param d the {@link SBMLDocument} to use.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::setParentSBMLObject(SBase* sb) "
  /**
   * Sets the parent SBML object of this SBML object.
   * <p>
   * @param sb the SBML object to use
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Trigger::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Trigger}, is
   * always <code>\'trigger\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'trigger\'.</code> 
   */
 public";


%javamethodmodifiers Trigger::getElementPosition() const "
  /**
   * Returns the position of this element.
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Trigger} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Trigger} object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Trigger::hasRequiredAttributes() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required attributes for this {@link Trigger} object
   * have been set.
   * <p>
   * @note The required attributes for a {@link Trigger} object are:
   * <li> \'persistent\' (required in SBML Level&nbsp;3)
   * <li> \'initialValue\' (required in SBML Level&nbsp;3)
   * <p>
   * @return a boolean value indicating whether all the required
   * attributes for this object have been defined.
   */
 public";


%javamethodmodifiers Trigger::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Trigger::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Delay "
/** 
 * LibSBML implementation of SBML\'s Delay construct for Event.
 * <p>
 * An {@link Event} object defines when the event can occur, the variables that
 * are affected by the event, and how the variables are affected.  The
 * effect of the event can optionally be delayed after the occurrence of
 * the condition which invokes it.  An event delay is defined using an
 * object of class {@link Delay}.
 * <p>
 * The object class {@link Delay} is derived from {@link SBase} and adds a single
 * subelement called \'math\'.  This subelement is used to hold MathML
 * content.  The mathematical formula represented by \'math\' must evaluate
 * to a numerical value.  It is used as the length of time between when the
 * event is <em>triggered</em> and when the event\'s assignments are
 * actually <em>executed</em>.  If no delay is present on a given {@link Event}, a time
 * delay of zero is assumed.
 * <p>
 * The expression in \'math\' must be evaluated at the time the event is 
 * <em>triggered</em>.  The expression must always evaluate to a nonnegative number
 * (otherwise, a nonsensical situation could arise where an event is
 * defined to execute before it is triggered!).
 * <p>
 * <h2>The units of the mathematical expression in a {@link Delay}</h2>
 * <p>
 * In SBML Level&nbsp;2 versions before Version&nbsp;4, the units of the
 * numerical value computed by the {@link Delay}\'s \'math\' expression are 
 * <em>required</em> to be in units of time, or the model is considered to have a
 * unit consistency error.  In Level&nbsp;2 Version&nbsp;4 as well as SBML
 * Level&nbsp;3 Version&nbsp;1 Core, this requirement is relaxed; these
 * specifications only stipulate that the units of the numerical value
 * computed by a {@link Delay} instance\'s \'math\' expression <em>should</em> match the
 * model\'s units of time (meaning the definition of the <code>time</code> units in
 * the model).  LibSBML respects these requirements, and depending on
 * whether an earlier Version of SBML Level&nbsp;2 is in use, libSBML may
 * or may not flag unit inconsistencies as errors or merely warnings.
 * <p>
 * Note that <em>units are not predefined or assumed</em> for the contents
 * of \'math\' in a {@link Delay} object; rather, they must be defined explicitly for
 * each instance of a {@link Delay} object in a model.  This is an important point
 * to bear in mind when literal numbers are used in delay expressions.  For
 * example, the following {@link Event} instance would result in a warning logged
 * by {@link SBMLDocument#checkConsistency()} about the fact that libSBML cannot
 * verify the consistency of the units of the expression.  The reason is
 * that the formula inside the \'math\' element does not have any declared
 * units, whereas what is expected in this context is units of time:
 * <div class=\'fragment\'><pre>
&lt;model&gt;
    ...
    &lt;listOfEvents&gt;
        &lt;event useValuesFromTriggerTime=\'true\'&gt;
            ...
            &lt;delay&gt;
                &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
                    &lt;cn&gt; 1 &lt;/cn&gt;
                &lt;/math&gt;
            &lt;/delay&gt;
            ...
        &lt;/event&gt;
    &lt;/listOfEvents&gt;
    ...
&lt;/model&gt;
</pre></div>
 * <p>
 * The <code>&lt;cn&gt; 1 &lt;/cn&gt;</code> within the mathematical formula
 * of the <code>delay</code> above has <em>no units declared</em>.  To make the
 * expression have the needed units of time, literal numbers should be
 * avoided in favor of defining {@link Parameter} objects for each quantity, and
 * declaring units for the {@link Parameter} values.  The following fragment of
 * SBML illustrates this approach:
 * <div class=\'fragment\'><pre>
&lt;model&gt;
    ...
    &lt;listOfParameters&gt;
        &lt;parameter id=\'transcriptionDelay\' value=\'10\' units=\'second\'/&gt;
    &lt;/listOfParameters&gt;
    ...
    &lt;listOfEvents&gt;
        &lt;event useValuesFromTriggerTime=\'true\'&gt;
            ...
            &lt;delay&gt;
                &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;
                    &lt;ci&gt; transcriptionDelay &lt;/ci&gt;
                &lt;/math&gt;
            &lt;/delay&gt;
            ...
        &lt;/event&gt;
    &lt;/listOfEvents&gt;
    ...
&lt;/model&gt;
</pre></div>
 * <p>
 * In SBML Level&nbsp;3, an alternative approach is available in the form
 * of the <code>units</code> attribute, which SBML Level&nbsp;3 allows to appear on
 * MathML <code>cn</code> elements.  The value of this attribute can be used to
 * indicate the unit of measurement to be associated with the number in the
 * content of a <code>cn</code> element.  The attribute is named <code>units</code> but,
 * because it appears inside MathML element (which is in the XML namespace
 * for MathML and not the namespace for SBML), it must always be prefixed
 * with an XML namespace prefix for the SBML Level&nbsp;3 Version&nbsp;1
 * namespace.  The following is an example of this approach:
 * <div class=\'fragment\'><pre>
&lt;model timeUnits=\'second\' ...&gt;
    ...
    &lt;listOfEvents&gt;
        &lt;event useValuesFromTriggerTime=\'true\'&gt;
            ...
            &lt;delay&gt;
                &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'
                      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'&gt;
                    &lt;cn sbml:units=\'second\'&gt; 10 &lt;/cn&gt;
                &lt;/math&gt;
            &lt;/delay&gt;
            ...
        &lt;/event&gt;
    &lt;/listOfEvents&gt;
    ...
&lt;/model&gt;
</pre></div>
 */
"

%javamethodmodifiers Delay::Delay(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link Delay} using the given SBML <code>level</code> and <code>version</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link Delay}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link Delay}
   * <p>
   * @note Upon the addition of a {@link Delay} object to an {@link Event} (e.g., using
   * {@link Event#setDelay(Delay d)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used when
   * creating the {@link Delay} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a {@link Delay} is
   * an important aid to producing valid SBML.  Knowledge of the intented
   * SBML Level and Version determine whether it is valid to assign a
   * particular value to an attribute, or whether it is valid to add a
   * particular {@link Delay} object to an existing {@link Event}.
   */
 public";


%javamethodmodifiers Delay::Delay(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link Delay} using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a {@link Delay} object to an {@link Event} (e.g., using
   * {@link Event#setDelay(Delay d)}), the SBML XML namespace of
   * the document <em>overrides</em> the value used when creating the {@link Delay}
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a {@link Delay} is an important
   * aid to producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add a particular {@link Delay} object
   * to an existing {@link Event}.
   */
 public";


%javamethodmodifiers Delay::Delay(const Delay& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Delay}.
   */
 public";


%javamethodmodifiers Delay::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link Delay}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers Delay::clone() const "
  /**
   * Creates and returns a deep copy of this {@link Delay}.
   * <p>
   * @return a (deep) copy of this {@link Delay}.
   */
 public";


%javamethodmodifiers Delay::getMath() const "
  /**
   * Get the mathematical formula for the delay and return it
   * as an AST.
   * <p>
   * @return the math of this {@link Delay}.
   */
 public";


%javamethodmodifiers Delay::isSetMath() const "
  /**
   * Predicate to test whether the formula for this delay is set.
   * <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link Delay} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Delay::setMath(const ASTNode* math) "
  /**
   * Sets the delay expression of this {@link Delay} instance to a copy of the given
   * {@link ASTNode}.
   * <p>
   * @param math an {@link ASTNode} representing a formula tree.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers Delay::getDerivedUnitDefinition "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this {@link Delay}.
   * <p>
   * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
   * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
   * calculated based on the mathematical expression and the model
   * quantities referenced by <code>&lt;ci&gt;</code> elements used within
   * that expression.  The {@link Delay#getDerivedUnitDefinition()} method returns
   * what libSBML computes the units to be, to the extent that libSBML can
   * compute them.
   * <p>
   * (Prior to SBML Level&nbsp;2 Version&nbsp;2, there existed an attribute
   * on {@link Event} called \'timeUnits\'.  This attribute could be used to set the
   * intended units of the delay expression.  For such models, this will
   * return a {@link UnitDefinition} object that corresponds to the declared
   * \'timeUnits\' units.)
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the {@link Delay}
   * contains literal numbers or parameters with undeclared units.  In
   * those cases, it is not possible to calculate the units of the overall
   * expression without making assumptions.  LibSBML does not make
   * assumptions about the units, and {@link Delay#getDerivedUnitDefinition()}
   * only returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  When using this method, <strong>it is
   * critical that callers also invoke the method</strong>
   * {@link Delay#containsUndeclaredUnits()} <strong>to determine whether this
   * situation holds</strong>.  Callers should take suitable action in
   * those situations.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Delay}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers Delay::getDerivedUnitDefinition() const "
  /**
   * Calculates and returns a {@link UnitDefinition} that expresses the units
   * of measurement assumed for the \'math\' expression of this {@link Delay}.
   * <p>
   * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
   * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
   * calculated based on the mathematical expression and the model
   * quantities referenced by <code>&lt;ci&gt;</code> elements used within
   * that expression.  The {@link Delay#getDerivedUnitDefinition()} method returns
   * what libSBML computes the units to be, to the extent that libSBML can
   * compute them.
   * <p>
   * (Prior to SBML Level&nbsp;2 Version&nbsp;2, there existed an attribute
   * on {@link Event} called \'timeUnits\'.  This attribute could be used to set the
   * intended units of the delay expression.  For such models, this will
   * return a {@link UnitDefinition} object that corresponds to the declared
   * \'timeUnits\' units.)
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the {@link Delay}
   * contains literal numbers or parameters with undeclared units.  In
   * those cases, it is not possible to calculate the units of the overall
   * expression without making assumptions.  LibSBML does not make
   * assumptions about the units, and {@link Delay#getDerivedUnitDefinition()}
   * only returns the units as far as it is able to determine them.  For
   * example, in an expression <em>X + Y</em>, if <em>X</em> has
   * unambiguously-defined units and <em>Y</em> does not, it will return
   * the units of <em>X</em>.  When using this method, <strong>it is
   * critical that callers also invoke the method</strong>
   * {@link Delay#containsUndeclaredUnits()} <strong>to determine whether this
   * situation holds</strong>.  Callers should take suitable action in
   * those situations.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math 
   * expression of this {@link Delay}, or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers Delay::containsUndeclaredUnits "
  /**
   * Predicate returning <code>true</code> if 
   * the \'math\' expression in this {@link Delay} instance contains
   * parameters with undeclared units or literal numbers.
   * <p>
   * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
   * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
   * calculated based on the mathematical expression and the model
   * quantities referenced by <code>&lt;ci&gt;</code> elements used within
   * that expression.  The {@link Delay#getDerivedUnitDefinition()} method returns
   * what libSBML computes the units to be, to the extent that libSBML can
   * compute them.  However, if the expression contains literal numbers or
   * parameters with undeclared units, libSBML may not be able to compute
   * the full units of the expression and will only return what it can
   * compute.  Callers should always use {@link Delay#containsUndeclaredUnits()}
   * when using {@link Delay#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   * <p>
   * @return <code>true</code> if the math expression of this {@link Delay} includes
   * numbers/parameters with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link Delay#getDerivedUnitDefinition()} may not accurately
   * represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers Delay::containsUndeclaredUnits() const "
  /**
   * Predicate returning <code>true</code> if 
   * the \'math\' expression in this {@link Delay} instance contains
   * parameters with undeclared units or literal numbers.
   * <p>
   * {@link Delay} elements in SBML express a time delay for an {@link Event}.  Beginning
   * with SBML Level&nbsp;2 Version&nbsp;2, the units of that time are
   * calculated based on the mathematical expression and the model
   * quantities referenced by <code>&lt;ci&gt;</code> elements used within
   * that expression.  The {@link Delay#getDerivedUnitDefinition()} method returns
   * what libSBML computes the units to be, to the extent that libSBML can
   * compute them.  However, if the expression contains literal numbers or
   * parameters with undeclared units, libSBML may not be able to compute
   * the full units of the expression and will only return what it can
   * compute.  Callers should always use {@link Delay#containsUndeclaredUnits()}
   * when using {@link Delay#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   * <p>
   * @return <code>true</code> if the math expression of this {@link Delay} includes
   * numbers/parameters with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link Delay#getDerivedUnitDefinition()} may not accurately
   * represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers Delay::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Delay::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link Delay}, is
   * always <code>\'delay\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'delay\'.</code>
   * <p>
   * @see #getTypeCode()
   */
 public";


%javamethodmodifiers Delay::getElementPosition() const "
  /**
   * Returns the position of this element.
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Delay} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Delay} object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Delay::getInternalId() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Delay} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Delay} object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::setInternalId(std::string id) "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link Delay} object
   * have been set.
   * <p>
   * @note The required elements for a {@link Delay} object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Delay::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) Priority "
/** 
 * LibSBML implementation of SBML Level 3\'s Priority construct
 * for {@link Event}.
 * <p>
 * The Priority object class (which was introduced in SBML Level&nbsp;3
 * Version&nbsp;1), like {@link Delay}, is derived from {@link SBase} and contains a MathML
 * formula stored in the element \'math\'.  This formula is used to compute a
 * dimensionless numerical value that influences the order in which a
 * simulator is to perform the assignments of two or more events that
 * happen to be executed simultaneously.  The formula may evaluate to any
 * <code>double</code> value (and thus may be a positive or negative number, or
 * zero), with positive numbers taken to signifying a higher priority than
 * zero or negative numbers.  If no Priority object is present on a given
 * {@link Event} object, no priority is defined for that event.
 * <p>
 * <h2>The interpretation of priorities on events in a model</h2>
 * <p>
 * For the purposes of SBML, <em>simultaneous event execution</em> is
 * defined as the situation in which multiple events have identical
 * times of execution.  The time of execution is calculated as the
 * sum of the time at which a given event\'s {@link Trigger} is <em>triggered</em>
 * plus its {@link Delay} duration, if any.  Here, <em>identical times</em> means
 * <em>mathematically equal</em> instants in time.  (In practice,
 * simulation software adhering to this specification may have to
 * rely on numerical equality instead of strict mathematical
 * equality; robust models will ensure that this difference will not
 * cause significant discrepancies from expected behavior.)
 * <p>
 * If no Priority subobjects are defined for two or more {@link Event} objects,
 * then those events are still executed simultaneously but their order of
 * execution is <em>undefined by the SBML Level&nbsp;3 Version&nbsp;1
 * specification</em>.  A software implementation may choose to execute
 * such simultaneous events in any order, as long as each event is executed
 * only once and the requirements of checking the \'persistent\' attribute
 * (and acting accordingly) are satisfied.
 * <p>
 * If Priority subobjects are defined for two or more
 * simultaneously-triggered events, the order in which those particular
 * events must be executed is dictated by their Priority objects,
 * as follows.  If the values calculated using the two Priority
 * objects\' \'math\' expressions differ, then the event having
 * the higher priority value must be executed before the event with
 * the lower value.  If, instead, the two priority values are
 * mathematically equal, then the two events must be triggered in a
 * <em>random</em> order.  It is important to note that a <em>random
 *   order is not the same as an undefined order</em>: given multiple
 * runs of the same model with identical conditions, an undefined
 * ordering would permit a system to execute the events in (for
 * example) the same order every time (according to whatever scheme
 * may have been implemented by the system), whereas the explicit
 * requirement for random ordering means that the order of execution
 * in different simulation runs depends on random chance.  In other
 * words, given two events <em>A</em> and <em>B</em>, a randomly-determined
 * order must lead to an equal chance of executing <em>A</em> first or
 * <em>B</em> first, every time those two events are executed
 * simultaneously.
 * <p>
 * A model may contain a mixture of events, some of which have
 * Priority subobjects and some do not.  Should a combination of
 * simultaneous events arise in which some events have priorities
 * defined and others do not, the set of events with defined
 * priorities must trigger in the order determined by their Priority
 * objects, and the set of events without Priority objects must be
 * executed in an <em>undefined</em> order with respect to each other
 * and with respect to the events with Priority subobjects.  (Note
 * that <em>undefined order</em> does not necessarily mean random
 * order, although a random ordering would be a valid implementation
 * of this requirement.)
 * <p>
 * The following example may help further clarify these points.
 * Suppose a model contains four events that should be executed
 * simultaneously, with two of the events having Priority objects
 * with the same value and the other two events having Priority
 * objects with the same, but different, value.  The two events with
 * the higher priorities must be executed first, in a random order
 * with respect to each other, and the remaining two events must be
 * executed after them, again in a random order, for a total of four
 * possible and equally-likely event executions: A-B-C-D, A-B-D-C,
 * B-A-C-D, and B-A-D-C.  If, instead, the model contains four events
 * all having the same Priority values, there are 4! or 24
 * possible orderings, each of which must be equally likely to be
 * chosen.  Finally, if none of the four events has a Priority
 * subobject defined, or even if exactly one of the four events has a
 * defined Priority, there are again 24 possible orderings, but the
 * likelihood of choosing any particular ordering is undefined; the
 * simulator can choose between events as it wishes.  (The SBML
 * specification only defines the effects of priorities on {@link Event}
 * objects with respect to <em>other</em> {@link Event} objects with
 * priorities.  Putting a priority on a <em>single</em> {@link Event} object
 * in a model does not cause it to fall within that scope.)
 * <p>
 * <h2>Evaluation of Priority expressions</h2>
 * <p>
 * An event\'s Priority object \'math\' expression must be
 * evaluated at the time the {@link Event} is to be <em>executed</em>.  During
 * a simulation, all simultaneous events have their Priority values
 * calculated, and the event with the highest priority is selected for
 * next execution.  Note that it is possible for the execution of one
 * {@link Event} object to cause the Priority value of another
 * simultaneously-executing {@link Event} object to change (as well as to
 * trigger other events, as already noted).  Thus, after executing
 * one event, and checking whether any other events in the model have
 * been triggered, all remaining simultaneous events that
 * <em>either</em> (i) have {@link Trigger} objects with attributes
 * \'persistent\'=<code>false</code> <em>or</em> (ii) have {@link Trigger}
 * expressions that did not transition from <code>true</code> to
 * <code>false</code>, must have their Priority expression reevaluated.
 * The highest-priority remaining event must then be selected for 
 * execution next.
 * <p>
 * <h2>Units of Priority object\'s mathematical expressions</h2>
 * <p>
 * The unit associated with the value of a Priority object\'s
 * \'math\' expression should be <code>dimensionless.</code>  This is
 * because the priority expression only serves to provide a relative
 * ordering between different events, and only has meaning with
 * respect to other Priority object expressions.  The value of
 * Priority objects is not comparable to any other kind of object in
 * an SBML model.
 * <p>
 * @note The Priority construct exists only in SBML Level&nbsp;3; it cannot
 * be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
 * <p>
 * @see Event
 * @see Delay
 * @see EventAssignment
 * @see EventAssignment
 */
"

%javamethodmodifiers Priority::Priority(unsigned int level, unsigned int version) "
  /**
   * Creates a new Priority object using the given SBML <code>level</code> and 
   * <code>version</code> values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this Priority
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * Priority
   * <p>
   * @note Upon the addition of a Priority object to an {@link Event} (e.g., using
   * {@link Event#setPriority(Priority d)}), the SBML Level, SBML Version
   * and XML namespace of the document <em>override</em> the values used when
   * creating the Priority object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a Priority is
   * an important aid to producing valid SBML.  Knowledge of the intented
   * SBML Level and Version determine whether it is valid to assign a
   * particular value to an attribute, or whether it is valid to add a
   * particular Priority object to an existing {@link Event}.<br><br>
   * <p>
   * @note The Priority construct exists only in SBML Level&nbsp;3; it
   * cannot be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
   */
 public";


%javamethodmodifiers Priority::Priority(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new Priority object using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * @note Upon the addition of a Priority object to an {@link Event} (e.g., using
   * {@link Event#setPriority(Priority d)}), the SBML XML namespace of
   * the document <em>overrides</em> the value used when creating the Priority
   * object via this constructor.  This is necessary to ensure that an SBML
   * document is a consistent structure.  Nevertheless, the ability to
   * supply the values at the time of creation of a Priority is an important
   * aid to producing valid SBML.  Knowledge of the intented SBML Level and
   * Version determine whether it is valid to assign a particular value to
   * an attribute, or whether it is valid to add a particular Priority object
   * to an existing {@link Event}.<br><br>
   * <p>
   * @note The Priority construct exists only in SBML Level&nbsp;3; it
   * cannot be used in SBML Level&nbsp;2 or Level&nbsp;1 models.
   */
 public";


%javamethodmodifiers Priority::Priority(const Priority& orig) "
  /**
   * Copy constructor; creates a copy of this Priority.
   */
 public";


%javamethodmodifiers Priority::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of Priority.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers Priority::clone() const "
  /**
   * Creates and returns a deep copy of this Priority.
   * <p>
   * @return a (deep) copy of this Priority.
   */
 public";


%javamethodmodifiers Priority::getMath() const "
  /**
   * Get the mathematical formula for the priority and return it
   * as an AST.
   * <p>
   * @return the math of this Priority.
   */
 public";


%javamethodmodifiers Priority::isSetMath() const "
  /**
   * Predicate to test whether the formula for this delay is set.
   * <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this Priority is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Priority::setMath(const ASTNode* math) "
  /**
   * Sets the math expression of this Priority instance to a copy of the given
   * {@link ASTNode}.
   * <p>
   * @param math an {@link ASTNode} representing a formula tree.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers Priority::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers Priority::getElementName() const "
  /**
   * Returns the XML element name of this object, which for Priority, is
   * always <code>\'priority\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'priority\'.</code>
   * <p>
   * @see #getTypeCode()
   */
 public";


%javamethodmodifiers Priority::getElementPosition() const "
  /**
   * Returns the position of this element.
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings or -1 (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this Priority object
   * have been set.
   * <p>
   * @note The required elements for a Priority object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers Priority::getInternalId() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this Priority object
   * have been set.
   * <p>
   * @note The required elements for a Priority object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::setInternalId(std::string id) "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this Priority object
   * have been set.
   * <p>
   * @note The required elements for a Priority object are:
   * math
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::readL3Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Priority::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SBO "
/** 
 * Methods for interacting with Systems Biology Ontology terms.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The values of \'id\' attributes on SBML components allow the components to
 * be cross-referenced within a model. The values of \'name\' attributes on
 * SBML components provide the opportunity to assign them meaningful labels
 * suitable for display to humans.  The specific identifiers and labels
 * used in a model necessarily must be unrestricted by SBML, so that
 * software and users are free to pick whatever they need.  However, this
 * freedom makes it more difficult for software tools to determine, without
 * additional human intervention, the semantics of models more precisely
 * than the semantics provided by the SBML object classes defined in other
 * sections of this document.  For example, there is nothing inherent in a
 * parameter with identifier <code>k</code> that would indicate to a
 * software tool it is a first-order rate constant (if that\'s what
 * <code>k</code> happened to be in some given model).  However, one may
 * need to convert a model between different representations (e.g.,
 * Henri-Michaelis-Menten versus elementary steps), or to use it with
 * different modeling approaches (discrete or continuous).  One may also
 * need to relate the model components with other description formats such
 * as SBGN (<a target=\'_blank\'
 * href=\'http://www.sbgn.org/\'>http://www.sbgn.org/</a>) using deeper
 * semantics.  Although an advanced software tool <em>might</em> be able to
 * deduce the semantics of some model components through detailed analysis
 * of the kinetic rate expressions and other parts of the model, this
 * quickly becomes infeasible for any but the simplest of models.
 * <p>
 * An approach to solving this problem is to associate model components
 * with terms from carefully curated controlled vocabularies (CVs).  This
 * is the purpose of the optional \'sboTerm\' attribute provided on the SBML
 * class {@link SBase}.  The \'sboTerm\' attribute always refers to terms belonging
 * to the Systems Biology Ontology (SBO).
 * <p>
 * <h2>Use of {@link SBO}</h2>
 * <p>
 * Labeling model components with terms from shared controlled vocabularies
 * allows a software tool to identify each component using identifiers that
 * are not tool-specific.  An example of where this is useful is the desire
 * by many software developers to provide users with meaningful names for
 * reaction rate equations.  Software tools with editing interfaces
 * frequently provide these names in menus or lists of choices for users.
 * However, without a standardized set of names or identifiers shared
 * between developers, a given software package cannot reliably interpret
 * the names or identifiers of reactions used in models written by other
 * tools.
 * <p>
 * The first solution that might come to mind is to stipulate that certain
 * common reactions always have the same name (e.g., \'Michaelis-Menten\'), but
 * this is simply impossible to do: not only do humans often disagree on
 * the names themselves, but it would not allow for correction of errors or
 * updates to the list of predefined names except by issuing new releases
 * of the SBML specification&mdash;to say nothing of many other limitations
 * with this approach.  Moreover, the parameters and variables that appear
 * in rate expressions also need to be identified in a way that software
 * tools can interpret mechanically, implying that the names of these
 * entities would also need to be regulated.
 * <p>
 * The Systems Biology Ontology (SBO) provides terms for identifying most
 * elements of SBML. The relationship implied by an \'sboTerm\' on an SBML
 * model component is <em>is-a</em> between the characteristic of the
 * component meant to be described by SBO on this element and the SBO
 * term identified by the value of the \'sboTerm\'. By adding SBO term
 * references on the components of a model, a software tool can provide
 * additional details using independent, shared vocabularies that can
 * enable <em>other</em> software tools to recognize precisely what the
 * component is meant to be.  Those tools can then act on that information.
 * For example, if the SBO identifier <code>\'SBO:0000049\'</code> is assigned
 * to the concept of \'first-order irreversible mass-action kinetics,
 * continuous framework\', and a given {@link KineticLaw} object in a model has an
 * \'sboTerm\' attribute with this value, then regardless of the identifier
 * and name given to the reaction itself, a software tool could use this to
 * inform users that the reaction is a first-order irreversible mass-action
 * reaction.  This kind of reverse engineering of the meaning of reactions
 * in a model would be difficult to do otherwise, especially for more
 * complex reaction types.
 * <p>
 * The presence of SBO labels on {@link Compartment}, {@link Species}, and {@link Reaction}
 * objects in SBML can help map those entities to equivalent concepts in
 * other standards, such as (but not limited to) BioPAX (<a target=\'_blank\'
 * href=\'http://www.biopax.org/\'>http://www.biopax.org/</a>), PSI-MI (<a
 * target=\'_blank\'
 * href=\'http://www.psidev.info/index.php?q=node/60\'>http://www.psidev.info</a>),
 * or the Systems Biology Graphical Notation (SBGN, <a target=\'_blank\'
 * href=\'http://www.sbgn.org/\'>http://www.sbgn.org/</a>).  Such mappings
 * can be used in conversion procedures, or to build interfaces, with SBO
 * becoming a kind of \'glue\' between standards of representation.
 * <p>
 * The presence of the label on a kinetic expression can also allow
 * software tools to make more intelligent decisions about reaction rate
 * expressions.  For example, an application could recognize certain types
 * of reaction formulas as being ones it knows how to solve with optimized
 * procedures.  The application could then use internal, optimized code
 * implementing the rate formula indexed by identifiers such as
 * <code>\'SBO:0000049\'</code> appearing in SBML models.
 * <p>
 * Finally, SBO labels may be very valuable when it comes to model
 * integration, by helping identify interfaces, convert mathematical
 * expressions and parameters etc.
 * <p>
 * Although the use of SBO can be beneficial, it is critical to keep in
 * mind that the presence of an \'sboTerm\' value on an object <em>must not
 * change the fundamental mathematical meaning</em> of the model.  An SBML
 * model must be defined such that it stands on its own and does not depend
 * on additional information added by SBO terms for a correct mathematical
 * interpretation.  SBO term definitions will not imply any alternative
 * mathematical semantics for any SBML object labeled with that term.  Two
 * important reasons motivate this principle.  First, it would be too
 * limiting to require all software tools to be able to understand the SBO
 * vocabularies in addition to understanding SBML.  Supporting SBO is not
 * only additional work for the software developer; for some kinds of
 * applications, it may not make sense.  If SBO terms on a model are
 * optional, it follows that the SBML model <em>must</em> remain
 * unambiguous and fully interpretable without them, because an application
 * reading the model may ignore the terms.  Second, we believe allowing the
 * use of \'sboTerm\' to alter the mathematical meaning of a model would
 * allow too much leeway to shoehorn inconsistent concepts into SBML
 * objects, ultimately reducing the interoperability of the models.
 * <p>
 * <h2>Relationships between {@link SBO} and SBML</h2>
 * <p>
 * The goal of SBO labeling for SBML is to clarify to the fullest extent
 * possible the nature of each element in a model.  The approach taken in
 * SBO begins with a hierarchically-structured set of controlled
 * vocabularies with six main divisions: (1) entity, (2) participant role,
 * (3) quantitative parameter, (4) modeling framework, (5) mathematical
 * expression, and (6) interaction.  The web site for SBO (<a
 * target=\'_blank\'
 * href=\'http://biomodels.net/sbo\'>http://biomodels.net</a>) should be
 * consulted for the current version of the ontology.
 * <p>
 * The Systems Biology Ontology (SBO) is not part of SBML; it is being
 * developed separately, to allow the modeling community to evolve the
 * ontology independently of SBML.  However, the terms in the ontology are
 * being designed keeping SBML components in mind, and are classified into
 * subsets that can be directly related with SBML components such as
 * reaction rate expressions, parameters, and others.  The use of \'sboTerm\'
 * attributes is optional, and the presence of \'sboTerm\' on an element does
 * not change the way the model is <em>interpreted</em>.  Annotating SBML
 * elements with SBO terms adds additional semantic information that may
 * be used to <em>convert</em> the model into another model, or another
 * format.  Although SBO support provides an important source of
 * information to understand the meaning of a model, software does not need
 * to support \'sboTerm\' to be considered SBML-compliant.
 * <p>
 */
"

%javamethodmodifiers SBO::readTerm(const XMLAttributes& attributes, SBMLErrorLog* log, unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
  /**
   * Reads (and checks) sboTerm from the given {@link XMLAttributes} set.
   * <p>
   * @return the sboTerm as an integer or -1 if the sboTerm was not in the
   * correct format or not found.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBO::writeTerm(XMLOutputStream& stream, int sboTerm) "
  /**
   * Writes sboTerm as an XMLAttribute to the given XMLOutputStream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBO::isQuantitativeParameter(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'quantiative parameter\'</em>, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers SBO::isParticipantRole(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'participant role\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isModellingFramework(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'modeling framework\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isMathematicalExpression(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'mathematical expression\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isKineticConstant(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'kinetic constant\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isReactant(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'reactant\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isProduct(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'product\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isModifier(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'modifier\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isRateLaw(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'rate law\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isEvent(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'event\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isPhysicalParticipant(unsigned int term) "
  /**
    * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
    * <p>
    * @return <code>true</code> if <code>term</code> is-a SBO <em>\'physical participant</em>, <code>false</code> otherwise.
    */
 public";


%javamethodmodifiers SBO::isParticipant(unsigned int term) "
  /**
    * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
    * <p>
    * @return <code>true</code> if <code>term</code> is-a SBO <em>\'participant\'</em>, <code>false</code> otherwise.
    */
 public";


%javamethodmodifiers SBO::isInteraction(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'interaction\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isEntity(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'entity\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isFunctionalEntity(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'functional entity\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isMaterialEntity(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'material entity\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isConservationLaw(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'conservation law\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isSteadyStateExpression(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'steady state expression\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isFunctionalCompartment(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'functional compartment\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isContinuousFramework(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'continuous framework\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isDiscreteFramework(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'discrete framework\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isLogicalFramework(unsigned int term) "
  /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'logical framework\'</em>, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::isObselete(unsigned int term) "
  /**
   * Predicate for checking whether the given term is obsolete.
   * <p>
   * @return <code>true</code> if <code>term</code> is-a SBO <em>\'obsolete\'</em> term, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::intToString(int sboTerm) "
  /**
   * Returns the integer as a correctly formatted SBO identifier string.
   * <p>
   * @return the given integer sboTerm as a zero-padded seven digit string.
   * <p>
   * @note If the sboTerm is not in the correct range
   * (0000000&ndash;9999999), an empty string is returned.
   */
 public";


%javamethodmodifiers SBO::stringToInt(const std::string& sboTerm) "
  /**
   * Returns the string as a correctly formatted SBO integer portion.
   * <p>
   * @return the given string sboTerm as an integer.  If the sboTerm is not
   * in the correct format (a zero-padded, seven digit string), <code>-1</code> is
   * returned.
   */
 public";


%javamethodmodifiers SBO::checkTerm(const std::string& sboTerm) "
  /**
   * Checks the format of the given SBO identifier string.
   * <p>
   * @return <code>true</code> if sboTerm is in the correct format (a zero-padded, seven
   * digit string), <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBO::checkTerm(int sboTerm) "
  /**
   * Checks the format of the given SBO identifier, given in the form of
   * the integer portion alone.
   * <p>
   * @return <code>true</code> if sboTerm is in the range (0000000&ndash;9999999), <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers SBO::isChildOf(unsigned int term, unsigned int parent) "
 /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * * @return true if the term is-a parent, false otherwise
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBO::populateSBOTree "
 /**
   * Returns <code>true</code> if the given term identifier comes from the stated branch of SBO.
   * populates the parent-child map
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SyntaxChecker "
/** 
 * Methods for checking syntax of SBML identifiers and other strings.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * This utility class provides static methods for checking the syntax of
 * identifiers and other text used in an SBML model.  The methods allow
 * callers to verify that strings such as SBML identifiers and XHTML notes
 * text conform to the SBML specifications.
 */
"

%javamethodmodifiers SyntaxChecker::isValidSBMLSId(std::string sid) "
  /**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers.
   * <p>
   * In SBML, identifiers that are the values of \'id\' attributes on objects
   * must conform to a data type called <code>SId</code> in the SBML
   * specifications.  LibSBML does not provide an explicit <code>SId</code>
   * data type; it uses ordinary character strings, which is easier for
   * applications to support.  LibSBML does, however, test for identifier
   * validity at various times, such as when reading in models from files
   * and data streams.
   * <p>
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   * <p>
   * @param sid string to be checked for conformance to SBML identifier
   * syntax.
   * <p>
   * @return <code>true</code> if the string conforms to type SBML data type
   * <code>SId</code>, <code>false</code> otherwise.
   * <p>
   * @note The following is a summary of the definition of the SBML identifier type 
<code>SId</code>, which defines the permitted syntax of identifiers.  We
express the syntax using an extended form of BNF notation: 
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML identifiers is
determined by an exact character sequence match; i.e., comparisons must be
performed in a case-sensitive manner.  In addition, there are a few
conditions for the uniqueness of identifiers in an SBML model.  Please
consult the SBML specifications for the exact formulations.
<p>

   * <p>
   * @see #isValidUnitSId(String sid)
   * @see #isValidXMLID(String sid)
   */
 public";


%javamethodmodifiers SyntaxChecker::isValidXMLID(std::string id) "
  /**
   * Returns <code>true</code> or <code>false</code> depending on whether the argument string
   * conforms to the XML data type <code>ID</code>.
   * <p>
   * In SBML, identifiers that are the values of \'metaid\' attributes on
   * objects must conform to the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a> data type.  LibSBML
   * does not provide an explicit XML <code>ID</code> data type; it uses
   * ordinary character strings, which is easier for applications to
   * support.  LibSBML does, however, test for identifier validity at
   * various times, such as when reading in models from files and data
   * streams.
   * <p>
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   * <p>
   * @param id string to be checked for conformance to the syntax of
   * <a target=\'_blank\' href=\'http://www.w3.org/TR/REC-xml/#id\'>XML ID</a>.
   * <p>
   * @return <code>true</code> if the string is a syntactically-valid value for the
   * XML type <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/REC-xml/#id\'>ID</a>, <code>false</code> otherwise.
   * <p>
   * @note The following is a summary of the definition of the XML&nbsp;1.0 data type
<a target=\'_blank\' href=\'http://www.w3.org/TR/REC-xml/#id\'>ID</a>.  We
express the syntax using an extended form of BNF notation:
<p>
<nobr><code style=\'margin-left: 2em\'>NCNameChar .= letter | digit | \'.\' | \'-\' | \'_\' | \':\' | CombiningChar | Extender</code><br></nobr>
<code style=\'margin-left: 2em\'>ID .= ( letter | \'_\' | \':\' ) NCNameChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> means \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'. The production <code>letter</code>
consists of the basic upper and lower case alphabetic characters of the
Latin alphabet along with a large number of related characters defined by
Unicode&nbsp;2.0; similarly, the production <code>digit</code> consists of
the numerals <code>0..9</code> along with related Unicode&nbsp;2.0
characters.  The <code>CombiningChar</code> production is a list of
characters that add such things as accents to the preceding character. (For
example, the Unicode character <code>\#x030A</code> when combined with
<code>a</code> produces <code>\aa</code>.)  The <code>Extender</code>
production is a list of characters that extend the shape of the preceding
character.  Please consult the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2004/REC-xml-20040204/\'>XML&nbsp;1.0
specification</a> for the complete definitions of <code>letter</code>,
<code>digit</code>, <code>CombiningChar</code>, and <code>Extender</code>.
<p>

   * <p>
   * @see #isValidSBMLSId(String sid)
   * @see #isValidUnitSId(String sid)
   */
 public";


%javamethodmodifiers SyntaxChecker::isValidUnitSId(std::string units) "
  /**
   * Returns <code>true</code> or <code>false</code> depending on whether the argument string
   * conforms to the syntax of SBML unit identifiers.
   * <p>
   * In SBML, the identifiers of units (of both the predefined units and
   * user-defined units) must conform to a data type called
   * <code>UnitSId</code> in the SBML specifications.  LibSBML does not
   * provide an explicit <code>UnitSId</code> data type; it uses ordinary
   * character strings, which is easier for applications to support.
   * LibSBML does, however, test for identifier validity at various times,
   * such as when reading in models from files and data streams.
   * <p>
   * This method provides programs with the ability to test explicitly that
   * the identifier strings they create conform to the SBML identifier
   * syntax.
   * <p>
   * @param units string to be checked for conformance to SBML unit
   * identifier syntax.
   * <p>
   * @return <code>true</code> if the string conforms to type SBML data type
   * <code>UnitSId</code>, <code>false</code> otherwise.
   * <p>
   * @note The following is a summary of the definition of the SBML identifier type
<code>UnitSId</code>, which defines the permitted syntax of identifiers.
We express the syntax using an extended form of BNF notation:
<p>
<code style=\'margin-left: 2em\'>letter .= \'a\'..\'z\',\'A\'..\'Z\'</code><br>
<code style=\'margin-left: 2em\'>digit  .= \'0\'..\'9\'</code><br>
<code style=\'margin-left: 2em\'>idChar .= letter | digit | \'_\'</code><br>
<code style=\'margin-left: 2em\'>SId    .= ( letter | \'_\' ) idChar*</code><br>
<p>
The characters <code>(</code> and <code>)</code> are used for grouping, the
character <code>*</code> \'zero or more times\', and the character
<code>|</code> indicates logical \'or\'.  The equality of SBML unit
identifiers is determined by an exact character sequence match; i.e.,
comparisons must be performed in a case-sensitive manner.  In addition,
there are a few conditions for the uniqueness of unit identifiers in an
SBML model.  Please consult the SBML specifications for the exact
formulations.
<p>

   * <p>
   * @see #isValidSBMLSId(String sid)
   * @see #isValidXMLID(String sid)
   */
 public";


%javamethodmodifiers SyntaxChecker::hasExpectedXHTMLSyntax(const XMLNode * xhtml, SBMLNamespaces * sbmlns = NULL) "
  /**
   * Returns <code>true</code> or <code>false</code> depending on whether the given {@link XMLNode}
   * object contains valid XHTML content.
   * <p>
   * In SBML, the content of the \'notes\' subelement available on {@link SBase}, as
   * well as the \'message\' subelement available on {@link Constraint}, must conform
   * to <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/xhtml1/\'>XHTML&nbsp;1.0</a> (which is
   * simply an XML-ized version of HTML).  However, the content cannot be
   * <em>entirely</em> free-form; it must satisfy certain requirements defined in
   * the <a target=\'_blank\'
   * href=\'http://sbml.org/Documents/Specifications\'>SBML
   * specifications</a> for specific SBML Levels.  This method implements a
   * verification process that lets callers check whether the content of a
   * given {@link XMLNode} object conforms to the SBML requirements for \'notes\' and
   * \'message\' structure.
   * <p>
   * An aspect of XHTML validity is that the content is declared to be in
   * the XML namespace for XHTML&nbsp;1.0.  There is more than one way in
   * which this can be done in XML.  In particular, a model might not
   * contain the declaration within the \'notes\' or \'message\' subelement
   * itself, but might instead place the declaration on an enclosing
   * element and use an XML namespace prefix within the \'notes\' element to
   * refer to it.  In other words, the following is valid:
   * <div class=\'fragment\'><pre>
&lt;sbml xmlns=\'http://www.sbml.org/sbml/level2/version3\' level=\'2\' version=\'3\'
      xmlns:xhtml=\'http://www.w3.org/1999/xhtml\'&gt;
  &lt;model&gt;
    &lt;notes&gt;
      &lt;xhtml:body&gt;
        &lt;xhtml:center&gt;&lt;xhtml:h2&gt;A Simple Mitotic Oscillator&lt;/xhtml:h2&gt;&lt;/xhtml:center&gt;
        &lt;xhtml:p&gt;A minimal cascade model for the mitotic oscillator.&lt;/xhtml:p&gt;
      &lt;/xhtml:body&gt;
    &lt;/notes&gt;
  ... rest of model ...
&lt;/sbml&gt;
</pre></div>
   * Contrast the above with the following, self-contained version, which
   * places the XML namespace declaration within the <code>&lt;notes&gt;</code>
   * element itself:
   * <div class=\'fragment\'><pre>
&lt;sbml xmlns=\'http://www.sbml.org/sbml/level2/version3\' level=\'2\' version=\'3\'&gt;
  &lt;model&gt;
    &lt;notes&gt;
      &lt;html xmlns=\'http://www.w3.org/1999/xhtml\'&gt;
        &lt;head&gt;
          &lt;title/&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;center&gt;&lt;h2&gt;A Simple Mitotic Oscillator&lt;/h2&gt;&lt;/center&gt;
          A minimal cascade model for the mitotic oscillator.&lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    &lt;/notes&gt;
  ... rest of model ...
&lt;/sbml&gt;
</pre></div>
   * <p>
   * Both of the above are valid XML.  The purpose of the <code>sbmlns</code>
   * argument to this method is to allow callers to check the validity of
   * \'notes\' and \'message\' subelements whose XML namespace declarations
   * have been put elsewhere in the manner illustrated above.  Callers can
   * can pass in the {@link SBMLNamespaces} object of a higher-level model
   * component if the {@link XMLNode} object does not itself have the XML namespace
   * declaration for XHTML&nbsp;1.0.
   * <p>
   * @param xhtml the {@link XMLNode} to be checked for conformance.
   * @param sbmlns the {@link SBMLNamespaces} associated with the object.
   * <p>
   * @return <code>true</code> if the {@link XMLNode} content conforms, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers SyntaxChecker::isValidInternalSId(std::string sid) "
  /**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers or is empty.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isValidInternalUnitSId(std::string sid) "
  /**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers or is empty.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isAllowedElement(const XMLNode &node) "
  /**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers or is empty.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::hasDeclaredNS(const XMLNode &node, const XMLNamespaces* toplevelNS) "
  /**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers or is empty.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isCorrectHTMLNode(const XMLNode &node) "
  /**
   * Returns true <code>true</code> or <code>false</code> depending on whether the argument
   * string conforms to the syntax of SBML identifiers or is empty.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isUnicodeLetter(std::string::iterator, unsigned int) "
  /**
   * Checks if a character is part of the Unicode Letter set.
   * @return true if the character is a part of the set, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isUnicodeDigit(std::string::iterator, unsigned int) "
  /**
   * Checks if a character is part of the Unicode Digit set.
   * @return true if the character is a part of the set, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isCombiningChar(std::string::iterator, unsigned int) "
  /**
   * Checks if a character is part of the Unicode CombiningChar set.
   * @return true if the character is a part of the set, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SyntaxChecker::isExtender(std::string::iterator, unsigned int) "
  /**
   * Checks if a character is part of the Unicode Extender set.
   * @return true if the character is a part of the set, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) StoichiometryMath "
/** 
 * LibSBML implementation of SBML Level&nbsp;2\'s StoichiometryMath construct.
 * <p>
 * <h2>Stoichiometries in SBML Level 2</h2>
 * <p>
 * In SBML Level 2, product and reactant stoichiometries can be specified
 * using <em>either</em> the \'stoichiometry\' attribute or a \'stoichiometryMath\'
 * element in a {@link SpeciesReference} object.  The \'stoichiometry\' attribute is
 * of type <code>double</code> and should contain values greater than zero (0).  The
 * \'stoichiometryMath\' element is implemented as an element containing a
 * MathML expression.  These two are mutually exclusive; only one of
 * \'stoichiometry\' or \'stoichiometryMath\' should be defined in a given
 * {@link SpeciesReference} instance.  When neither the attribute nor the element
 * is present, the value of \'stoichiometry\' in the enclosing
 * {@link SpeciesReference} instance defaults to <code>1.</code>
 * <p>
 * For maximum interoperability, {@link SpeciesReference}\'s \'stoichiometry\'
 * attribute should be used in preference to \'stoichiometryMath\' when a
 * species\' stoichiometry is a simple scalar number (integer or decimal).
 * When the stoichiometry is a rational number, or when it is a more
 * complicated formula, \'stoichiometryMath\' must be used.  The MathML
 * expression in \'stoichiometryMath\' may also refer to identifiers of
 * entities in a model (except reaction identifiers).  However, the only
 * species identifiers that can be used in \'stoichiometryMath\' are those
 * referenced in the enclosing {@link Reaction}\'s list of reactants, products and
 * modifiers.
 * <p>
 * The \'stoichiometry\' attribute and the \'stoichiometryMath\' element, when
 * either is used, is each interpreted as a factor applied to the reaction
 * rate to produce the rate of change of the species identified by the
 * \'species\' attribute in the enclosing {@link SpeciesReference}.  This is the
 * normal interpretation of a stoichiometry, but in SBML, one additional
 * consideration has to be taken into account.  The reaction rate, which is
 * the result of the {@link KineticLaw}\'s \'math\' element, is always in the model\'s
 * <em>substance</em> per <em>time</em> units.  However, the rate of change of the
 * species will involve the species\' <em>substance</em> units (i.e., the units
 * identified by the {@link Species} object\'s \'substanceUnits\' attribute), and
 * these units may be different from the model\'s default <em>substance</em>
 * units.  If the units <em>are</em> different, the stoichiometry must
 * incorporate a conversion factor for converting the model\'s <em>substance</em>
 * units to the species\' <em>substance</em> units.  The conversion factor is
 * assumed to be included in the scalar value of the \'stoichiometry\'
 * attribute if \'stoichiometry\' is used.  If instead \'stoichiometryMath\' is
 * used, then the product of the model\'s \'substance\' units times the
 * \'stoichiometryMath\' units must match the <em>substance</em> units of the
 * species.  Note that in either case, if the species\' units and the
 * model\'s default <em>substance</em> units are the same, the stoichiometry ends
 * up being a dimensionless number and equivalent to the standard chemical
 * stoichiometry found in textbooks.  Examples and more explanations of
 * this are given in the SBML specification.
 * <p>
 * The following is a simple example of a species reference for species 
 * <code>\'X0\'</code>, with stoichiometry <code>2</code>, in a list of reactants within a reaction
 * having the identifier <code>\'J1\':</code>
 * <div class=\'fragment\'><pre>
 * &lt;model&gt;
 *     ...
 *     &lt;listOfReactions&gt;
 *         &lt;reaction id=\'J1\'&gt;
 *             &lt;listOfReactants&gt;
 *                 &lt;speciesReference species=\'X0\' stoichiometry=\'2\'&gt;
 *             &lt;/listOfReactants&gt;
 *             ...
 *         &lt;/reaction&gt;
 *         ...
 *     &lt;/listOfReactions&gt;
 *     ...
 * &lt;/model&gt;</pre></div>
 * <p>
 * The following is a more complex example of a species reference for
 * species <code>\'X0\'</code>, with a stoichiometry formula consisting of
 * a rational number:
 * <div class=\'fragment\'><pre>
 * &lt;model&gt;
 *     ...
 *     &lt;listOfReactions&gt;
 *         &lt;reaction id=\'J1\'&gt;
 *             &lt;listOfReactants&gt;
 *                 &lt;speciesReference species=\'X0\'&gt;
 *                     &lt;stoichiometryMath&gt;
 *                         &lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt; 
 *                             &lt;cn type=\'rational\'&gt; 3 &lt;sep/&gt; 2 &lt;/cn&gt;
 *                         &lt;/math&gt;
 *                     &lt;/stoichiometryMath&gt;
 *                 &lt;/speciesReference&gt;
 *             &lt;/listOfReactants&gt;
 *             ...
 *         &lt;/reaction&gt;
 *         ...
 *     &lt;/listOfReactions&gt;
 *     ...
 * &lt;/model&gt;</pre></div>
 * <p>
 * Additional discussions of stoichiometries and implications for species
 * and reactions are included in the documentation of {@link SpeciesReference}
 * class.
 * <p>
 * <h2>Stoichiometries in SBML Level 3</h2>
 * <p>
 * The {@link StoichiometryMath} construct is not defined in SBML Level&nbsp;3
 * Version&nbsp;1 Core.  Instead, Level&nbsp;3 defines the identifier of
 * {@link SpeciesReference} objects as a stand-in for the stoichiometry of the
 * reactant or product being referenced, and allows that identifier to be
 * used elsewhere in SBML models, including (for example) {@link InitialAssignment}
 * objects.  This makes it possible to achieve the same effect as
 * {@link StoichiometryMath}, but with other SBML objects.  For instance, to
 * produce a stoichiometry value that is a rational number, a model can use
 * {@link InitialAssignment} to assign the identifier of a {@link SpeciesReference} object
 * to a MathML expression evaluating to a rational number.  This is
 * analogous to the same way that, in Level&nbsp;2, the model would use
 * {@link StoichiometryMath} with a MathML expression evaluating to a rational
 * number.
 * <p>
 * In SBML Level 2, the stoichiometry of a reactant or product is a
 * combination of both a <em>biochemical stoichiometry</em> (meaning, the
 * standard stoichiometry of a species in a reaction) and any necessary
 * unit conversion factors. The introduction of an explicit attribute on
 * the {@link Species} object for a conversion factor allows Level&nbsp;3 to avoid
 * having to overload the meaning of stoichiometry.  In Level&nbsp;3, the
 * stoichiometry given by a {@link SpeciesReference} object in a reaction is a
 * \'proper\' biochemical stoichiometry, meaning a dimensionless number free
 * of unit conversions.
 * <p>
 * @see SpeciesReference
 * @see Reaction
 */
"

%javamethodmodifiers StoichiometryMath::StoichiometryMath(unsigned int level, unsigned int version) "
  /**
   * Creates a new {@link StoichiometryMath} object using the given SBML <code>level</code>
   * values.
   * <p>
   * @param level a long integer, the SBML Level to assign to this {@link StoichiometryMath}
   * <p>
   * @param version a long integer, the SBML Version to assign to this
   * {@link StoichiometryMath}
   * <p>
   * The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.  It
   * is an optional construct available for defining the stoichiometries of
   * reactants and products in {@link Reaction} objects.  Note that a different
   * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
   * available.  Please consult the top of this libSBML {@link StoichiometryMath}
   * documentation for more information about the differences between SBML
   * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   * <p>
   * @note Upon the addition of a {@link StoichiometryMath} object to an
   * {@link SBMLDocument} (e.g., using
   * {@link SpeciesReference#createStoichiometryMath()}), the SBML Level, SBML
   * Version and XML namespace of the document <em>override</em> the values used
   * when creating the {@link StoichiometryMath} object via this constructor.  This
   * is necessary to ensure that an SBML document is a consistent
   * structure.  Nevertheless, the ability to supply the values at the time
   * of creation of a {@link StoichiometryMath} is an important aid to producing
   * valid SBML.  Knowledge of the intented SBML Level and Version
   * determine whether it is valid to assign a particular value to an
   * attribute, or whether it is valid to add an object to an existing
   * {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers StoichiometryMath::StoichiometryMath(SBMLNamespaces* sbmlns) "
  /**
   * Creates a new {@link StoichiometryMath} object using the given {@link SBMLNamespaces} object
   * <code>sbmlns</code>.
   * <p>
   * The {@link SBMLNamespaces} object encapsulates SBML Level/Version/namespaces
   * information.  It is used to communicate the SBML Level, Version, and
   * (in Level&nbsp;3) packages used in addition to SBML Level&nbsp;3 Core.
   * A common approach to using this class constructor is to create an
   * {@link SBMLNamespaces} object somewhere in a program, once, then pass it to
   * object constructors such as this one when needed.
   * <p>
   * @param sbmlns an {@link SBMLNamespaces} object.
   * <p>
   * The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.  It
   * is an optional construct available for defining the stoichiometries of
   * reactants and products in {@link Reaction} objects.  Note that a different
   * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
   * available.  Please consult the top of this libSBML {@link StoichiometryMath}
   * documentation for more information about the differences between SBML
   * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   * <p>
   * @note Upon the addition of a {@link StoichiometryMath} object to an
   * {@link SBMLDocument} (e.g., using
   * {@link SpeciesReference#createStoichiometryMath()}), the SBML XML namespace
   * of the document <em>overrides</em> the value used when creating the
   * {@link StoichiometryMath} object via this constructor.  This is necessary to
   * ensure that an SBML document is a consistent structure.  Nevertheless,
   * the ability to supply the values at the time of creation of a
   * {@link StoichiometryMath} is an important aid to producing valid SBML.
   * Knowledge of the intented SBML Level and Version determine whether it
   * is valid to assign a particular value to an attribute, or whether it
   * is valid to add an object to an existing {@link SBMLDocument}.
   */
 public";


%javamethodmodifiers StoichiometryMath::StoichiometryMath(const StoichiometryMath& orig) "
  /**
   * Copy constructor; creates a copy of this {@link StoichiometryMath}.
   */
 public";


%javamethodmodifiers StoichiometryMath::accept(SBMLVisitor& v) const "
  /**
   * Accepts the given {@link SBMLVisitor} for this instance of {@link StoichiometryMath}.
   * <p>
   * @param v the {@link SBMLVisitor} instance to be used.
   * <p>
   * @return the result of calling <code>v.visit()</code>.
   */
 public";


%javamethodmodifiers StoichiometryMath::clone() const "
  /**
   * Creates and returns a deep copy of this {@link StoichiometryMath} object.
   * <p>
   * @return a (deep) copy of this {@link StoichiometryMath}.
   */
 public";


%javamethodmodifiers StoichiometryMath::getMath() const "
  /**
   * Retrieves the mathematical formula within this {@link StoichiometryMath} and
   * return it as an AST.
   * <p>
   * @return the math of this {@link StoichiometryMath}.
   * <p>
   * The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.  It
   * is an optional construct available for defining the stoichiometries of
   * reactants and products in {@link Reaction} objects.  Note that a different
   * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
   * available.  Please consult the top of this libSBML {@link StoichiometryMath}
   * documentation for more information about the differences between SBML
   * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   */
 public";


%javamethodmodifiers StoichiometryMath::isSetMath() const "
  /**
   * Predicate to test whether the math for this {@link StoichiometryMath} object
   * is set.
   * <p>
   * @return <code>true</code> if the formula (meaning the <code>math</code> subelement) of
   * this {@link StoichiometryMath} is set, <code>false</code> otherwise.
   * <p>
   * The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.  It
   * is an optional construct available for defining the stoichiometries of
   * reactants and products in {@link Reaction} objects.  Note that a different
   * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
   * available.  Please consult the top of this libSBML {@link StoichiometryMath}
   * documentation for more information about the differences between SBML
   * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   */
 public";


%javamethodmodifiers StoichiometryMath::setMath(const ASTNode* math) "
  /**
   * Sets the \'math\' expression of this {@link StoichiometryMath} instance to a
   * copy of the given {@link ASTNode}.
   * <p>
   * @param math an {@link ASTNode} representing a formula tree.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * The {@link StoichiometryMath} construct exists only in SBML Level&nbsp;2.  It
   * is an optional construct available for defining the stoichiometries of
   * reactants and products in {@link Reaction} objects.  Note that a different
   * mechanism is used in SBML Level&nbsp;3, where {@link StoichiometryMath} is not
   * available.  Please consult the top of this libSBML {@link StoichiometryMath}
   * documentation for more information about the differences between SBML
   * Level&nbsp;2 and&nbsp;3 with respect to stoichiometries.
   */
 public";


%javamethodmodifiers StoichiometryMath::getDerivedUnitDefinition "
  /**
   * Calculates and returns a {@link UnitDefinition} object that expresses the
   * units returned by the math expression in this {@link StoichiometryMath}
   * object.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link StoichiometryMath} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link StoichiometryMath#getDerivedUnitDefinition()} method returns the
   * calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link StoichiometryMath} instance contains literal numbers or parameters with
   * undeclared units.  In those cases, it is not possible to calculate the
   * units of the overall expression without making assumptions.  LibSBML
   * does not make assumptions about the units, and
   * {@link StoichiometryMath#getDerivedUnitDefinition()} only returns the units
   * as far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When
   * using this method, <strong>it is critical that callers also invoke the
   * method</strong> {@link StoichiometryMath#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers
   * should take suitable action in those situations.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math, 
   * or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers StoichiometryMath::getDerivedUnitDefinition() const "
  /**
   * Calculates and returns a {@link UnitDefinition} object that expresses the
   * units returned by the math expression in this {@link StoichiometryMath}
   * object.
   * <p>
   * The units are calculated based on the mathematical expression in the
   * {@link StoichiometryMath} and the model quantities referenced by
   * <code>&lt;ci&gt;</code> elements used within that expression.  The
   * {@link StoichiometryMath#getDerivedUnitDefinition()} method returns the
   * calculated units.
   * <p>
   * Note that the functionality that facilitates unit analysis depends 
   * on the model as a whole.  Thus, in cases where the object has not 
   * been added to a model or the model itself is incomplete,
   * unit analysis is not possible and this method will return <code>null.</code>
   * <p>
   * @warning Note that it is possible the \'math\' expression in the
   * {@link StoichiometryMath} instance contains literal numbers or parameters with
   * undeclared units.  In those cases, it is not possible to calculate the
   * units of the overall expression without making assumptions.  LibSBML
   * does not make assumptions about the units, and
   * {@link StoichiometryMath#getDerivedUnitDefinition()} only returns the units
   * as far as it is able to determine them.  For example, in an expression
   * <em>X + Y</em>, if <em>X</em> has unambiguously-defined units and
   * <em>Y</em> does not, it will return the units of <em>X</em>.  When
   * using this method, <strong>it is critical that callers also invoke the
   * method</strong> {@link StoichiometryMath#containsUndeclaredUnits()}
   * <strong>to determine whether this situation holds</strong>.  Callers
   * should take suitable action in those situations.
   * <p>
   * @return a {@link UnitDefinition} that expresses the units of the math,
   * or <code>null</code> if one cannot be constructed.
   * <p>
   * @see #containsUndeclaredUnits()
   */
 public";


%javamethodmodifiers StoichiometryMath::containsUndeclaredUnits "
  /**
   * Predicate returning <code>true</code> if the math
   * expression of this {@link StoichiometryMath} object contains literal numbers
   * or parameters with undeclared units.
   * <p>
   * The {@link StoichiometryMath#getDerivedUnitDefinition()} method returns what
   * libSBML computes the units of the Stoichiometry to be, to the extent
   * that libSBML can compute them.  However, if the expression contains
   * literal numbers or parameters with undeclared units, libSBML may not
   * be able to compute the full units of the expression and will only
   * return what it can compute.  Callers should always use
   * {@link StoichiometryMath#containsUndeclaredUnits()} when using
   * {@link StoichiometryMath#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   * <p>
   * @return <code>true</code> if the math expression of this {@link StoichiometryMath}
   * includes numbers/parameters with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link StoichiometryMath#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers StoichiometryMath::containsUndeclaredUnits() const "
  /**
   * Predicate returning <code>true</code> if the math
   * expression of this {@link StoichiometryMath} object contains literal numbers
   * or parameters with undeclared units.
   * <p>
   * The {@link StoichiometryMath#getDerivedUnitDefinition()} method returns what
   * libSBML computes the units of the Stoichiometry to be, to the extent
   * that libSBML can compute them.  However, if the expression contains
   * literal numbers or parameters with undeclared units, libSBML may not
   * be able to compute the full units of the expression and will only
   * return what it can compute.  Callers should always use
   * {@link StoichiometryMath#containsUndeclaredUnits()} when using
   * {@link StoichiometryMath#getDerivedUnitDefinition()} to decide whether the
   * returned units may be incomplete.
   * <p>
   * @return <code>true</code> if the math expression of this {@link StoichiometryMath}
   * includes numbers/parameters with undeclared units, <code>false</code> otherwise.
   * <p>
   * @note A return value of <code>true</code> indicates that the {@link UnitDefinition}
   * returned by {@link StoichiometryMath#getDerivedUnitDefinition()} may not
   * accurately represent the units of the expression.
   * <p>
   * @see #getDerivedUnitDefinition()
   */
 public";


%javamethodmodifiers StoichiometryMath::getTypeCode() const "
  /**
   * Returns the libSBML type code of this object instance.
   * <p>
   * LibSBML attaches an identifying code to every
   * kind of SBML object.  These are known as <em>SBML type codes</em>.  In
   * other languages, the set of type codes is stored in an enumeration; in
   * the Java language interface for libSBML, the type codes are defined as
   * static integer constants in the interface class {@link
   * libsbmlConstants}.  The names of the type codes all begin with the
   * characters <code>SBML_.</code> 
   * <p>
   * @return the SBML type code for this object, or {@link  libsbmlConstants#SBML_UNKNOWN SBML_UNKNOWN} (default).
   * <p>
   * @see #getElementName()
   */
 public";


%javamethodmodifiers StoichiometryMath::getElementName() const "
  /**
   * Returns the XML element name of this object, which for {@link StoichiometryMath}, is
   * always <code>\'stoichiometryMath\'.</code>
   * <p>
   * @return the name of this element, i.e., <code>\'stoichiometryMath\'.</code> 
   */
 public";


%javamethodmodifiers StoichiometryMath::getElementPosition() const "
  /**
   * Returns the position of this element.
   * <p>
   * @return the ordinal position of the element with respect to its
   * siblings or <code>-1</code> (default) to indicate the position is not significant.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::writeElements(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write out their contained
   * SBML objects as XML elements.  Be sure to call your parents
   * implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::hasRequiredElements() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link StoichiometryMath} object
   * have been set.
   * <p>
   * @note The required elements for a {@link StoichiometryMath} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers StoichiometryMath::getInternalId() const "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link StoichiometryMath} object
   * have been set.
   * <p>
   * @note The required elements for a {@link StoichiometryMath} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::setInternalId(std::string id) "
  /**
   * Predicate returning <code>true</code> if
   * all the required elements for this {@link StoichiometryMath} object
   * have been set.
   * <p>
   * @note The required elements for a {@link StoichiometryMath} object are:
   * <li> \'math\'
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::readOtherXML(XMLInputStream& stream) "
  /**
   * Subclasses should override this method to read (and store) XHTML,
   * MathML, etc. directly from the XMLInputStream.
   * <p>
   * @return true if the subclass read from the stream, false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::addExpectedAttributes(ExpectedAttributes& attributes) "
  /**
   * Subclasses should override this method to get the list of
   * expected attributes.
   * This function is invoked from corresponding readAttributes()
   * function.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::readAttributes(const XMLAttributes& attributes, const ExpectedAttributes& expectedAttributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::readL2Attributes(const XMLAttributes& attributes) "
  /**
   * Subclasses should override this method to read values from the given
   * {@link XMLAttributes} set into their specific fields.  Be sure to call your
   * parents implementation of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers StoichiometryMath::writeAttributes(XMLOutputStream& stream) const "
  /**
   * Subclasses should override this method to write their XML attributes
   * to the XMLOutputStream.  Be sure to call your parents implementation
   * of this method as well.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SBMLNamespaces "
/** 
 * Class to store SBML level, version and namespace information.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * There are differences in the definitions of components between different
 * SBML Levels, as well as Versions within Levels.  For example, the
 * \'sboTerm\' attribute was not introduced until Level&nbsp;2
 * Version&nbsp;2, and then only on certain component classes; the SBML
 * Level&nbsp;2 Version&nbsp;3 specification moved the \'sboTerm\' attribute
 * to the {@link SBase} class, thereby allowing nearly all components to have {@link SBO}
 * annotations.  As a result of differences such as those, libSBML needs to
 * track the SBML Level and Version of every object created.
 * <p>
 * The purpose of the {@link SBMLNamespaces} object class is to make it easier to
 * communicate SBML Level and Version data between libSBML constructors and
 * other methods.  The {@link SBMLNamespaces} object class tracks 3-tuples
 * (triples) consisting of SBML Level, Version, and the corresponding SBML
 * XML namespace.
 * <p>
 * The plural name (SBMLNamespaces) is not a mistake, because in SBML
 * Level&nbsp;3, objects may have extensions added by Level&nbsp;3 packages
 * used by a given model and therefore may have multiple namespaces
 * associated with them; however, until the introduction of SBML
 * Level&nbsp;3, the {@link SBMLNamespaces} object only records one SBML
 * Level/Version/namespace combination at a time.  Most constructors for
 * SBML objects in libSBML take a {@link SBMLNamespaces} object as an argument,
 * thereby allowing the constructor to produce the proper combination of
 * attributes and other internal data structures for the given SBML Level
 * and Version.
 */
"

%javamethodmodifiers SBMLNamespaces::SBMLNamespaces(unsigned int level = SBML_DEFAULT_LEVEL, unsigned int version = SBML_DEFAULT_VERSION) "
  /**
   * Creates a new {@link SBMLNamespaces} object corresponding to the given SBML
   * <code>level</code> and <code>version</code>.
   * <p>
   * {@link SBMLNamespaces} objects are used in libSBML to communicate SBML Level
   * and Version data between constructors and other methods.  The
   * {@link SBMLNamespaces} object class tracks 3-tuples (triples) consisting of
   * SBML Level, Version, and the corresponding SBML XML namespace.  Most
   * constructors for SBML objects in libSBML take a {@link SBMLNamespaces} object
   * as an argument, thereby allowing the constructor to produce the proper
   * combination of attributes and other internal data structures for the
   * given SBML Level and Version.
   * <p>
   * The plural name (SBMLNamespaces) is not a mistake, because in SBML
   * Level&nbsp;3, objects may have extensions added by Level&nbsp;3
   * packages used by a given model and therefore may have multiple
   * namespaces associated with them; however, until the introduction of
   * SBML Level&nbsp;3, the {@link SBMLNamespaces} object only records one SBML
   * Level/Version/namespace combination at a time.  Most constructors for
   * SBML objects in libSBML take a {@link SBMLNamespaces} object as an argument,
   * thereby allowing the constructor to produce the proper combination of
   * attributes and other internal data structures for the given SBML Level
   * and Version.
   * <p>
   * @param level the SBML level
   * @param version the SBML version
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers SBMLNamespaces::SBMLNamespaces(unsigned int level, unsigned int version, const std::string &pkgName, unsigned int pkgVersion, const std::string& pkgPrefix = "") "
  /**
   * (For Extension)
   * <p>
   * Creates a new {@link SBMLNamespaces} object corresponding to the combination of 
   * (1) the given SBML <code>level</code> and <code>version</code>, and (2) the given <code>package</code> 
   * with the <code>package</code> <code>version</code>.
   * <p>
   * @note {@link SBMLExtensionException} will be thrown if the extension module
   *       that supports the combination of the given sbml level, sbml version, 
   *       package name, and package version has not been registered.
   * <p>
   * @param level   the SBML level
   * @param version the SBML version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param pkgPrefix the prefix of the package namespace (e.g. \'layout\', \'multi\') to be added.
   *        The package\'s name will be used if the given string is empty (default).
   * <p>
   * <p>
   */
 public";


%javamethodmodifiers SBMLNamespaces::SBMLNamespaces(const SBMLNamespaces& orig) "
  /**
   * Copy constructor; creates a copy of a {@link SBMLNamespaces}.
   * <p>
   * @param orig the {@link SBMLNamespaces} instance to copy.
   */
 public";


%javamethodmodifiers SBMLNamespaces::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SBMLNamespaces}.
   * <p>
   * @return a (deep) copy of this {@link SBMLNamespaces}.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getSBMLNamespaceURI(unsigned int level, unsigned int version) "
  /**
   * Returns a string representing the SBML XML namespace for the 
   * given <code>level</code> and <code>version</code> of SBML.
   * <p>
   * @param level the SBML level
   * @param version the SBML version
   * <p>
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version specified.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getSupportedNamespaces "
  /**
   * Returns a list of all supported {@link SBMLNamespaces} in this version of 
   * {@link libsbml}. 
   * <p>
   * @return a list with supported SBML namespaces. 
   */
 public";


%javamethodmodifiers SBMLNamespaces::getURI() const "
  /**
   * Returns a string representing the SBML XML namespace of this
   * object.
   * <p>
   * @return a string representing the SBML namespace that reflects the
   * SBML Level and Version of this object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getLevel "
  /**
   * Get the SBML Level of this {@link SBMLNamespaces} object.
   * <p>
   * @return the SBML Level of this {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getLevel() const "
  /**
   * Get the SBML Level of this {@link SBMLNamespaces} object.
   * <p>
   * @return the SBML Level of this {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getVersion "
  /**
   * Get the SBML Version of this {@link SBMLNamespaces} object.
   * <p>
   * @return the SBML Version of this {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getVersion() const "
  /**
   * Get the SBML Version of this {@link SBMLNamespaces} object.
   * <p>
   * @return the SBML Version of this {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getNamespaces "
  /**
   * Get the XML namespaces list for this {@link SBMLNamespaces} object.
   * <p>
   * The plural is not a mistake, because in SBML Level&nbsp;3, objects may
   * have extensions added by Level&nbsp;3 packages used by a given model,
   * and therefore there may be multiple XML namespaces involved too.
   * However, until the introduction of SBML Level&nbsp;3, the
   * {@link SBMLNamespaces} object only records one SBML Level/Version/namespace
   * combination at a time, and so this method will also only return
   * a list of one item.
   * <p>
   * @return the XML namespaces of this {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::getNamespaces() const "
  /**
   * Get the XML namespaces list for this {@link SBMLNamespaces} object.
   * <p>
   * The plural is not a mistake, because in SBML Level&nbsp;3, objects may
   * have extensions added by Level&nbsp;3 packages used by a given model,
   * and therefore there may be multiple XML namespaces involved too.
   * However, until the introduction of SBML Level&nbsp;3, the
   * {@link SBMLNamespaces} object only records one SBML Level/Version/namespace
   * combination at a time, and so this method will also only return
   * a list of one item.
   * <p>
   * @return the XML namespaces of this {@link SBMLNamespaces} object.
   */
 public";


%javamethodmodifiers SBMLNamespaces::addNamespaces(const XMLNamespaces * xmlns) "
  /**
   * Add the given XML namespaces list to the set of namespaces within this
   * {@link SBMLNamespaces} object.
   * <p>
   * The following code gives an example of how one could add the XHTML
   * namespace to the list of namespaces recorded by the top-level
   * <code>&lt;sbml&gt;</code> element of a model.  It gives the new
   * namespace a prefix of <code>html</code>.  <div class=\'fragment\'><pre>
{@link SBMLDocument} sd;
try 
{
    sd = new {@link SBMLDocument}(3, 1);
} 
catch (SBMLConstructorException e)
{
    // Here, have code to handle a truly exceptional situation. Candidate
    // causes include invalid combinations of SBML Level and Version
    // (impossible if hardwired as given here), running out of memory, and
    // unknown system exceptions.
}

{@link SBMLNamespaces} sn = sd.getNamespaces();
if (sn != null)
{
    sn.add(\'http://www.w3.org/1999/xhtml\', \'html\');
}
else
{
    // Handle another truly exceptional situation.
 }
</pre></div>
   * <p>
   * <p>
   * @param xmlns the XML namespaces to be added.
   */
 public";


%javamethodmodifiers SBMLNamespaces::addNamespace(const std::string& uri, const std::string &prefix) "
  /**
   * Add an XML namespace (a pair of URI and prefix) to the set of namespaces
   * within this {@link SBMLNamespaces} object.
   * <p>
   * @param uri    the XML namespace to be added.
   * @param prefix the prefix of the namespace to be added.
   */
 public";


%javamethodmodifiers SBMLNamespaces::removeNamespace(const std::string& uri) "
  /**
   * Removes an XML namespace from the set of namespaces within this 
   * {@link SBMLNamespaces} object.
   * <p>
   * @param uri    the XML namespace to be added.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers SBMLNamespaces::addPkgNamespace(const std::string &pkgName, unsigned int pkgVersion, const std::string &prefix = "") "
  /**
   * Add an XML namespace (a pair of URI and prefix) of a package extension
   * to the set of namespaces within this {@link SBMLNamespaces} object.
   * The SBML Level and SBML Version of this object is used.
   * <p>
   * @note An XML namespace of a non-registered package extension can\'t be
   * added by this function ({@link 
   * libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE} 
   * will be returned).
   * <p>
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * @param prefix the prefix of the package namespace to be added.
   *        The package\'s name will be used if the given string is empty (default).
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @see #addNamespace(String uri, String prefix)
   */
 public";


%javamethodmodifiers SBMLNamespaces::addPkgNamespaces(const XMLNamespaces* xmlns) "
  /**
   * Add the XML namespaces of package extensions in the given 
   * XMLNamespace object to the set of namespaces within this 
   * {@link SBMLNamespaces} object (Non-package XML namespaces are not added
   * by this function).
   * <p>
   * @note XML namespaces of a non-registered package extensions are not
   * added (just ignored) by this function. {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * will be returned if the given xmlns is null.
   * <p>
   * @param xmlns the XML namespaces to be added.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers SBMLNamespaces::removePkgNamespace(unsigned int level, unsigned version, const std::string &pkgName, unsigned int pkgVersion) "
  /**
   * Removes an XML namespace of a package extension from the set of namespaces 
   * within this {@link SBMLNamespaces} object.
   * <p>
   * @param level   the SBML level
   * @param version the SBML version
   * @param pkgName the string of package name (e.g. \'layout\', \'multi\')
   * @param pkgVersion the package version
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers SBMLNamespaces::isSBMLNamespace(const std::string& uri) "
  /**
   * Predicate returning <code>true</code> if the given
   * URL is one of SBML XML namespaces.
   * <p>
   * @param uri the URI of namespace
   * <p>
   * @return <code>true</code> if the \'uri\' is one of SBML namespaces, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers SBMLNamespaces::setLevel(unsigned int level) "
  /**
   * Predicate returning <code>true</code> if the given
   * URL is one of SBML XML namespaces.
   * <p>
   * @param uri the URI of namespace
   * <p>
   * @return <code>true</code> if the \'uri\' is one of SBML namespaces, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLNamespaces::setVersion(unsigned int version) "
  /**
   * Predicate returning <code>true</code> if the given
   * URL is one of SBML XML namespaces.
   * <p>
   * @param uri the URI of namespace
   * <p>
   * @return <code>true</code> if the \'uri\' is one of SBML namespaces, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLNamespaces::setNamespaces(XMLNamespaces * xmlns) "
  /**
   * Predicate returning <code>true</code> if the given
   * URL is one of SBML XML namespaces.
   * <p>
   * @param uri the URI of namespace
   * <p>
   * @return <code>true</code> if the \'uri\' is one of SBML namespaces, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLNamespaces::getPackageName() const "
  /**
   * Returns the name of the main package for this namespace.
   * <p>
   * @return the name of the main package for this namespace.
   * \'core\' will be returned if this namespace is defined in the SBML 
   * core. 
   */
 public";


%javamethodmodifiers SBMLNamespaces::initSBMLNamespace "
  /**
   * Returns the name of the main package for this namespace.
   * <p>
   * @return the name of the main package for this namespace.
   * \'core\' will be returned if this namespace is defined in the SBML 
   * core. 
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SBMLTransforms "
/** 
 * Methods for transform elements of SBML
 * <p>
 */
"

%javamethodmodifiers readMathML(XMLInputStream& stream, std::string reqd_prefix="") "
/**
 * Reads the MathML from the given XMLInputStream, constructs a corresponding
 * abstract syntax tree and returns a pointer to the root of the tree.
 <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers writeMathML(const ASTNode* node, XMLOutputStream& stream) "
/**
 * Writes the given {@link ASTNode} (and its children) to the XMLOutputStream as
 * MathML.
 <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers readMathMLFromString(const char *xml) "
/**
 * Reads the MathML from the given XML string, constructs a corresponding
 * abstract syntax tree, and returns a pointer to the root of the tree.
 * <p>
 * @param xml a string containing a full MathML expression
 * <p>
 * @return the root of an AST corresponding to the given mathematical
 * expression, otherwise <code>null</code> is returned if the given string is <code>null</code>
 * or invalid.
 */
 public";


%javamethodmodifiers writeMathMLToString(const ASTNode_t* node) "
/**
 * Writes the given {@link ASTNode} (and its children) to a string as MathML, and
 * returns the string.
 * <p>
 * @param node the root of an AST to write out to the stream.
 * <p>
 * @return a string containing the written-out MathML representation
 * of the given AST.
 * <p>
 * @note The string is owned by the caller and should be freed (with
 * free()) when no longer needed.  <code>null</code> is returned if the given
 * argument is <code>null.</code>
 */
 public";


%typemap(javaimports) ASTNode "
/** 
 * Abstract Syntax Tree (AST) representation of a
 * mathematical expression.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * Abstract Syntax Trees (ASTs) are a simple kind of data structure used in
 * libSBML for storing mathematical expressions.  The {@link ASTNode} is the
 * cornerstone of libSBML\'s AST representation.  An AST \'node\' represents the
 * most basic, indivisible part of a mathematical formula and come in many
 * types.  For instance, there are node types to represent numbers (with
 * subtypes to distinguish integer, real, and rational numbers), names
 * (e.g., constants or variables), simple mathematical operators, logical
 * or relational operators and functions. LibSBML ASTs provide a canonical,
 * in-memory representation for all mathematical formulas regardless of
 * their original format (which might be MathML or might be text strings).
 * <p>
 * An AST <em>node</em> in libSBML is a recursive structure containing a pointer
 * to the node\'s value (which might be, for example, a number or a symbol)
 * and a list of children nodes.  Each {@link ASTNode} node may have none, one,
 * two, or more children depending on its type.  The following diagram
 * illustrates an example of how the mathematical expression <code>\'1 +
 * 2\'</code> is represented as an AST with one <em>plus</em> node having two 
 * <em>integer</em> children nodes for the numbers <code>1</code> and
 * <code>2</code>.  The figure also shows the corresponding MathML
 * representation:
 * <p>
 * <center style=\'padding-bottom: 0.5em\'>
<table border=\'0\' class=\'text-table width80 normal-font\'>
<caption class=\'top-caption\'>Example AST representation of a mathematical expression.</caption>
<tr>
<th>Infix</th>
<th>AST</th>
<th>MathML</th>
</tr>
<tr>
<td valign=\'middle\'>
<code>1 + 2</code>
</td>
<td valign=\'middle\'>
<iframe src=\'simple-ast.svg\' width=\'140\' height=\'120\' scrolling=\'no\' frameborder=\'0\'></iframe>
</td>
<td valign=\'middle\'>
<code>&lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'&gt;</code><br>
<code>&nbsp;&nbsp;&lt;apply&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;plus/&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cn type=\'integer\'&gt; 1 &lt;/cn&gt;</code><br>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&lt;cn type=\'integer\'&gt; 2 &lt;/cn&gt;</code><br>
<code>&nbsp;&nbsp;&lt;/apply&gt;</code><br>
<code>&lt;/math&gt;</code>
</td>
</tr>
</table>
</center>

 * <p>
 * The following are other noteworthy points about the AST representation
 * in libSBML:
 * <ul>
 * <li> A numerical value represented in MathML as a real number with an
 * exponent is preserved as such in the AST node representation, even if
 * the number could be stored in a <code>double</code> data type.  This is done
 * so that when an SBML model is read in and then written out again, the
 * amount of change introduced by libSBML to the SBML during the round-trip
 * activity is minimized.
 * <p>
 * <li> Rational numbers are represented in an AST node using separate
 * numerator and denominator values.  These can be retrieved using the
 * methods {@link ASTNode#getNumerator()} and {@link ASTNode#getDenominator()}.
 * <p>
 * <li> The children of an {@link ASTNode} are other {@link ASTNode} objects.  The list of
 * children is empty for nodes that are leaf elements, such as numbers.
 * For nodes that are actually roots of expression subtrees, the list of
 * children points to the parsed objects that make up the rest of the
 * expression.
 * </ul>
 * <p>
 * <p>
 * <h3><a class=\'anchor\'
 * name=\'ASTNodeType_t\'>The set of possible ASTNode types</a></h3> 
 * <p>
 * Every {@link ASTNode} has an associated
 * type code to indicate, for example, whether it holds a number or stands for
 * an arithmetic operator.  The type is recorded as a value drawn from a
 * set of static integer constants defined in the class {@link
 * libsbmlConstants}.  Their names begin with the characters <code>AST_.</code>  The
 * list of possible types is quite long, because it covers all the
 * mathematical functions that are permitted in SBML.  The values are shown
 * in the following table: 
 * <p>
 * <div style=\'margin-left: 2em\'>
<ul style=\'list-style-type: none\'>
<li>AST_CONSTANT_E</li>
<li>AST_CONSTANT_FALSE</li>
<li>AST_CONSTANT_PI</li>
<li>AST_CONSTANT_TRUE</li>
<li>AST_DIVIDE</li>
<li>AST_FUNCTION</li>
<li>AST_FUNCTION_ABS</li>
<li>AST_FUNCTION_ARCCOS</li>
<li>AST_FUNCTION_ARCCOSH</li>
<li>AST_FUNCTION_ARCCOT</li>
<li>AST_FUNCTION_ARCCOTH</li>
<li>AST_FUNCTION_ARCCSC</li>
<li>AST_FUNCTION_ARCCSCH</li>
<li>AST_FUNCTION_ARCSEC</li>
<li>AST_FUNCTION_ARCSECH</li>
<li>AST_FUNCTION_ARCSIN</li>
<li>AST_FUNCTION_ARCSINH</li>
<li>AST_FUNCTION_ARCTAN</li>
<li>AST_FUNCTION_ARCTANH</li>
<li>AST_FUNCTION_CEILING</li>
<li>AST_FUNCTION_COS</li>
<li>AST_FUNCTION_COSH</li>
</ul>
</div>
<div style=\'margin-left: 18em; margin-top: -30.4em\'>
<ul style=\'list-style-type: none\'>
<li>AST_FUNCTION_COT</li>
<li>AST_FUNCTION_COTH</li>
<li>AST_FUNCTION_CSC</li>
<li>AST_FUNCTION_CSCH</li>
<li>AST_FUNCTION_DELAY</li>
<li>AST_FUNCTION_EXP</li>
<li>AST_FUNCTION_FACTORIAL</li>
<li>AST_FUNCTION_FLOOR</li>
<li>AST_FUNCTION_LN</li>
<li>AST_FUNCTION_LOG</li>
<li>AST_FUNCTION_PIECEWISE</li>
<li>AST_FUNCTION_POWER</li>
<li>AST_FUNCTION_ROOT</li>
<li>AST_FUNCTION_SEC</li>
<li>AST_FUNCTION_SECH</li>
<li>AST_FUNCTION_SIN</li>
<li>AST_FUNCTION_SINH</li>
<li>AST_FUNCTION_TAN</li>
<li>AST_FUNCTION_TANH</li>
<li>AST_INTEGER</li>
<li>AST_LAMBDA</li>
<li>AST_LOGICAL_AND</li>
</ul>
</div>
<div style=\'margin-left: 34em; margin-top: -30.4em\'>
<ul style=\'list-style-type: none\'>
<li>AST_LOGICAL_NOT</li>
<li>AST_LOGICAL_OR</li>
<li>AST_LOGICAL_XOR</li>
<li>AST_MINUS</li>
<li>AST_NAME</li>
<li><nobr>AST_NAME_AVOGADRO <em><span class=\'warning\'>(Level&nbsp;3 only)</span></em></nobr></li>
<li>AST_NAME_TIME</li>
<li>AST_PLUS</li>
<li>AST_POWER</li>
<li>AST_RATIONAL</li>
<li>AST_REAL</li>
<li>AST_REAL_E</li>
<li>AST_RELATIONAL_EQ</li>
<li>AST_RELATIONAL_GEQ</li>
<li>AST_RELATIONAL_GT</li>
<li>AST_RELATIONAL_LEQ</li>
<li>AST_RELATIONAL_LT</li>
<li>AST_RELATIONAL_NEQ</li>
<li>AST_TIMES</li>
<li>AST_UNKNOWN</li>
</ul>
</div>
<br style=\'clear: both\'>

 * <p>
 * The types have the following meanings:
 * <ul>
 * <li> If the node is basic mathematical operator (e.g., <code>\'+\'</code>), then the
 * node\'s type will be <code>AST_PLUS</code>, <code>AST_MINUS</code>, <code>AST_TIMES</code>, <code>AST_DIVIDE</code>,
 * or <code>AST_POWER</code>, as appropriate.
 * <p>
 * <li> If the node is a predefined function or operator from SBML Level&nbsp;1
 * (in the string-based formula syntax used in Level&nbsp;1) or SBML Levels&nbsp;2 and&nbsp;3
 * (in the subset of MathML used in SBML Levels&nbsp;2 and&nbsp;3), then the node\'s type
 * will be either <code>AST_FUNCTION_</code><em><span
 * class=\'placeholder\'>X</span></em>, <code>AST_LOGICAL_</code><em><span
 * class=\'placeholder\'>X</span></em>, or
 * <code>AST_RELATIONAL_</code><em><span class=\'placeholder\'>X</span></em>,
 * as appropriate.  (Examples: <code>AST_FUNCTION_LOG</code>, <code>AST_RELATIONAL_LEQ.</code>)
 * <p>
 * <li> If the node refers to a user-defined function, the node\'s type will
 * be <code>AST_NAME</code> (because it holds the name of the function).
 * <p>
 * <li> If the node is a lambda expression, its type will be <code>AST_LAMBDA.</code>
 * <p>
 * <li> If the node is a predefined constant (<code>\'ExponentialE\'</code>, <code>\'Pi\'</code>, 
 * <code>\'True\'</code> or <code>\'False\'</code>), then the node\'s type will be <code>AST_CONSTANT_E</code>,
 * <code>AST_CONSTANT_PI</code>, <code>AST_CONSTANT_TRUE</code>, or <code>AST_CONSTANT_FALSE.</code>
 * <p>
 * <li> (Levels&nbsp;2 and&nbsp;3 only) If the node is the special MathML csymbol <code>time</code>,
 * the value of the node will be <code>AST_NAME_TIME.</code>  (Note, however, that the
 * MathML csymbol <code>delay</code> is translated into a node of type
 * <code>AST_FUNCTION_DELAY.</code>  The difference is due to the fact that <code>time</code> is a
 * single variable, whereas <code>delay</code> is actually a function taking
 * arguments.)
 * <p>
 * <li> (Level&nbsp;3 only) If the node is the special MathML csymbol <code>avogadro</code>,
 * the value of the node will be <code>AST_NAME_AVOGADRO.</code>
 * <p>
 * <li> If the node contains a numerical value, its type will be
 * <code>AST_INTEGER</code>, <code>AST_REAL</code>, <code>AST_REAL_E</code>, or <code>AST_RATIONAL</code>,
 * as appropriate.
 * </ul>
 * <p>
 * <p>
 * <h3><a class=\'anchor\' name=\'math-convert\'>Converting between ASTs and text strings</a></h3>
 * <p>
 * The text-string form of mathematical formulas produced by <code><a href=\'{@link libsbml}.html#formulaToString(org.sbml.{@link libsbml}.ASTNode)\'>{@link libsbml}.formulaToString()</a></code> and
 * read by <code><a href=\'{@link libsbml}.html#parseFormula(java.lang.String)\'>{@link libsbml}.parseFormula()</a></code>
 * are simple C-inspired infix notation taken from SBML Level&nbsp;1.  A
 * formula in this text-string form can be handed to a program that
 * understands SBML Level&nbsp;1 mathematical expressions, or used as part
 * of a translation system.  The libSBML distribution comes with an example
 * program in the <code>\'examples\'</code> subdirectory called <code>translateMath</code> that
 * implements an interactive command-line demonstration of translating
 * infix formulas into MathML and vice-versa.
 * <p>
 * The formula strings may contain operators, function calls, symbols, and
 * white space characters.  The allowable white space characters are tab
 * and space.  The following are illustrative examples of formulas
 * expressed in the syntax:
 * <p>
 * <div class=\'fragment\'><pre>
0.10 * k4^2
</pre></div>
 * <div class=\'fragment\'><pre>
(vm * s1)/(km + s1)
</pre></div>
 * <p>
 * The following table shows the precedence rules in this syntax.  In the
 * Class column, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the Precedence column show how the order
 * of different types of operation are determined.  For example, the
 * expression <em>a * b + c</em> is evaluated as <em>(a * b) + c</em>
 * because the <code>*</code> operator has higher precedence.  The
 * Associates column shows how the order of similar precedence operations
 * is determined; for example, <em>a - b + c</em> is evaluated as <em>(a -
 * b) + c</em> because the <code>+</code> and <code>-</code> operators are
 * left-associative.  The precedence and associativity rules are taken from
 * the C programming language, except for the symbol <code>^</code>, which
 * is used in C for a different purpose.  (Exponentiation can be invoked
 * using either <code>^</code> or the function <code>power.</code>)
 * <p>
 * <center style=\'padding-bottom: 0.5em\'>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr style=\'background: lightgray; font-size: 14px;\'>
     <th align=\'left\'>Token</th>
     <th align=\'left\'>Operation</th>
     <th align=\'left\'>Class</th>
     <th>Precedence</th>
     <th align=\'left\'>Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\'center\'>6</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\'center\'>6</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\'center\'>6</td><td>left</td></tr>
<tr><td><code>-</code></td><td>negation</td><td>unary</td><td align=\'center\'>5</td><td>right</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\'center\'>4</td><td>left</td></tr>
<tr><td><code>*</code></td><td>multiplication</td><td>binary</td><td align=\'center\'>3</td><td>left</td></tr>
<tr><td><code>/</code></td><td>divison</td><td>binary</td><td align=\'center\'>3</td><td>left</td></tr>
<tr><td><code>+</code></td><td>addition</td><td>binary</td><td align=\'center\'>2</td><td>left</td></tr>
<tr><td><code>-</code></td><td>subtraction</td><td>binary</td><td align=\'center\'>2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\'center\'>1</td><td>left</td></tr>
<caption class=\'top-caption\'>A table of the expression operators and their precedence in the
text-string format for mathematical expressions used by SBML_parseFormula().
</caption>
</table>
</center>

 * <p>
 * A program parsing a formula in an SBML model should assume that names
 * appearing in the formula are the identifiers of {@link Species}, {@link Parameter},
 * {@link Compartment}, {@link FunctionDefinition}, {@link Reaction} (in SBML Levels&nbsp;2
 * and&nbsp;3), or {@link SpeciesReference} (in SBML Level&nbsp;3 only) objects
 * defined in a model.  When a function call is involved, the syntax
 * consists of a function identifier, followed by optional white space,
 * followed by an opening parenthesis, followed by a sequence of zero or
 * more arguments separated by commas (with each comma optionally preceded
 * and/or followed by zero or more white space characters), followed by a
 * closing parenthesis.  There is an almost one-to-one mapping between the
 * list of predefined functions available, and those defined in MathML.
 * All of the MathML functions are recognized; this set is larger than the
 * functions defined in SBML Level&nbsp;1.  In the subset of functions that
 * overlap between MathML and SBML Level&nbsp;1, there exist a few
 * differences.  The following table summarizes the differences between the
 * predefined functions in SBML Level&nbsp;1 and the MathML equivalents in
 * SBML Levels&nbsp;2 and &nbsp;3:
 * <p>
 * <center>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr style=\'background: lightgray; font-size: 14px;\'>
     <th align=\'left\'>Text string formula functions</th>
     <th align=\'left\'>MathML equivalents in SBML Levels&nbsp;2 and&nbsp;3</th>
 </tr>
 <tr><td><code>acos</code></td><td><code>arccos</code></td></tr>
 <tr><td><code>asin</code></td><td><code>arcsin</code></td></tr>
 <tr><td><code>atan</code></td><td><code>arctan</code></td></tr>
 <tr><td><code>ceil</code></td><td><code>ceiling</code></td></tr>
 <tr><td><code>log</code></td><td><code>ln</code></td></tr>
 <tr><td><code>log10(x)</code></td><td><code>log(10, x)</code></td></tr>
 <tr><td><code>pow(x, y)</code></td><td><code>power(x, y)</code></td></tr>
 <tr><td><code>sqr(x)</code></td><td><code>power(x, 2)</code></td></tr>
 <tr><td><code>sqrt(x)</code></td><td><code>root(2, x)</code></td></tr>
<caption class=\'top-caption\'>Table comparing the names of certain
functions in the SBML text-string formula syntax and MathML.  The left
column shows the names of functions recognized by SBML_parseFormula(); the
right column shows their equivalent function names in MathML&nbsp;2.0, used
in SBML Levels&nbsp;2 and&nbsp;3.</caption>
</table>
</center>

 * <p>
 * @warning We urge developers to keep in mind that the text-string formula syntax is
specific to SBML Level&nbsp;1\'s C-like mathematical formula syntax.  In
particular, it is <em>not a general-purpose mathematical expression
syntax</em>.  LibSBML provides methods for parsing and transforming
text-string math formulas back and forth from AST structures, but it is
important to keep the system\'s limitations in mind.

 */
"

%javamethodmodifiers ASTNode::ASTNode(ASTNodeType_t type = AST_UNKNOWN) "
  /**
   * Creates and returns a new {@link ASTNode}.
   * <p>
   * Unless the argument <code>type</code> is given, the returned node will by
   * default have a type of {@link  libsbmlConstants#AST_UNKNOWN
   * AST_UNKNOWN}.  If the type isn\'t supplied when caling this
   * constructor, the caller should set the node type to something else as
   * soon as possible using
   * {@link ASTNode#setType(int)}.
   * <p>
   * @param type an optional
   * type
   * code indicating the type of node to create.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers ASTNode::ASTNode(Token_t *token) "
  /**
   * Creates a new {@link ASTNode} from the given Token.  The resulting {@link ASTNode}
   * will contain the same data as the Token.
   * <p>
   * @param token the Token to add.
   */
 public";


%javamethodmodifiers ASTNode::ASTNode(const ASTNode& orig) "
  /**
   * Copy constructor; creates a deep copy of the given {@link ASTNode}.
   * <p>
   * @param orig the {@link ASTNode} to be copied.
   */
 public";


%javamethodmodifiers ASTNode::freeName "
  /**
   * Frees the name of this {@link ASTNode} and sets it to <code>null.</code>
   * <p>
   * This operation is only applicable to {@link ASTNode} objects corresponding to
   * operators, numbers, or {@link  libsbmlConstants#AST_UNKNOWN
   * AST_UNKNOWN}.  This method has no effect on other types of
   * nodes.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%javamethodmodifiers ASTNode::canonicalize "
  /**
   * Converts this {@link ASTNode} to a canonical form and returns <code>true</code> if
   * successful, <code>false</code> otherwise.
   * <p>
   * The rules determining the canonical form conversion are as follows:
   * <ul>
   * <p>
   * <li> If the node type is {@link  libsbmlConstants#AST_NAME AST_NAME}
   * and the node name matches <code>\'ExponentialE\'</code>, <code>\'Pi\'</code>, <code>\'True\'</code> or 
   * <code>\'False\'</code> the node type is converted to the corresponding 
   * <code>AST_CONSTANT_</code><em><span class=\'placeholder\'>X</span></em> type.
   * <p>
   * <li> If the node type is an {@link  libsbmlConstants#AST_FUNCTION
   * AST_FUNCTION} and the node name matches an SBML (MathML) function name, logical operator name, or
   * relational operator name, the node is converted to the corresponding
   * <code>AST_FUNCTION_</code><em><span class=\'placeholder\'>X</span></em> or
   * <code>AST_LOGICAL_</code><em><span class=\'placeholder\'>X</span></em> type.
   * <p>
   * </ul>
   * <p>
   * SBML Level&nbsp;1 function names are searched first; thus, for
   * example, canonicalizing <code>log</code> will result in a node type of {@link 
   * libsbmlConstants#AST_FUNCTION_LN AST_FUNCTION_LN}.  (See the SBML
   * Level&nbsp;1 Version&nbsp;2 Specification, Appendix C.)
   * <p>
   * Sometimes, canonicalization of a node results in a structural
   * conversion of the node as a result of adding a child.  For example, a
   * node with the SBML Level&nbsp;1 function name <code>sqr</code> and a single
   * child node (the argument) will be transformed to a node of type
   * {@link  libsbmlConstants#AST_FUNCTION_POWER AST_FUNCTION_POWER} with
   * two children.  The first child will remain unchanged, but the second
   * child will be an {@link ASTNode} of type {@link  libsbmlConstants#AST_INTEGER
   * AST_INTEGER} and a value of 2.  The function names that result
   * in structural changes are: <code>log10</code>, <code>sqr</code>, and <code>sqrt.</code>
   */
 public";


%javamethodmodifiers ASTNode::addChild(ASTNode* child) "
  /**
   * Adds the given node as a child of this {@link ASTNode}.  Child nodes are added
   * in-order, from left to right.
   * <p>
   * @param child the {@link ASTNode} instance to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note Adding a child to an {@link ASTNode} may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.  Callers need to be careful to use
   * this method in the context of other operations to create complete and
   * correct formulas.  The method
   * {@link ASTNode#isWellFormedASTNode()}
   * may also be useful for checking the results of node modifications.
   * <p>
   * @see #prependChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   * @see #removeChild(long n)
   * @see #isWellFormedASTNode()
   */
 public";


%javamethodmodifiers ASTNode::prependChild(ASTNode* child) "
  /**
   * Adds the given node as a child of this {@link ASTNode}.  This method adds
   * child nodes from right to left.
   * <p>
   * @param child the {@link ASTNode} instance to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note Prepending a child to an {@link ASTNode} may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   * <p>
   * @see #addChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   * @see #removeChild(long n)
   */
 public";


%javamethodmodifiers ASTNode::removeChild(unsigned int n) "
  /**
   * Removes the nth child of this {@link ASTNode} object.
   * <p>
   * @param n long the index of the child to remove
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   * <p>
   * @note Removing a child from an {@link ASTNode} may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   * <p>
   * @see #addChild(ASTNode child)
   * @see #prependChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   */
 public";


%javamethodmodifiers ASTNode::replaceChild(unsigned int n, ASTNode *newChild) "
  /**
   * Replaces the nth child of this {@link ASTNode} with the given {@link ASTNode}.
   * <p>
   * @param n long the index of the child to replace
   * @param newChild {@link ASTNode} to replace the nth child
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note Replacing a child from an {@link ASTNode} may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   * <p>
   * @see #addChild(ASTNode child)
   * @see #prependChild(ASTNode child)
   * @see #insertChild(long n, ASTNode child)
   * @see #removeChild(long n)
   */
 public";


%javamethodmodifiers ASTNode::insertChild(unsigned int n, ASTNode *newChild) "
  /**
   * Insert the given {@link ASTNode} at point n in the list of children
   * of this {@link ASTNode}.
   * <p>
   * @param n long the index of the {@link ASTNode} being added
   * @param newChild {@link ASTNode} to insert as the nth child
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note Inserting a child into an {@link ASTNode} may change the structure of the
   * mathematical formula being represented by the tree structure, and may
   * render the representation invalid.
   * <p>
   * @see #addChild(ASTNode child)
   * @see #prependChild(ASTNode child)
   * @see #replaceChild(long n, ASTNode child)
   * @see #removeChild(long n)
   */
 public";


%javamethodmodifiers ASTNode::deepCopy() const "
  /**
   * Creates a recursive copy of this node and all its children.
   * <p>
   * @return a copy of this {@link ASTNode} and all its children.  The caller owns
   * the returned {@link ASTNode} and is reponsible for deleting it.
   */
 public";


%javamethodmodifiers ASTNode::getChild "
  /**
   * Get a child of this node according to its index number.
   * <p>
   * @param n the index of the child to get
   * <p>
   * @return the nth child of this {@link ASTNode} or <code>null</code> if this node has no nth
   * child (<code>n &gt; </code>
   * {@link ASTNode#getNumChildren()}
   * <code>- 1</code>).
   */
 public";


%javamethodmodifiers ASTNode::getLeftChild() const "
  /**
   * Get the left child of this node.
   * <p>
   * @return the left child of this {@link ASTNode}.  This is equivalent to calling
   * {@link ASTNode#getChild(long)}
   * with an argument of <code>0.</code>
   */
 public";


%javamethodmodifiers ASTNode::getRightChild() const "
  /**
   * Get the right child of this node.
   * <p>
   * @return the right child of this {@link ASTNode}, or <code>null</code> if this node has no
   * right child.  If
   * {@link ASTNode#getNumChildren()}
   * <code>&gt; 1</code>, then this is equivalent to:
   * <div class=\'fragment\'><pre>
   * getChild( getNumChildren() - 1 );</pre></div>
   */
 public";


%javamethodmodifiers ASTNode::getNumChildren() const "
  /**
   * Get the number of children that this node has.
   * <p>
   * @return the number of children of this {@link ASTNode}, or 0 is this node has
   * no children.
   */
 public";


%javamethodmodifiers ASTNode::addSemanticsAnnotation(XMLNode* sAnnotation) "
  /**
   * Adds the given {@link XMLNode} as a <em>semantic annotation</em> of this {@link ASTNode}.
   * <p>
   * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
that can be used to associate additional information with a MathML
construct.  The construct can be used to decorate a MathML expressions with
a sequence of one or more <code>&lt;annotation&gt;</code> or
<code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
pair of items; the first is a symbol that acts as an attribute or key, and
the second is the value associated with the attribute or key.  Please refer
to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
5.2, Semantic Annotations</a> for more information about these constructs.

   * <p>
   * @param sAnnotation the annotation to add.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @note Although SBML permits the semantic annotation construct in
   * MathML expressions, the truth is that this construct has so far (at
   * this time of this writing, which is early 2011) seen very little use
   * in SBML software.  The full implications of using semantic annotations
   * are still poorly understood.  If you wish to use this construct, we
   * urge you to discuss possible uses and applications on the SBML
   * discussion lists, particularly <a target=\'_blank\'
   * href=\'http://sbml.org/Forums\'>sbml-discuss&#64;caltech.edu</a> and/or <a
   * target=\'_blank\'
   * href=\'http://sbml.org/Forums\'>sbml-interoperability&#64;caltech.edu</a>.
   */
 public";


%javamethodmodifiers ASTNode::getNumSemanticsAnnotations() const "
  /**
   * Get the number of <em>semantic annotation</em> elements inside this node.
   * <p>
   * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
that can be used to associate additional information with a MathML
construct.  The construct can be used to decorate a MathML expressions with
a sequence of one or more <code>&lt;annotation&gt;</code> or
<code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
pair of items; the first is a symbol that acts as an attribute or key, and
the second is the value associated with the attribute or key.  Please refer
to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
5.2, Semantic Annotations</a> for more information about these constructs.

   * <p>
   * @return the number of annotations of this {@link ASTNode}.
   * <p>
   * @see ASTNode#addSemanticsAnnotation(XMLNode sAnnotation)
   */
 public";


%javamethodmodifiers ASTNode::getSemanticsAnnotation "
  /**
   * Get the nth semantic annotation of this node.
   * <p>
   * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
that can be used to associate additional information with a MathML
construct.  The construct can be used to decorate a MathML expressions with
a sequence of one or more <code>&lt;annotation&gt;</code> or
<code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
pair of items; the first is a symbol that acts as an attribute or key, and
the second is the value associated with the attribute or key.  Please refer
to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
5.2, Semantic Annotations</a> for more information about these constructs.

   * <p>
   * @return the nth annotation of this {@link ASTNode}, or <code>null</code> if this node has
   * no nth annotation (<code>n &gt;</code>
   * {@link ASTNode#getNumChildren()}
   * <code>- 1</code>).
   * <p>
   * @see ASTNode#addSemanticsAnnotation(XMLNode sAnnotation)
   */
 public";


%javamethodmodifiers ASTNode::getListOfNodes(ASTNodePredicate predicate) const "
  /**
   * Performs a depth-first search of the tree rooted at this {@link ASTNode}
   * object, and returns a {@link List} of nodes where the given function
   * <code>predicate(node)</code> returns <code>true</code> (non-zero).
   * <p>
   * For portability between different programming languages, the predicate
   * is passed in as a pointer to a function.  The function definition must
   * have the type @link {@link ASTNode}.h.ASTNodePredicate ASTNodePredicate
   * @endlink, which is defined as
   * <div class=\'fragment\'><pre>
   * int (*ASTNodePredicate) (const ASTNode_t *node);</pre></div>
   * where a return value of non-zero represents <code>true</code> and zero
   * represents <code>false.</code>
   * <p>
   * @param predicate the predicate to use
   * <p>
   * @return the list of nodes for which the predicate returned <code>true</code>
   * (non-zero).  The {@link List} returned is owned by the caller and should be
   * deleted after the caller is done using it.  The {@link ASTNode} objects in the
   * list; however, are not owned by the caller (as they still belong to
   * the tree itself), and therefore should not be deleted.
   */
 public";


%javamethodmodifiers ASTNode::fillListOfNodes(ASTNodePredicate predicate, List* lst) const "
  /**
   * Performs a depth-first search of the tree rooted at this {@link ASTNode}
   * object, and adds to the list <code>lst</code> the nodes where the given function
   * <code>predicate(node)</code> returns <code>true</code> (non-zero).
   * <p>
   * This method is identical to getListOfNodes(ASTNodePredicate predicate) const, 
   * except that instead of creating a new {@link List} object, it uses the one passed
   * in as argument <code>lst</code>. 
   * <p>
   * For portability between different programming languages, the predicate
   * is passed in as a pointer to a function.  The function definition must
   * have the type @link {@link ASTNode}.h.ASTNodePredicate ASTNodePredicate
   * @endlink, which is defined as
   * <div class=\'fragment\'><pre>
   * int (*ASTNodePredicate) (const ASTNode_t *node);</pre></div>
   * where a return value of non-zero represents <code>true</code> and zero
   * represents <code>false.</code>
   * <p>
   * @param predicate the predicate to use.
   * <p>
   * @param lst the {@link List} to which {@link ASTNode} objects should be added.
   * <p>
   * @see #getListOfNodes(ASTNodePredicate predicate) const
   */
 public";


%javamethodmodifiers ASTNode::getCharacter() const "
  /**
   * Get the value of this node as a single character.  This function
   * should be called only when
   * {@link ASTNode#getType()} returns
   * {@link  libsbmlConstants#AST_PLUS AST_PLUS},
   * {@link  libsbmlConstants#AST_MINUS AST_MINUS},
   * {@link  libsbmlConstants#AST_TIMES AST_TIMES},
   * {@link  libsbmlConstants#AST_DIVIDE AST_DIVIDE} or
   * {@link  libsbmlConstants#AST_POWER AST_POWER}.
   * <p>
   * @return the value of this {@link ASTNode} as a single character
   */
 public";


%javamethodmodifiers ASTNode::getId() const "
  /**
   * Get the id of this {@link ASTNode}.  
   * <p>
   * @return the mathml id of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::getClass() const "
  /**
   * Get the class of this {@link ASTNode}.  
   * <p>
   * @return the mathml class of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::getStyle() const "
  /**
   * Get the style of this {@link ASTNode}.  
   * <p>
   * @return the mathml style of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::getInteger() const "
  /**
   * Get the value of this node as an integer. This function should be
   * called only when
   * {@link ASTNode#getType()}
   * <code>== {@link  libsbmlConstants#AST_INTEGER AST_INTEGER}</code>.
   * <p>
   * @return the value of this {@link ASTNode} as a (<code>long</code>) integer. 
   */
 public";


%javamethodmodifiers ASTNode::getName() const "
  /**
   * Get the value of this node as a string.  This function may be called
   * on nodes that (1) are not operators, i.e., nodes for which
   * {@link ASTNode#isOperator()}
   * returns <code>false</code>, and (2) are not numbers, i.e.,
   * {@link ASTNode#isNumber()} returns <code>false.</code>
   * <p>
   * @return the value of this {@link ASTNode} as a string.
   */
 public";


%javamethodmodifiers ASTNode::getNumerator() const "
  /**
   * Get the value of the numerator of this node.  This function should be
   * called only when
   * {@link ASTNode#getType()}
   * <code>== {@link  libsbmlConstants#AST_RATIONAL AST_RATIONAL}</code>.
   * <p>
   * @return the value of the numerator of this {@link ASTNode}.  
   */
 public";


%javamethodmodifiers ASTNode::getDenominator() const "
  /**
   * Get the value of the denominator of this node.  This function should
   * be called only when
   * {@link ASTNode#getType()}
   * <code>== {@link  libsbmlConstants#AST_RATIONAL AST_RATIONAL}</code>.
   * <p>
   * @return the value of the denominator of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::getReal() const "
  /**
   * Get the real-numbered value of this node.  This function
   * should be called only when
   * {@link ASTNode#isReal()}
   * <code>== true</code>.
   * <p>
   * This function performs the necessary arithmetic if the node type is
   * {@link  libsbmlConstants#AST_REAL_E AST_REAL_E} (<em>mantissa *
   * 10<sup> exponent</sup></em>) or {@link  libsbmlConstants#AST_RATIONAL
   * AST_RATIONAL} (<em>numerator / denominator</em>).
   * <p>
   * @return the value of this {@link ASTNode} as a real (double).
   */
 public";


%javamethodmodifiers ASTNode::getMantissa() const "
  /**
   * Get the mantissa value of this node.  This function should be called
   * only when {@link ASTNode#getType()}
   * returns {@link  libsbmlConstants#AST_REAL_E AST_REAL_E}
   * or {@link  libsbmlConstants#AST_REAL AST_REAL}.
   * If {@link ASTNode#getType()}
   * returns {@link  libsbmlConstants#AST_REAL AST_REAL},
   * this method is identical to
   * {@link ASTNode#getReal()}.
   * <p>
   * @return the value of the mantissa of this {@link ASTNode}. 
   */
 public";


%javamethodmodifiers ASTNode::getExponent() const "
  /**
   * Get the exponent value of this {@link ASTNode}.  This function should be
   * called only when
   * {@link ASTNode#getType()}
   * returns {@link  libsbmlConstants#AST_REAL_E AST_REAL_E}
   * or {@link  libsbmlConstants#AST_REAL AST_REAL}.
   * <p>
   * @return the value of the exponent of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::getPrecedence() const "
  /**
   * Get the precedence of this node in the infix math syntax of SBML
   * Level&nbsp;1.  For more information about the infix syntax, see the
   * discussion about <a href=\'#math-convert\'>text string formulas</a> at
   * the top of the documentation for {@link ASTNode}.
   * <p>
   * @return an integer indicating the precedence of this {@link ASTNode}
   */
 public";


%javamethodmodifiers ASTNode::getType() const "
  /**
   * Get the type of this {@link ASTNode}.  The value returned is one of the
   * enumeration values such as {@link  libsbmlConstants#AST_LAMBDA
   * AST_LAMBDA}, {@link  libsbmlConstants#AST_PLUS AST_PLUS},
   * etc.
   * <p>
   * @return the type of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::getUnits() const "
  /**
   * Get the units of this {@link ASTNode}.  
   * <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing {@link Model}.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<div class=\'fragment\'><pre class=\'fragment\'>&lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'
      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'&gt;
        &lt;cn type=\'integer\' sbml:units=\'second\'&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</div>


   * <p>
   * @return the units of this {@link ASTNode}.
   * <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   * <p>
   */
 public";


%javamethodmodifiers ASTNode::isBoolean() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node has a boolean type
   * (a logical operator, a relational operator, or the constants <code>true</code>
   * or <code>false</code>).
   * <p>
   * @return true if this {@link ASTNode} is a boolean, false otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isConstant() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents a MathML
   * constant (e.g., <code>true</code>, <code>Pi</code>).
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML constant, <code>false</code> otherwise.
   * <p>
   * @note this function will also return <code>true</code> for {@link 
   * libsbmlConstants#AST_NAME_AVOGADRO AST_NAME_AVOGADRO} in SBML Level&nbsp;3.
   */
 public";


%javamethodmodifiers ASTNode::isFunction() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents a
   * MathML function (e.g., <code>abs()</code>), or an SBML Level&nbsp;1
   * function, or a user-defined function.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a function, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isInfinity() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents
   * the special IEEE 754 value infinity, <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is the special IEEE 754 value infinity,
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isInteger() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node contains an
   * integer value, <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link 
   * libsbmlConstants#AST_INTEGER AST_INTEGER}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isLambda() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is a MathML
   * <code>&lt;lambda&gt;</code>, <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link  libsbmlConstants#AST_LAMBDA
   * AST_LAMBDA}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isLog10() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents a 
   * <code>log10</code> function, <code>false</code> (zero) otherwise.  More precisely, this
   * predicate returns <code>true</code> if the node type is {@link 
   * libsbmlConstants#AST_FUNCTION_LOG AST_FUNCTION_LOG} with two
   * children, the first of which is an {@link  libsbmlConstants#AST_INTEGER
   * AST_INTEGER} equal to 10.
   * <p>
   * @return <code>true</code> if the given {@link ASTNode} represents a log10() function, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isLogical() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is a MathML
   * logical operator (i.e., <code>and</code>, <code>or</code>, <code>not</code>, <code>xor</code>).
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML logical operator
   */
 public";


%javamethodmodifiers ASTNode::isName() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is a user-defined
   * variable name in SBML L1, L2 (MathML), or the special symbols <code>delay</code>
   * or <code>time.</code>  The predicate returns <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a user-defined variable name in SBML
   * L1, L2 (MathML) or the special symbols delay or time.
   */
 public";


%javamethodmodifiers ASTNode::isNaN() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents the
   * special IEEE 754 value \'not a number\' (NaN), <code>false</code> (zero)
   * otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is the special IEEE 754 NaN.
   */
 public";


%javamethodmodifiers ASTNode::isNegInfinity() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents the
   * special IEEE 754 value \'negative infinity\', <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is the special IEEE 754 value negative
   * infinity, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isNumber() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node contains a number,
   * <code>false</code> (zero) otherwise.  This is functionally equivalent to the
   * following code:
   * <div class=\'fragment\'><pre>
   *   isInteger() || isReal()</pre></div>
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a number, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isOperator() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is a mathematical
   * operator, meaning, <code>+</code>, <code>-</code>, <code>*</code>, 
   * <code>/</code> or <code>^</code> (power).
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is an operator.
   */
 public";


%javamethodmodifiers ASTNode::isPiecewise() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is the MathML
   * <code>&lt;piecewise&gt;</code> construct, <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML <code>piecewise</code> function
   */
 public";


%javamethodmodifiers ASTNode::isRational() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents a rational
   * number, <code>false</code> (zero) otherwise.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link 
   * libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   */
 public";


%javamethodmodifiers ASTNode::isReal() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node can represent a
   * real number, <code>false</code> (zero) otherwise.  More precisely, this node
   * must be of one of the following types: {@link  libsbmlConstants#AST_REAL
   * AST_REAL}, {@link  libsbmlConstants#AST_REAL_E AST_REAL_E} or
   * {@link  libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   * <p>
   * @return <code>true</code> if the value of this {@link ASTNode} can represented as a real
   * number, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isRelational() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is a MathML
   * relational operator, meaning <code>==</code>, <code>&gt;=</code>, 
   * <code>&gt;</code>, <code>&lt;</code>, and <code>!=</code>.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a MathML relational operator, 
   * <code>false</code> otherwise
   */
 public";


%javamethodmodifiers ASTNode::isSqrt() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node represents a
   * square root function, <code>false</code> (zero) otherwise.  More precisely, the
   * node type must be {@link  libsbmlConstants#AST_FUNCTION_ROOT
   * AST_FUNCTION_ROOT} with two children, the first of which is an
   * {@link  libsbmlConstants#AST_INTEGER AST_INTEGER} node having value
   * equal to 2.
   * <p>
   * @return <code>true</code> if the given {@link ASTNode} represents a sqrt() function,
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isUMinus() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node is a unary minus
   * operator, <code>false</code> (zero) otherwise.  A node is defined as a unary
   * minus node if it is of type {@link  libsbmlConstants#AST_MINUS
   * AST_MINUS} and has exactly one child.
   * <p>
   * For numbers, unary minus nodes can be \'collapsed\' by negating the
   * number.  In fact, 
   * <code><a href=\'{@link libsbml}.html#parseFormula(java.lang.String)\'>{@link libsbml}.parseFormula()</a></code> does this during its parsing process.
   * However, unary minus nodes for symbols
   * ({@link  libsbmlConstants#AST_NAME AST_NAME}) cannot
   * be \'collapsed\', so this predicate function is necessary.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is a unary minus, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isUnknown() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node has an unknown type.
   * <p>
   * \'Unknown\' nodes have the type {@link  libsbmlConstants#AST_UNKNOWN
   * AST_UNKNOWN}.  Nodes with unknown types will not appear in an
   * {@link ASTNode} tree returned by libSBML based upon valid SBML input; the only
   * situation in which a node with type {@link  libsbmlConstants#AST_UNKNOWN
   * AST_UNKNOWN} may appear is immediately after having create a
   * new, untyped node using the {@link ASTNode} constructor.  Callers creating
   * nodes should endeavor to set the type to a valid node type as soon as
   * possible after creating new nodes.
   * <p>
   * @return <code>true</code> if this {@link ASTNode} is of type {@link 
   * libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isSetId() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node has the mathml attribute
   * <code>id</code>.
   * <p>
   * @return true if this {@link ASTNode} has an attribute id, false otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isSetClass() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node has the mathml attribute
   * <code>class</code>.
   * <p>
   * @return true if this {@link ASTNode} has an attribute class, false otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isSetStyle() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node has the mathml attribute
   * <code>style</code>.
   * <p>
   * @return true if this {@link ASTNode} has an attribute style, false otherwise.
   */
 public";


%javamethodmodifiers ASTNode::isSetUnits() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node has the attribute
   * <code>sbml:units</code>.
   * <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing {@link Model}.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<div class=\'fragment\'><pre class=\'fragment\'>&lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'
      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'&gt;
        &lt;cn type=\'integer\' sbml:units=\'second\'&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</div>


   * <p>
   * @return <code>true</code> if this {@link ASTNode} has units associated with it, <code>false</code> otherwise.
   * <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   */
 public";


%javamethodmodifiers ASTNode::hasUnits() const "
  /**
   * Predicate returning <code>true</code> (non-zero) if this node or any of its
   * children nodes have the attribute <code>sbml:units</code>.
   * <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing {@link Model}.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<div class=\'fragment\'><pre class=\'fragment\'>&lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'
      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'&gt;
        &lt;cn type=\'integer\' sbml:units=\'second\'&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</div>


   * <p>
   * @return <code>true</code> if this {@link ASTNode} or its children has units associated
   * with it, <code>false</code> otherwise.
   * <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   */
 public";


%javamethodmodifiers ASTNode::setCharacter(char value) "
  /**
   * Sets the value of this {@link ASTNode} to the given character.  If character
   * is one of <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> or <code>^</code>, the node
   * type will be set accordingly.  For all other characters, the node type
   * will be set to {@link  libsbmlConstants#AST_UNKNOWN AST_UNKNOWN}.
   * <p>
   * @param value the character value to which the node\'s value should be
   * set.
   * <p>
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setId(std::string id) "
  /**
   * Sets the mathml id of this {@link ASTNode} to id.
   * <p>
   * @param id <code>string</code> representing the identifier.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setClass(std::string className) "
  /**
   * Sets the mathml class of this {@link ASTNode} to className.
   * <p>
   * @param className <code>string</code> representing the mathml class for this node.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setStyle(std::string style) "
  /**
   * Sets the mathml style of this {@link ASTNode} to style.
   * <p>
   * @param style <code>string</code> representing the identifier.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setName(const char *name) "
  /**
   * Sets the value of this {@link ASTNode} to the given name.
   * <p>
   * As a side-effect, this {@link ASTNode} object\'s type will be reset to
   * {@link  libsbmlConstants#AST_NAME AST_NAME} if (and <em>only
   * if</em>) the {@link ASTNode} was previously an operator (
   * {@link ASTNode#isOperator()}
   * <code>== true</code>), number (
   * {@link ASTNode#isNumber()}
   * <code>== true</code>), or unknown.
   * This allows names to be set for {@link  libsbmlConstants#AST_FUNCTION
   * AST_FUNCTION} nodes and the like.
   * <p>
   * @param name the string containing the name to which this node\'s value
   * should be set
   * <p>
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setValue(int value) "
  /**
   * Sets the value of this {@link ASTNode} to the given integer and sets the node
   * type to {@link  libsbmlConstants#AST_INTEGER AST_INTEGER}.
   * <p>
   * @param value the integer to which this node\'s value should be set
   * <p>
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setValue(long value) "
  /**
   * Sets the value of this {@link ASTNode} to the given (<code>long</code>) integer and sets
   * the node type to {@link  libsbmlConstants#AST_INTEGER AST_INTEGER}.
   * <p>
   * @param value the integer to which this node\'s value should be set
   * <p>
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setValue(long numerator, long denominator) "
  /**
   * Sets the value of this {@link ASTNode} to the given rational in two parts: the
   * numerator and denominator.  The node type is set to {@link 
   * libsbmlConstants#AST_RATIONAL AST_RATIONAL}.
   * <p>
   * @param numerator the numerator value of the rational
   * @param denominator the denominator value of the rational
   * <p>
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setValue(double value) "
  /**
   * Sets the value of this {@link ASTNode} to the given real (<code>double</code>) and sets
   * the node type to {@link  libsbmlConstants#AST_REAL AST_REAL}.
   * <p>
   * This is functionally equivalent to:
   * <div class=\'fragment\'><pre>
   * setValue(value, 0);</pre></div>
   * <p>
   * @param value the <code>double</code> format number to which this node\'s value
   * should be set
   * <p>
   * @return integer value indicating success/failure of the function.  The
   * possible values returned by this function are: <li> {@link 
   * libsbmlConstants#LIBSBML_OPERATION_SUCCESS
   * LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setValue(double mantissa, long exponent) "
  /**
   * Sets the value of this {@link ASTNode} to the given real (<code>double</code>) in two
   * parts: the mantissa and the exponent.  The node type is set to
   * {@link  libsbmlConstants#AST_REAL_E AST_REAL_E}.
   * <p>
   * @param mantissa the mantissa of this node\'s real-numbered value
   * @param exponent the exponent of this node\'s real-numbered value
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ASTNode::setType(ASTNodeType_t type) "
  /**
   * Sets the type of this {@link ASTNode} to the given type code.  A side-effect
   * of doing this is that any numerical values previously stored in this
   * node are reset to zero.
   * <p>
   * @param type the type to which this node should be set
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers ASTNode::setUnits(std::string units) "
  /**
   * Sets the units of this {@link ASTNode} to units.
   * <p>
   * The units will be set <em>only</em> if this {@link ASTNode} object represents a
   * MathML <code>&lt;cn&gt;</code> element, i.e., represents a number.
   * Callers may use
   * {@link ASTNode#isNumber()}
   * to inquire whether the node is of that type.
   * <p>
   * SBML Level&nbsp;3 Version&nbsp;1 introduced the ability to include an
attribute <code>sbml:units</code> on MathML <code>cn</code> elements
appearing in SBML mathematical formulas.  The value of this attribute can
be used to indicate the unit of measurement to be associated with the
number in the content of the <code>cn</code> element.  The value of this
attribute must be the identifier of a unit of measurement defined by SBML
or the enclosing {@link Model}.  Here, the <code>sbml</code> portion is an XML
namespace prefix that must be associated with the SBML namespace for SBML
Level&nbsp;3.  The following example illustrates how this attribute can be
used to define a number with value <code>10</code> and unit of measurement
<code>second</code>:
<div class=\'fragment\'><pre class=\'fragment\'>&lt;math xmlns=\'http://www.w3.org/1998/Math/MathML\'
      xmlns:sbml=\'http://www.sbml.org/sbml/level3/version1/core\'&gt;
        &lt;cn type=\'integer\' sbml:units=\'second\'&gt; 10 &lt;/cn&gt;
&lt;/math&gt;
</div>


   * <p>
   * @param units <code>string</code> representing the unit identifier.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   * <p>
   * @note The <code>sbml:units</code> attribute is only available in SBML
   * Level&nbsp;3.  It may not be used in Levels 1&ndash;2 of SBML.
   */
 public";


%javamethodmodifiers ASTNode::swapChildren(ASTNode *that) "
  /**
   * Swap the children of this {@link ASTNode} object with the children of the
   * given {@link ASTNode} object.
   * <p>
   * @param that the other node whose children should be used to replace
   * <em>this</em> node\'s children
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ASTNode::unsetUnits "
  /**
   * Unsets the units of this {@link ASTNode}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ASTNode::unsetId "
  /**
   * Unsets the mathml id of this {@link ASTNode}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ASTNode::unsetClass "
  /**
   * Unsets the mathml class of this {@link ASTNode}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ASTNode::unsetStyle "
  /**
   * Unsets the mathml style of this {@link ASTNode}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ASTNode::setSemanticsFlag "
  /**
   * Sets the flag indicating that this {@link ASTNode} has semantics attached.
   * <p>
   * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
that can be used to associate additional information with a MathML
construct.  The construct can be used to decorate a MathML expressions with
a sequence of one or more <code>&lt;annotation&gt;</code> or
<code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
pair of items; the first is a symbol that acts as an attribute or key, and
the second is the value associated with the attribute or key.  Please refer
to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
5.2, Semantic Annotations</a> for more information about these constructs.

   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::unsetSemanticsFlag "
  /**
   * Unsets the flag indicating that this {@link ASTNode} has semantics attached.
   * <p>
   * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
that can be used to associate additional information with a MathML
construct.  The construct can be used to decorate a MathML expressions with
a sequence of one or more <code>&lt;annotation&gt;</code> or
<code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
pair of items; the first is a symbol that acts as an attribute or key, and
the second is the value associated with the attribute or key.  Please refer
to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
5.2, Semantic Annotations</a> for more information about these constructs.

   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::getSemanticsFlag() const "
  /**
   * Gets the flag indicating that this {@link ASTNode} has semantics attached.
   * <p>
   * The <code>&lt;semantics&gt;</code> element is a MathML&nbsp;2.0 construct
that can be used to associate additional information with a MathML
construct.  The construct can be used to decorate a MathML expressions with
a sequence of one or more <code>&lt;annotation&gt;</code> or
<code>&lt;annotation-xml&gt;</code> elements.  Each such element contains a
pair of items; the first is a symbol that acts as an attribute or key, and
the second is the value associated with the attribute or key.  Please refer
to the MathML&nbsp;2.0 documentation, particularly the <a target=\'_blank\'
href=\'http://www.w3.org/TR/2007/WD-MathML3-20071005/chapter5.html#mixing.semantic.annotations\'>Section
5.2, Semantic Annotations</a> for more information about these constructs.

   * <p>
   * @return <code>true</code> if this node has semantics attached, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::setDefinitionURL(XMLAttributes url) "
  /**
   * Sets the attribute \'definitionURL\'.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::getDefinitionURL() const "
  /**
   * Gets the MathML <code>definitionURL</code> attribute value.
   * <p>
   * @return the value of the <code>definitionURL</code> attribute, in the form of
   * a libSBML {@link XMLAttributes} object.
   */
 public";


%javamethodmodifiers ASTNode::replaceArgument(const std::string bvar, ASTNode * arg) "
  /**
   * Replaces occurences of a given name within this {@link ASTNode} with the
   * name/value/formula represented by <code>arg</code>.
   * <p>
   * For example, if the formula in this {@link ASTNode} is <code>x + y</code>,
   * then the <code>&lt;bvar&gt;</code> is <code>x</code> and <code>arg</code> is an {@link ASTNode}
   * representing the real value <code>3.</code>  This method substitutes <code>3</code> for 
   * <code>x</code> within this {@link ASTNode} object.
   * <p>
   * @param bvar a string representing the variable name to be substituted
   * @param arg an {@link ASTNode} representing the name/value/formula to substitute
   */
 public";


%javamethodmodifiers ASTNode::setParentSBMLObject(SBase * sb) "
  /**
   * Sets the parent SBML object.
   * <p>
   * @param sb the parent SBML object of this {@link ASTNode}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::getParentSBMLObject() const "
  /**
   * Returns the parent SBML object.
   * <p>
   * @return the parent SBML object of this {@link ASTNode}.
   */
 public";


%javamethodmodifiers ASTNode::reduceToBinary "
  /**
   * Reduces this {@link ASTNode} to a binary tree.
   * <p>
   * Example: if this {@link ASTNode} is <code>and(x, y, z)</code>, then the 
   * formula of the reduced node is <code>and(and(x, y), z)</code>.  The
   * operation replaces the formula stored in the current {@link ASTNode} object.
   */
 public";


%javamethodmodifiers ASTNode::setUserData(void *userData) "
 /**
  * Sets the user data of this node. This can be used by the application
  * developer to attach custom information to the node. In case of a deep
  * copy this attribute will passed as it is. The attribute will be never
  * interpreted by this class.
  * <p>
  * @param userData specifies the new user data. 
  * <p>
  * @return integer value indicating success/failure of the
  * function.  The possible values returned by this function are:
  * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
  * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
  */
 public";


%javamethodmodifiers ASTNode::*getUserData() const "
 /**
  * Returns the user data that has been previously set via setUserData().
  * <p>
  * @return the user data of this node, or <code>null</code> if no user data has been.
  * <p>
  * @see ASTNode#setUserData
  */
 public";


%javamethodmodifiers ASTNode::isWellFormedASTNode() const "
 /**
  * Predicate returning <code>true</code> or <code>false</code> depending on whether this
  * {@link ASTNode} is well-formed.
  * <p>
  * @note An {@link ASTNode} may be well-formed, with each node and its children
  * having the appropriate number of children for the given type, but may
  * still be invalid in the context of its use within an SBML model.
  * <p>
  * @return <code>true</code> if this {@link ASTNode} is well-formed, <code>false</code> otherwise.
  * <p>
  * @see #hasCorrectNumberArguments()
  */
 public";


%javamethodmodifiers ASTNode::hasCorrectNumberArguments() const "
 /**
  * Predicate returning <code>true</code> or <code>false</code> depending on whether this
  * {@link ASTNode} has the correct number of children for it\'s type.
  * <p>
  * For example, an {@link ASTNode} with type {@link  libsbmlConstants#AST_PLUS
  * AST_PLUS} expects 2 child nodes.
  * <p>
  * @note This function performs a check on the toplevel node only.
  * Child nodes are not checked.
  * <p>
  * @return <code>true</code> if this {@link ASTNode} is has appropriate number of children
  * for it\'s type, <code>false</code> otherwise.
  * <p>
  * @see #isWellFormedASTNode()
  */
 public";


%javamethodmodifiers ASTNode::isBvar() const "
 /**
  * Predicate returning <code>true</code> or <code>false</code> depending on whether this
  * {@link ASTNode} has the correct number of children for it\'s type.
  * <p>
  * For example, an {@link ASTNode} with type {@link  libsbmlConstants#AST_PLUS
  * AST_PLUS} expects 2 child nodes.
  * <p>
  * @note This function performs a check on the toplevel node only.
  * Child nodes are not checked.
  * <p>
  * @return <code>true</code> if this {@link ASTNode} is has appropriate number of children
  * for it\'s type, <code>false</code> otherwise.
  * <p>
  * @see #isWellFormedASTNode()
  <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::setBvar "
 /**
  * Predicate returning <code>true</code> or <code>false</code> depending on whether this
  * {@link ASTNode} has the correct number of children for it\'s type.
  * <p>
  * For example, an {@link ASTNode} with type {@link  libsbmlConstants#AST_PLUS
  * AST_PLUS} expects 2 child nodes.
  * <p>
  * @note This function performs a check on the toplevel node only.
  * Child nodes are not checked.
  * <p>
  * @return <code>true</code> if this {@link ASTNode} is has appropriate number of children
  * for it\'s type, <code>false</code> otherwise.
  * <p>
  * @see #isWellFormedASTNode()
  <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::canonicalizeConstant "
  /**
   * Internal helper function for canonicalize().
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::canonicalizeFunction "
  /**
   * Internal helper function for canonicalize().
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::canonicalizeFunctionL1 "
  /**
   * Internal helper function for canonicalize().
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::canonicalizeLogical "
  /**
   * Internal helper function for canonicalize().
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ASTNode::canonicalizeRelational "
  /**
   * Internal helper function for canonicalize().
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBML_parseFormula(const char *formula) "
/**
 * Parses the given SBML formula and returns a representation of it as an
 * Abstract Syntax Tree (AST).
 * <p>
 * The text-string form of mathematical formulas produced by <code><a
 * href=\'{@link libsbml}.html\'>{@link libsbml}.formulaToString()</a></code> and read by
 * <code><a href=\'{@link libsbml}.html\'>{@link libsbml}.parseFormula()</a></code> are
 * simple C-inspired infix notation taken from SBML Level&nbsp;1.  A
 * formula in this text-string form therefore can be handed to a program
 * that understands SBML Level&nbsp;1 mathematical expressions, or used as
 * part of a formula translation system.  The syntax is described in detail
 * in the documentation for {@link ASTNode}.  
 * <p>
 * This returns the root node of the AST corresponding to the formula.  If
 * the formula contains a syntax error, <code>null</code> is returned instead.
 * <p>
 * Note that this facility is provided as a convenience by libSBML&mdash;the
 * MathML standard does not actually define a \'string-form\' equivalent to
 * MathML expression trees, so the choice of formula syntax is somewhat
 * arbitrary.  The approach taken by libSBML is to use the syntax defined by
 * SBML Level&nbsp;1 (which in fact used a text-string representation of
 * formulas and not MathML).  This formula syntax is based mostly on C
 * programming syntax, and may contain operators, function calls, symbols,
 * and white space characters.  The following table provides the precedence
 * rules for the different entities that may appear in formula strings.
 * <p>
 * <center style=\'padding-bottom: 0.5em\'>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr style=\'background: lightgray; font-size: 14px;\'>
     <th align=\'left\'>Token</th>
     <th align=\'left\'>Operation</th>
     <th align=\'left\'>Class</th>
     <th>Precedence</th>
     <th align=\'left\'>Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\'center\'>6</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\'center\'>6</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\'center\'>6</td><td>left</td></tr>
<tr><td><code>-</code></td><td>negation</td><td>unary</td><td align=\'center\'>5</td><td>right</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\'center\'>4</td><td>left</td></tr>
<tr><td><code>*</code></td><td>multiplication</td><td>binary</td><td align=\'center\'>3</td><td>left</td></tr>
<tr><td><code>/</code></td><td>divison</td><td>binary</td><td align=\'center\'>3</td><td>left</td></tr>
<tr><td><code>+</code></td><td>addition</td><td>binary</td><td align=\'center\'>2</td><td>left</td></tr>
<tr><td><code>-</code></td><td>subtraction</td><td>binary</td><td align=\'center\'>2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\'center\'>1</td><td>left</td></tr>
<caption class=\'top-caption\'>A table of the expression operators and their precedence in the
text-string format for mathematical expressions used by SBML_parseFormula().
</caption>
</table>
</center>

 * <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a * b + c</code> is evaluated as <code>(a * b) +
 * c</code> because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a - b + c</code> is
 * evaluated as <code>(a - b) + c</code> because the <code>+</code> and <code>-</code>
 * operators are left-associative.
 * <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters, followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML Level&nbsp;1 Version&nbsp;2 specification</a>:
 * <p>
 * <center>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr>
     <th align=\'left\' width=\'60\'>Name</th>
     <th align=\'left\' width=\'35\'>Args</th>
     <th align=\'left\'>Formula or meaning</th>
     <th align=\'left\' width=\'110\'>Argument Constraints</th>
     <th align=\'left\' width=\'100\'>Result constraints</th>
 </tr>
<tr><td><code>abs</code></td><td><em>x</em></td><td>absolute value of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>acos</code></td><td><em>x</em></td><td>arc cosine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>acos(x)</em> &le; &pi;</td></tr>
<tr><td><code>asin</code></td><td><em>x</em></td><td>arc sine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>asin(x)</em> &le; &pi;</td></tr>
<tr><td><code>atan</code></td><td><em>x</em></td><td>arc tangent of <em>x</em> in radians</td><td></td><td>0 &le; <em>atan(x)</em> &le; &pi;</td></tr>
<tr><td><code>ceil</code></td><td><em>x</em></td><td>smallest number not less than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>cos</code></td><td><em>x</em></td><td>cosine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>exp</code></td><td><em>x</em></td><td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm</td><td></td><td></td></tr>
<tr><td><code>floor</code></td><td><em>x</em></td><td>the largest number not greater than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>log</code></td><td><em>x</em></td><td>natural logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>log10</code></td><td><em>x</em></td><td>base 10 logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>pow</code></td><td><em>x, y</em></td><td><em>x</em><sup><em> y</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqr</code></td><td><em>x</em></td><td><em>x</em><sup><em>2</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqrt</code></td><td><em>x</em></td><td>&radic;<em>x</em></td><td><em>x</em> &gt; 0</td><td><em>sqrt(x)</em> &ge; 0</td></tr>
<tr><td><code>sin</code></td><td><em>x</em></td><td>sine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>tan</code></td><td><em>x</em></td><td>tangent of <em>x</em></td><td>x &ne; n*&pi;/2, for odd integer <em>n</em></td><td></td></tr>
<caption class=\'bottom-caption\'>The names of mathematical functions defined in the SBML
Level&nbsp;1 Version&nbsp;2 text-string formula syntax.</caption>
</table>
</center>

 * <p>
 * @warning There are differences between the symbols used to represent the
 * common mathematical functions and the corresponding MathML token names.
 * This is a potential source of incompatibilities.  Note in particular that
 * in this text-string syntax, <code>log(x)</code> represents the natural
 * logarithm, whereas in MathML, the natural logarithm is
 * <code>&lt;ln/&gt;</code>.  Application writers are urged to be careful
 * when translating between text forms and MathML forms, especially if they
 * provide a direct text-string input facility to users of their software
 * systems.<br><br>
 * We urge developers to keep in mind that the text-string formula syntax is
specific to SBML Level&nbsp;1\'s C-like mathematical formula syntax.  In
particular, it is <em>not a general-purpose mathematical expression
syntax</em>.  LibSBML provides methods for parsing and transforming
text-string math formulas back and forth from AST structures, but it is
important to keep the system\'s limitations in mind.

 * <p>
 * @param formula the text-string formula expression to be parsed
 * <p>
 * @return the root node of the AST, or null if an error occurred in
 * parsing the formula
 * <p>
 * <p>
 * <p>
 * @see #formulaToString(ASTNode tree)
 */
 public";


%javamethodmodifiers SBML_formulaToString(const ASTNode_t *tree) "
/**
 * Converts an AST to a string representation of a formula using a syntax
 * basically derived from SBML Level&nbsp;1.
 * <p>
 * The text-string form of mathematical formulas produced by <code><a
 * href=\'{@link libsbml}.html#formulaToString(org.sbml.{@link libsbml}.ASTNode)\'>
 * {@link libsbml}.formulaToString()</a></code> and read by <code><a
 * href=\'{@link libsbml}.html#parseFormula(java.lang.String)\'>
 * {@link libsbml}.parseFormula()</a></code> are simple C-inspired infix notation
 * taken from SBML Level&nbsp;1.  A formula in this text-string form
 * therefore can be handed to a program that understands SBML Level&nbsp;1
 * mathematical expressions, or used as part of a formula translation
 * system.  The syntax is described in detail in the documentation for
 * {@link ASTNode}.  
 * <p>
 * Note that this facility is provided as a convenience by libSBML&mdash;the
 * MathML standard does not actually define a \'string-form\' equivalent to
 * MathML expression trees, so the choice of formula syntax is somewhat
 * arbitrary.  The approach taken by libSBML is to use the syntax defined by
 * SBML Level&nbsp;1 (which in fact used a text-string representation of
 * formulas and not MathML).  This formula syntax is based mostly on C
 * programming syntax, and may contain operators, function calls, symbols,
 * and white space characters.  The following table provides the precedence
 * rules for the different entities that may appear in formula strings.
 * <p>
 * <center style=\'padding-bottom: 0.5em\'>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr style=\'background: lightgray; font-size: 14px;\'>
     <th align=\'left\'>Token</th>
     <th align=\'left\'>Operation</th>
     <th align=\'left\'>Class</th>
     <th>Precedence</th>
     <th align=\'left\'>Associates</th>
 </tr>
<tr><td><em>name</em></td><td>symbol reference</td><td>operand</td><td align=\'center\'>6</td><td>n/a</td></tr>
<tr><td><code>(</code><em>expression</em><code>)</code></td><td>expression grouping</td><td>operand</td><td align=\'center\'>6</td><td>n/a</td></tr>
<tr><td><code>f(</code><em>...</em><code>)</code></td><td>function call</td><td>prefix</td><td align=\'center\'>6</td><td>left</td></tr>
<tr><td><code>-</code></td><td>negation</td><td>unary</td><td align=\'center\'>5</td><td>right</td></tr>
<tr><td><code>^</code></td><td>power</td><td>binary</td><td align=\'center\'>4</td><td>left</td></tr>
<tr><td><code>*</code></td><td>multiplication</td><td>binary</td><td align=\'center\'>3</td><td>left</td></tr>
<tr><td><code>/</code></td><td>divison</td><td>binary</td><td align=\'center\'>3</td><td>left</td></tr>
<tr><td><code>+</code></td><td>addition</td><td>binary</td><td align=\'center\'>2</td><td>left</td></tr>
<tr><td><code>-</code></td><td>subtraction</td><td>binary</td><td align=\'center\'>2</td><td>left</td></tr>
<tr><td><code>,</code></td><td>argument delimiter</td><td>binary</td><td align=\'center\'>1</td><td>left</td></tr>
<caption class=\'top-caption\'>A table of the expression operators and their precedence in the
text-string format for mathematical expressions used by SBML_parseFormula().
</caption>
</table>
</center>

 * <p>
 * In the table above, <em>operand</em> implies the construct is an operand, 
 * <em>prefix</em> implies the operation is applied to the following arguments, 
 * <em>unary</em> implies there is one argument, and <em>binary</em> implies there are
 * two arguments.  The values in the <b>Precedence</b> column show how the
 * order of different types of operation are determined.  For example, the
 * expression <code>a * b + c</code> is evaluated as <code>(a * b) +
 * c</code> because the @c * operator has higher precedence.  The
 * <b>Associates</b> column shows how the order of similar precedence
 * operations is determined; for example, <code>a - b + c</code> is
 * evaluated as <code>(a - b) + c</code> because the <code>+</code> and <code>-</code>
 * operators are left-associative.
 * <p>
 * The function call syntax consists of a function name, followed by optional
 * white space, followed by an opening parenthesis token, followed by a
 * sequence of zero or more arguments separated by commas (with each comma
 * optionally preceded and/or followed by zero or more white space
 * characters, followed by a closing parenthesis token.  The function name
 * must be chosen from one of the pre-defined functions in SBML or a
 * user-defined function in the model.  The following table lists the names
 * of certain common mathematical functions; this table corresponds to
 * Table&nbsp;6 in the <a target=\'_blank\' href=\'http://sbml.org/Documents/Specifications#SBML_Level_1_Version_2\'>SBML Level&nbsp;1 Version&nbsp;2 specification</a>:
 * <p>
 * <center>
<table border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 <tr>
     <th align=\'left\' width=\'60\'>Name</th>
     <th align=\'left\' width=\'35\'>Args</th>
     <th align=\'left\'>Formula or meaning</th>
     <th align=\'left\' width=\'110\'>Argument Constraints</th>
     <th align=\'left\' width=\'100\'>Result constraints</th>
 </tr>
<tr><td><code>abs</code></td><td><em>x</em></td><td>absolute value of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>acos</code></td><td><em>x</em></td><td>arc cosine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>acos(x)</em> &le; &pi;</td></tr>
<tr><td><code>asin</code></td><td><em>x</em></td><td>arc sine of <em>x</em> in radians</td><td>-1.0 &le; <em>x</em> &le; 1.0</td><td>0 &le; <em>asin(x)</em> &le; &pi;</td></tr>
<tr><td><code>atan</code></td><td><em>x</em></td><td>arc tangent of <em>x</em> in radians</td><td></td><td>0 &le; <em>atan(x)</em> &le; &pi;</td></tr>
<tr><td><code>ceil</code></td><td><em>x</em></td><td>smallest number not less than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>cos</code></td><td><em>x</em></td><td>cosine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>exp</code></td><td><em>x</em></td><td><em>e</em><sup><em> x</em></sup>, where <em>e</em> is the base of the natural logarithm</td><td></td><td></td></tr>
<tr><td><code>floor</code></td><td><em>x</em></td><td>the largest number not greater than <em>x</em> whose value is an exact integer</td><td></td><td></td></tr>
<tr><td><code>log</code></td><td><em>x</em></td><td>natural logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>log10</code></td><td><em>x</em></td><td>base 10 logarithm of <em>x</em></td><td><em>x</em> &gt; 0</td><td></td></tr>
<tr><td><code>pow</code></td><td><em>x, y</em></td><td><em>x</em><sup><em> y</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqr</code></td><td><em>x</em></td><td><em>x</em><sup><em>2</em></sup></td><td></td><td></td></tr>
<tr><td><code>sqrt</code></td><td><em>x</em></td><td>&radic;<em>x</em></td><td><em>x</em> &gt; 0</td><td><em>sqrt(x)</em> &ge; 0</td></tr>
<tr><td><code>sin</code></td><td><em>x</em></td><td>sine of <em>x</em></td><td></td><td></td></tr>
<tr><td><code>tan</code></td><td><em>x</em></td><td>tangent of <em>x</em></td><td>x &ne; n*&pi;/2, for odd integer <em>n</em></td><td></td></tr>
<caption class=\'bottom-caption\'>The names of mathematical functions defined in the SBML
Level&nbsp;1 Version&nbsp;2 text-string formula syntax.</caption>
</table>
</center>

 * <p>
 * @warning There are differences between the symbols used to represent the
 * common mathematical functions and the corresponding MathML token names.
 * This is a potential source of incompatibilities.  Note in particular that
 * in this text-string syntax, <code>log(x)</code> represents the natural
 * logarithm, whereas in MathML, the natural logarithm is
 * <code>&lt;ln/&gt;</code>.  Application writers are urged to be careful
 * when translating between text forms and MathML forms, especially if they
 * provide a direct text-string input facility to users of their software
 * systems.<br><br>
 * We urge developers to keep in mind that the text-string formula syntax is
specific to SBML Level&nbsp;1\'s C-like mathematical formula syntax.  In
particular, it is <em>not a general-purpose mathematical expression
syntax</em>.  LibSBML provides methods for parsing and transforming
text-string math formulas back and forth from AST structures, but it is
important to keep the system\'s limitations in mind.

 * <p>
 * @param tree the AST to be converted.
 * <p>
 * @return the formula from the given AST as an SBML Level 1 text-string
 * mathematical formula.  The caller owns the returned string and is
 * responsible for freeing it when it is no longer needed.
 * <p>
 * <p>
 * <p>
 * @see #parseFormula(java.lang.String)
 */
 public";


%typemap(javaimports) XMLAttributes "
/** 
 * Representation of attributes on an XML node.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 */
"

%javamethodmodifiers XMLAttributes::XMLAttributes "
  /**
   * Creates a new empty {@link XMLAttributes} set.
   */
 public";


%javamethodmodifiers XMLAttributes::XMLAttributes(const XMLAttributes& orig) "
  /**
   * Copy constructor; creates a copy of this {@link XMLAttributes} set.
   */
 public";


%javamethodmodifiers XMLAttributes::clone() const "
  /**
   * Creates and returns a deep copy of this {@link XMLAttributes} set.
   * <p>
   * @return a (deep) copy of this {@link XMLAttributes} set.
   */
 public";


%javamethodmodifiers XMLAttributes::add(  const std::string& name , const std::string& value , const std::string& namespaceURI = "" , const std::string& prefix = "") "
  /**
   * Adds an attribute (a name/value pair) to this {@link XMLAttributes} object,
   * optionally with a prefix and URI defining a namespace.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a string, the value of the attribute.
   * @param namespaceURI a string, the namespace URI of the attribute.
   * @param prefix a string, the prefix of the namespace
   * <p>
   * @return an integer code indicating the success or failure of the
   * function.  The possible values returned by this
   * function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @note if local name with the same namespace URI already exists in this 
   * attribute set, its value and prefix will be replaced.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::add( const XMLTriple& triple, const std::string& value) "
  /**
   * Adds an attribute with the given {@link XMLTriple}/value pair to this {@link XMLAttributes} set.
   * <p>
   * @note if local name with the same namespace URI already exists in this attribute set, 
   * its value and prefix will be replaced.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a string, the value of the attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers XMLAttributes::addResource(const std::string& name, const std::string& value) "
  /**
   * Adds an name/value pair to this {@link XMLAttributes} set.  
   * <p>
   * This method is similar to the add method but an attribute with same name wont 
   * be overwritten. This facilitates the addition of multiple resource attributes 
   * in {@link CVTerm} class.
   * <p>
   * @param name a string, the name of the attribute.
   * @param value a string, the value of the attribute.
   * <p>
   * @note This function is only internally used to store multiple rdf:resource 
   * attributes in {@link CVTerm} class, and thus should not be used for other purposes.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::removeResource(int n) "
  /**
   * Removes an attribute with the given index from this {@link XMLAttributes} set.  
   * <p>
   * @param n an integer the index of the resource to be deleted
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLAttributes::remove(int n) "
  /**
   * Removes an attribute with the given index from this {@link XMLAttributes} set.  
   * (This function is an alias of {@link XMLAttributes#removeResource(int n)} ).
   * <p>
   * @param n an integer the index of the resource to be deleted
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLAttributes::remove(const std::string& name, const std::string& uri = "") "
  /**
   * Removes an attribute with the given local name and namespace URI from 
   * this {@link XMLAttributes} set.  
   * <p>
   * @param name   a string, the local name of the attribute.
   * @param uri    a string, the namespace URI of the attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLAttributes::remove(const XMLTriple& triple) "
  /**
   * Removes an attribute with the given {@link XMLTriple} from this {@link XMLAttributes} set.  
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLAttributes::clear "
  /**
   * Clears (deletes) all attributes in this {@link XMLAttributes} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers XMLAttributes::getIndex(const std::string& name) const "
  /**
   * Return the index of an attribute with the given name.
   * <p>
   * @note A namespace bound to the name is not checked by this function.
   * Thus, if there are multiple attributes with the given local name and
   * different namespaces, the smallest index among those attributes will
   * be returned.  {@link XMLAttributes#getIndex(String name, String uri)} const or
   * {@link XMLAttributes#getIndex(XMLTriple triple)} const should be used to get an index of an
   * attribute with the given local name and namespace.
   * <p>
   * @param name a string, the local name of the attribute for which the 
   * index is required.
   * <p>
   * @return the index of an attribute with the given local name, or -1 if not present.
   */
 public";


%javamethodmodifiers XMLAttributes::getIndex(const std::string& name, const std::string& uri) const "
  /**
   * Return the index of an attribute with the given local name and namespace URI.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   * <p>
   * @return the index of an attribute with the given local name and namespace URI, 
   * or -1 if not present.
   */
 public";


%javamethodmodifiers XMLAttributes::getIndex(const XMLTriple& triple) const "
  /**
   * Return the index of an attribute with the given {@link XMLTriple}.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute for which 
   *        the index is required.
   * <p>
   * @return the index of an attribute with the given {@link XMLTriple}, or -1 if not present.
   */
 public";


%javamethodmodifiers XMLAttributes::getLength() const "
  /**
   * Return the number of attributes in the set.
   * <p>
   * @return the number of attributes in this {@link XMLAttributes} set.
   */
 public";


%javamethodmodifiers XMLAttributes::getNumAttributes() const "
  /**
   * Return the number of attributes in the set.
   * <p>
   * @return the number of attributes in this {@link XMLAttributes} set.
   * <p>
   * This function is an alias for getLength introduced for consistency
   * with other XML classes.
   */
 public";


%javamethodmodifiers XMLAttributes::getName(int index) const "
  /**
   * Return the local name of an attribute in this {@link XMLAttributes} set (by position).
   * <p>
   * @param index an integer, the position of the attribute whose local name is 
   * required.
   * <p>
   * @return the local name of an attribute in this list (by position).  
   * <p>
   * @note If index is out of range, an empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(int index)} const to test for the attribute
   * existence.
   */
 public";


%javamethodmodifiers XMLAttributes::getPrefix(int index) const "
  /**
   * Return the prefix of an attribute in this {@link XMLAttributes} set (by position).
   * <p>
   * @param index an integer, the position of the attribute whose prefix is 
   * required.
   * <p>
   * @return the namespace prefix of an attribute in this list (by
   * position).  
   * <p>
   * @note If index is out of range, an empty string will be returned. Use
   * {@link XMLAttributes#hasAttribute(int index)} const to test for the attribute
   * existence.
   */
 public";


%javamethodmodifiers XMLAttributes::getPrefixedName(int index) const "
  /**
   * Return the prefixed name of an attribute in this {@link XMLAttributes} set (by position).
   * <p>
   * @param index an integer, the position of the attribute whose prefixed 
   * name is required.
   * <p>
   * @return the prefixed name of an attribute in this list (by
   * position).  
   * <p>
   * @note If index is out of range, an empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(int index)} const to test for attribute existence.
   */
 public";


%javamethodmodifiers XMLAttributes::getURI(int index) const "
  /**
   * Return the namespace URI of an attribute in this {@link XMLAttributes} set (by position).
   * <p>
   * @param index an integer, the position of the attribute whose namespace URI is 
   * required.
   * <p>
   * @return the namespace URI of an attribute in this list (by position).
   * <p>
   * @note If index is out of range, an empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(int index)} const to test for attribute existence.
   */
 public";


%javamethodmodifiers XMLAttributes::getValue(int index) const "
  /**
   * Return the value of an attribute in this {@link XMLAttributes} set (by position).
   * <p>
   * @param index an integer, the position of the attribute whose value is 
   * required.
   * <p>
   * @return the value of an attribute in the list (by position).  
   * <p>
   * @note If index is out of range, an empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(int index)} const to test for attribute existence.
   */
 public";


%javamethodmodifiers XMLAttributes::getValue(const std::string name) const "
  /**
   * Return an attribute\'s value by name.
   * <p>
   * @param name a string, the local name of the attribute whose value is required.
   * <p>
   * @return The attribute value as a string.  
   * <p>
   * @note If an attribute with the given local name does not exist, an
   * empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(String name, String uri)} const
   * to test for attribute existence.  A namespace bound to the local name
   * is not checked by this function.  Thus, if there are multiple
   * attributes with the given local name and different namespaces, the
   * value of an attribute with the smallest index among those attributes
   * will be returned.  {@link XMLAttributes#getValue(String name)} const or
   * {@link XMLAttributes#getValue(XMLTriple triple)} const should be used to get a value of an
   * attribute with the given local name and namespace.
   */
 public";


%javamethodmodifiers XMLAttributes::getValue(const std::string name, const std::string uri) const "
  /**
   * Return a value of an attribute with the given local name and namespace URI.
   * <p>
   * @param name a string, the local name of the attribute whose value is required.
   * @param uri  a string, the namespace URI of the attribute.
   * <p>
   * @return The attribute value as a string.  
   * <p>
   * @note If an attribute with the given local name and namespace URI does
   * not exist, an empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(String name, String uri)} const
   * to test for attribute existence.
   */
 public";


%javamethodmodifiers XMLAttributes::getValue(const XMLTriple& triple) const "
  /**
   * Return a value of an attribute with the given {@link XMLTriple}.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute whose 
   *        value is required.
   * <p>
   * @return The attribute value as a string.  
   * <p>
   * @note If an attribute with the given {@link XMLTriple} does not exist, an
   * empty string will be returned.  Use
   * {@link XMLAttributes#hasAttribute(XMLTriple triple)} const to test for attribute existence.
   */
 public";


%javamethodmodifiers XMLAttributes::hasAttribute(int index) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether
   * an attribute with the given index exists in this {@link XMLAttributes}.
   * <p>
   * @param index an integer, the position of the attribute.
   * <p>
   * @return <code>true</code> if an attribute with the given index exists in this
   * {@link XMLAttributes}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLAttributes::hasAttribute(const std::string name, const std::string uri="") const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether
   * an attribute with the given local name and namespace URI exists in this 
   * {@link XMLAttributes}.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   * <p>
   * @return <code>true</code> if an attribute with the given local name and namespace 
   * URI exists in this {@link XMLAttributes}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLAttributes::hasAttribute(const XMLTriple& triple) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether
   * an attribute with the given XML triple exists in this {@link XMLAttributes}.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute 
   * <p>
   * @return <code>true</code> if an attribute with the given XML triple exists in this
   * {@link XMLAttributes}, <code>false</code> otherwise.
   * <p>
   */
 public";


%javamethodmodifiers XMLAttributes::isEmpty() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLAttributes} set is empty.
   * <p>
   * @return <code>true</code> if this {@link XMLAttributes} set is empty, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const std::string&  name , bool&               value , XMLErrorLog*        log      = NULL , bool                required = false ) const "
  /**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as a boolean, value 
   * is not modified.
   * <p>
   * According to the W3C XML Schema, valid boolean values are: \'true\',
   * \'false\', \'1\', and \'0\' (case-insensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#boolean
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a boolean, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @note A namespace bound to the given local name is not checked by this
   * function. {@link XMLAttributes#readInto(const {@link XMLTriple}, bool&, ...)} const should
   * be used to read a value for an attribute name with a prefix and
   * namespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const XMLTriple& triple , bool&        value , XMLErrorLog* log      = NULL , bool         required = false ) const "
  /**
   * Reads the value for the attribute with the given {@link XMLTriple} into value.  
   * If the {@link XMLTriple} was not found or value could be interpreted as a boolean, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema, valid boolean values are: \'true\',
   * \'false\', \'1\', and \'0\' (case-insensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#boolean
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a boolean, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const std::string&  name , double&             value , XMLErrorLog*        log      = NULL , bool                required = false ) const "
  /**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as a double, value is 
   * not modified.
   * <p>
   * According to the W3C XML Schema, valid doubles are the same as valid
   * doubles for C and the special values \'INF\', \'-INF\', and \'NaN\'
   * (case-sensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#double
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a double, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @note A namespace bound to the given local name is not checked by this
   * function.  {@link XMLAttributes#readInto(const {@link XMLTriple}, double&, ...)} const
   * should be used to read a value for an attribute name with a prefix and
   * namespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const XMLTriple&  triple , double&           value , XMLErrorLog*      log      = NULL , bool              required = false ) const "
  /**
   * Reads the value for the attribute with the given {@link XMLTriple} into value.  
   * If the triple was not found or value could be interpreted as a double, 
   *value is not modified.
   * <p>
   * According to the W3C XML Schema, valid doubles are the same as valid
   * doubles for C and the special values \'INF\', \'-INF\', and \'NaN\'
   * (case-sensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#double
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a double, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const std::string&  name , long&               value , XMLErrorLog*        log      = NULL , bool                required = false ) const "
  /**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as an long, value is 
   * not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a long, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @note A namespace bound to the given local name is not checked by this
   * function.  {@link XMLAttributes#readInto(const {@link XMLTriple}, long&, ...)} const should
   * be used to read a value for an attribute name with a prefix and
   * namespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const XMLTriple& triple , long&            value , XMLErrorLog*     log      = NULL , bool             required = false ) const "
  /**
   * Reads the value for the attribute {@link XMLTriple} into value.  
   * If the {@link XMLTriple} was not found or value could be interpreted as a long, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a long, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const std::string&  name , int&                value , XMLErrorLog*        log      = NULL , bool                required = false ) const "
  /**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as an int, value is 
   * not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a int.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value an integer, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @note A namespace bound to the given local name is not checked by this
   * function.  {@link XMLAttributes#readInto(const {@link XMLTriple}, int&, ...)} const should
   * be used to read a value for an attribute name with a prefix and
   * namespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const XMLTriple& triple , int&             value , XMLErrorLog*     log      = NULL , bool             required = false ) const "
  /**
   * Reads the value for the attribute with the given {@link XMLTriple} into value.  
   * If the {@link XMLTriple} was not found or value could be interpreted as an int, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a int.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value an integer, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto "
  /**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found or value could be interpreted as a long integer, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more
   * information, see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a long integereger, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @note A namespace bound to the given local name is not checked by this
   * function.  {@link XMLAttributes#readInto(const {@link XMLTriple}, long&,
   * ...)} const should be used to read a value for an attribute name with a
   * prefix and namespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto "
  /**
   * Reads the value for the attribute with the given {@link XMLTriple} into value.  
   * If the {@link XMLTriple} was not found or value could be interpreted as a long integer, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more
   * information, see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a long integereger, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const std::string&  name , std::string&        value , XMLErrorLog*        log      = NULL , bool                required = false ) const "
  /**
   * Reads the value for the attribute name into value.  If the given local
   * name was not found, value is not modified.
   * <p>
   * If an {@link XMLErrorLog} is passed in and required is true, missing
   * attributes are logged.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a string, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @note A namespace bound to the given local name is not checked by this
   * function. {@link XMLAttributes#readInto(const {@link XMLTriple}, String&, ...)} const
   * should be used to read a value for an attribute name with a prefix and
   * namespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::readInto(  const XMLTriple& triple , std::string&     value , XMLErrorLog*     log       = NULL , bool              required = false ) const "
  /**
   * Reads the value for the attribute with the given {@link XMLTriple} into value.  
   * If the {@link XMLTriple} was not found, value is not modified.
   * <p>
   * If an {@link XMLErrorLog} is passed in and required is true, missing
   * attributes are logged.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a string, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLAttributes::write(XMLOutputStream& stream) const "
  /**
   * Writes this {@link XMLAttributes} set to stream.
   * <p>
   * @param stream XMLOutputStream, stream to which this {@link XMLAttributes}
   * set is to be written.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::setErrorLog(XMLErrorLog* log) "
  /**
   * (Optional) Sets the log used when logging attributeTypeError() and
   * attributeRequired() errors.
   * <p>
   * @param log the log to use
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::attributeTypeError(  const std::string& name , DataType           type , XMLErrorLog*       log ) const "
  /**
   * Logs an attribute datatype error.
   * <p>
   * @param name  name of the attribute
   * @param type  the datatype of the attribute value.
   * @param log   the {@link XMLErrorLog} where the error should be logged
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::attributeRequiredError( const std::string& name, XMLErrorLog* log ) const "
  /**
   * Logs an error indicating a required attribute was missing.
   * Used internally.
   * <p>
   * @param name  name of the attribute
   * @param log   the {@link XMLErrorLog} where the error should be logged
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::readInto(  int          index , const std::string&  name , bool&        value , XMLErrorLog* log      = NULL , bool         required = false ) const "
  /**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as a boolean, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema, valid boolean values are: \'true\',
   * \'false\', \'1\', and \'0\' (case-insensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#boolean
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * <p>
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute 
   * (only used for an error message (if error detected))
   * @param value a boolean, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::readInto(  int          index , const std::string&  name , double&      value , XMLErrorLog*  log      = NULL , bool          required = false ) const "
  /**
   * Reads the value for the attribute with the given index into value.  
   * If name was not found or value could be interpreted as a double, value 
   * is not modified.
   * <p>
   * According to the W3C XML Schema, valid doubles are the same as valid
   * doubles for C and the special values \'INF\', \'-INF\', and \'NaN\'
   * (case-sensitive).  For more information, see:
   * http://www.w3.org/TR/xmlschema-2/#double
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a double, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::readInto(  int          index , const std::string&  name , long&         value , XMLErrorLog*  log      = NULL , bool          required = false ) const "
  /**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as a long, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a long, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::readInto(  int          index , const std::string&  name , int&         value , XMLErrorLog*  log      = NULL , bool          required = false ) const "
  /**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as an integer, 
   * value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a int.  For more information,
   * see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value an integer, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::readInto "
  /**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found or value could be interpreted as an 
   * long, value is not modified.
   * <p>
   * According to the W3C XML Schema valid integers include zero, *all*
   * positive and *all* negative whole numbers.  For practical purposes, we
   * limit values to what can be stored in a long.  For more
   * information, see: http://www.w3.org/TR/xmlschema-2/#integer
   * <p>
   * If an {@link XMLErrorLog} is passed in datatype format errors are logged.  If
   * required is true, missing attributes are also logged.
   * <p>
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a long integereger, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLAttributes::readInto(  int          index , const std::string&  name , std::string& value , XMLErrorLog* log      = NULL , bool         required = false ) const "
  /**
   * Reads the value for the attribute with the given index into value.  
   * If the attribute was not found, value is not modified.
   * <p>
   * If an {@link XMLErrorLog} is passed in and required is true, missing
   * attributes are logged.
   * <p>
   * @param index a int, the index of the attribute.
   * @param name a string, the name of the attribute
   * (only used for an error message (if error detected))
   * @param value a string, the value of the attribute.
   * @param log an {@link XMLErrorLog}, the error log.
   * @param required a boolean, indicating whether the attribute is required.
   * <p>
   * @returns <code>true</code> if the attribute was read into value, <code>false</code> otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) XMLNamespaces "
/** 
 * Representation of XML Namespaces.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * This class serves to organize functionality for tracking XML namespaces
 * in a document or data stream.  The namespace declarations are stored as
 * a list of pairs of XML namespace URIs and prefix strings.  These
 * correspond to the parts of a namespace declaration on an XML element.
 * For example, in the following XML fragment,
 * <div class=\'fragment\'><pre>
&lt;annotation&gt;
    &lt;mysim:nodecolors xmlns:mysim=\'urn:lsid:mysim.org\'
         mysim:bgcolor=\'green\' mysim:fgcolor=\'white\'/&gt;
&lt;/annotation&gt;
</pre></div>
 * there is one namespace declaration.  Its URI is
 * <code>urn:lsid:mysim.org</code> and its prefix is <code>mysim</code>.
 * This pair could be stored as one item in an {@link XMLNamespaces} list.
 * <p>
 * {@link XMLNamespaces} provides various methods for manipulating the list of
 * prefix-URI pairs.  Individual namespaces stored in a given XMLNamespace
 * object instance can be retrieved based on their index using
 * {@link XMLNamespaces#getPrefix(int index)}, or by their characteristics such as
 * their URI or position in the list.
 */
"

%javamethodmodifiers XMLNamespaces::XMLNamespaces "
  /**
   * Creates a new empty list of XML namespace declarations.
   */
 public";


%javamethodmodifiers XMLNamespaces::XMLNamespaces(const XMLNamespaces& orig) "
  /**
   * Copy constructor; creates a copy of this {@link XMLNamespaces} list.
   * <p>
   * @param orig the {@link XMLNamespaces} object to copy
   */
 public";


%javamethodmodifiers XMLNamespaces::clone() const "
  /**
   * Creates and returns a deep copy of this {@link XMLNamespaces} list.
   * <p>
   * @return a (deep) copy of this {@link XMLNamespaces} list.
   */
 public";


%javamethodmodifiers XMLNamespaces::add(const std::string& uri, const std::string& prefix = "") "
  /**
   * Appends an XML namespace prefix and URI pair to this list of namespace
   * declarations.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  If there is an XML namespace with the given <code>uri</code> prefix
   * in this list, then its corresponding URI will be overwritten by the
   * new <code>uri</code>.  Calling programs could use one of the other {@link XMLNamespaces}
   * methods, such as
   * {@link XMLNamespaces#hasPrefix(String)} and 
   * {@link XMLNamespaces#hasURI(String)} to
   * inquire whether a given prefix and/or URI
   * is already present in this {@link XMLNamespaces} object.
   * <p>
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLNamespaces::remove(int index) "
  /**
   * Removes an XML Namespace stored in the given position of this list.
   * <p>
   * @param index an integer, position of the namespace to remove.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLNamespaces::remove(const std::string& prefix) "
  /**
   * Removes an XML Namespace with the given prefix.
   * <p>
   * @param prefix a string, prefix of the required namespace.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   * <p>
   * @see #remove(int index)
   */
 public";


%javamethodmodifiers XMLNamespaces::clear "
  /**
   * Clears (deletes) all XML namespace declarations in this {@link XMLNamespaces}
   * object.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <p>
   * @see #remove(int index)
   */
 public";


%javamethodmodifiers XMLNamespaces::getIndex(const std::string uri) const "
  /**
   * Look up the index of an XML namespace declaration by URI.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  If this {@link XMLNamespaces} object contains a pair with the given
   * URI <code>uri</code>, this method returns its index in the list.
   * <p>
   * @param uri a string, the URI of the sought-after namespace.
   * <p>
   * @return the index of the given declaration, or <code>-1</code> if not
   * present.
   */
 public";


%javamethodmodifiers XMLNamespaces::getIndexByPrefix(const std::string prefix) const "
  /**
   * Look up the index of an XML namespace declaration by prefix.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  If this {@link XMLNamespaces} object contains a pair with the given
   * prefix <code>prefix</code>, this method returns its index in the list.
   * <p>
   * @param prefix a string, the prefix string of the sought-after
   * namespace
   * <p>
   * @return the index of the given declaration, or <code>-1</code> if not
   * present.
   */
 public";


%javamethodmodifiers XMLNamespaces::getLength() const "
  /**
   * Returns the total number of URI-and-prefix pairs stored in this
   * particular {@link XMLNamespaces} instance.
   * <p>
   * @return the number of namespaces in this list.
   */
 public";


%javamethodmodifiers XMLNamespaces::getNumNamespaces() const "
  /**
   * Returns the total number of URI-and-prefix pairs stored in this
   * particular {@link XMLNamespaces} instance.
   * <p>
   * @return the number of namespaces in this list.
   * <p>
   * This function is an alias for getLength introduced for consistency
   * with other XML classes.
   */
 public";


%javamethodmodifiers XMLNamespaces::getPrefix(int index) const "
  /**
   * Look up the prefix of an XML namespace declaration by its position.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the prefix of the <code>n</code>th
   * element in that list (if it exists).  Callers should use
   * {@link XMLAttributes#getLength()} first to find out how many namespaces are
   * stored in the list.
   * <p>
   * @param index an integer, position of the sought-after prefix
   * <p>
   * @return the prefix of an XML namespace declaration in this list (by
   * position), or an empty string if the <code>index</code> is out of range
   * <p>
   * @see #getLength()
   */
 public";


%javamethodmodifiers XMLNamespaces::getPrefix(const std::string& uri) const "
  /**
   * Look up the prefix of an XML namespace declaration by its URI.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the prefix for a pair that has the
   * given <code>uri</code>.
   * <p>
   * @param uri a string, the URI of the prefix being sought
   * <p>
   * @return the prefix of an XML namespace declaration given its URI, or
   * an empty string if no such <code>uri</code> exists in this {@link XMLNamespaces} object
   */
 public";


%javamethodmodifiers XMLNamespaces::getURI(int index) const "
  /**
   * Look up the URI of an XML namespace declaration by its position.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the URI of the <code>n</code>th element
   * in that list (if it exists).  Callers should use
   * {@link XMLAttributes#getLength()} first to find out how many namespaces are
   * stored in the list.
   * <p>
   * @param index an integer, position of the required URI.
   * <p>
   * @return the URI of an XML namespace declaration in this list (by
   * position), or an empty string if the <code>index</code> is out of range.
   * <p>
   * @see #getLength()
   */
 public";


%javamethodmodifiers XMLNamespaces::getURI(const std::string& prefix = "") const "
  /**
   * Look up the URI of an XML namespace declaration by its prefix.
   * <p>
   * An {@link XMLNamespaces} object stores a list of pairs of namespaces and their
   * prefixes.  This method returns the namespace URI for a pair that has
   * the given <code>prefix</code>.
   * <p>
   * @param prefix a string, the prefix of the required URI
   * <p>
   * @return the URI of an XML namespace declaration having the given 
   * <code>prefix</code>, or an empty string if no such prefix-and-URI pair exists
   * in this {@link XMLNamespaces} object
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   * <p>
   * @see #getURI()
   */
 public";


%javamethodmodifiers XMLNamespaces::isEmpty() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link XMLNamespaces} list is empty.
   * <p>
   * @return <code>true</code> if this {@link XMLNamespaces} list is empty, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLNamespaces::hasURI(const std::string& uri) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether an XML
   * Namespace with the given URI is contained in this {@link XMLNamespaces} list.
   * <p>
   * @param uri a string, the uri for the namespace
   * <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in
   * this {@link XMLNamespaces} list, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLNamespaces::hasPrefix(const std::string& prefix) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether an XML
   * Namespace with the given prefix is contained in this {@link XMLNamespaces}
   * list.
   * <p>
   * @param prefix a string, the prefix for the namespace
   * <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in
   * this {@link XMLNamespaces} list, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLNamespaces::hasNS(const std::string& uri, const std::string& prefix) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether an XML
   * Namespace with the given URI and prefix pair is contained in this
   * {@link XMLNamespaces} list.
   * <p>
   * @param uri a string, the URI for the namespace
   * @param prefix a string, the prefix for the namespace
   * <p>
   * @return <code>true</code> if an XML Namespace with the given uri/prefix pair is
   * contained in this {@link XMLNamespaces} list, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLNamespaces::removeDefault "
  /**
   * Removes the default XML namespace.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) XMLToken "
/** 
 * Representation of a token in an XML stream.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 */
"

%javamethodmodifiers XMLToken::XMLToken "
  /**
   * Creates a new empty {@link XMLToken}.
   */
 public";


%javamethodmodifiers XMLToken::XMLToken(  const XMLTriple&      triple , const XMLAttributes&  attributes , const XMLNamespaces&  namespaces , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
  /**
   * Creates a start element {@link XMLToken} with the given set of attributes and
   * namespace declarations.
   * <p>
   * @param triple {@link XMLTriple}.
   * @param attributes {@link XMLAttributes}, the attributes to set.
   * @param namespaces {@link XMLNamespaces}, the namespaces to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::XMLToken(  const XMLTriple&      triple , const XMLAttributes&  attributes , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
  /**
   * Creates a start element {@link XMLToken} with the given set of attributes.
   * <p>
   * @param triple {@link XMLTriple}.
   * @param attributes {@link XMLAttributes}, the attributes to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::XMLToken(  const XMLTriple&    triple , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
  /**
   * Creates an end element {@link XMLToken}.
   * <p>
   * @param triple {@link XMLTriple}.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::XMLToken(  const std::string&  chars , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
  /**
   * Creates a text {@link XMLToken}.
   * <p>
   * @param chars a string, the text to be added to the {@link XMLToken}
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::XMLToken(const XMLToken& orig) "
  /**
   * Copy constructor; creates a copy of this {@link XMLToken}.
   */
 public";


%javamethodmodifiers XMLToken::clone() const "
  /**
   * Creates and returns a deep copy of this {@link XMLToken}.
   * <p>
   * @return a (deep) copy of this {@link XMLToken} set.
   */
 public";


%javamethodmodifiers XMLToken::getAttributes() const "
  /**
   * Returns the attributes of this element.
   * <p>
   * @return the {@link XMLAttributes} of this XML element.
   */
 public";


%javamethodmodifiers XMLToken::setAttributes(const XMLAttributes& attributes) "
  /**
   * Sets an {@link XMLAttributes} to this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param attributes {@link XMLAttributes} to be set to this {@link XMLToken}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note This function replaces the existing {@link XMLAttributes} with the new one.
   */
 public";


%javamethodmodifiers XMLToken::addAttr(  const std::string& name , const std::string& value , const std::string& namespaceURI = "" , const std::string& prefix = "") "
  /**
   * Adds an attribute to the attribute set in this {@link XMLToken} optionally 
   * with a prefix and URI defining a namespace.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param value a string, the value of the attribute.
   * @param namespaceURI a string, the namespace URI of the attribute.
   * @param prefix a string, the prefix of the namespace
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <p>
   * @note if local name with the same namespace URI already exists in the
   * attribute set, its value and prefix will be replaced.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::addAttr( const XMLTriple& triple, const std::string& value) "
  /**
   * Adds an attribute with the given {@link XMLTriple}/value pair to the attribute set
   * in this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @note if local name with the same namespace URI already exists in the 
   * attribute set, its value and prefix will be replaced.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * @param value a string, the value of the attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   */
 public";


%javamethodmodifiers XMLToken::removeAttr(int n) "
  /**
   * Removes an attribute with the given index from the attribute set in
   * this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param n an integer the index of the resource to be deleted
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLToken::removeAttr(const std::string& name, const std::string& uri = "") "
  /**
   * Removes an attribute with the given local name and namespace URI from 
   * the attribute set in this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param name   a string, the local name of the attribute.
   * @param uri    a string, the namespace URI of the attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLToken::removeAttr(const XMLTriple& triple) "
  /**
   * Removes an attribute with the given {@link XMLTriple} from the attribute set 
   * in this {@link XMLToken}.  
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLToken::clearAttributes "
  /**
   * Clears (deletes) all attributes in this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   */
 public";


%javamethodmodifiers XMLToken::getAttrIndex(const std::string& name, const std::string& uri="") const "
  /**
   * Return the index of an attribute with the given local name and namespace URI.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   * <p>
   * @return the index of an attribute with the given local name and namespace URI, 
   * or <code>-1</code> if not present.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::getAttrIndex(const XMLTriple& triple) const "
  /**
   * Return the index of an attribute with the given {@link XMLTriple}.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute for which 
   *        the index is required.
   * <p>
   * @return the index of an attribute with the given {@link XMLTriple}, or <code>-1</code> if not present.
   */
 public";


%javamethodmodifiers XMLToken::getAttributesLength() const "
  /**
   * Return the number of attributes in the attributes set.
   * <p>
   * @return the number of attributes in the attributes set in this {@link XMLToken}.
   */
 public";


%javamethodmodifiers XMLToken::getAttrName(int index) const "
  /**
   * Return the local name of an attribute in the attributes set in this 
   * {@link XMLToken} (by position).
   * <p>
   * @param index an integer, the position of the attribute whose local name 
   * is required.
   * <p>
   * @return the local name of an attribute in this list (by position).  
   * <p>
   * @note If index
   * is out of range, an empty string will be returned.  Use
   * {@link XMLToken#hasAttr(int index)}
   * to test for the attribute existence.
   */
 public";


%javamethodmodifiers XMLToken::getAttrPrefix(int index) const "
  /**
   * Return the prefix of an attribute in the attribute set in this 
   * {@link XMLToken} (by position).
   * <p>
   * @param index an integer, the position of the attribute whose prefix is 
   * required.
   * <p>
   * @return the namespace prefix of an attribute in the attribute set
   * (by position).  
   * <p>
   * @note If index is out of range, an empty string will be returned. Use
   * {@link XMLToken#hasAttr(int index)} to test
   * for the attribute existence.
   */
 public";


%javamethodmodifiers XMLToken::getAttrPrefixedName(int index) const "
  /**
   * Return the prefixed name of an attribute in the attribute set in this 
   * {@link XMLToken} (by position).
   * <p>
   * @param index an integer, the position of the attribute whose prefixed 
   * name is required.
   * <p>
   * @return the prefixed name of an attribute in the attribute set 
   * (by position).  
   * <p>
   * @note If index is out of range, an empty string will be returned.  Use
   * {@link XMLToken#hasAttr(int index)} to test
   * for attribute existence.
   */
 public";


%javamethodmodifiers XMLToken::getAttrURI(int index) const "
  /**
   * Return the namespace URI of an attribute in the attribute set in this 
   * {@link XMLToken} (by position).
   * <p>
   * @param index an integer, the position of the attribute whose namespace 
   * URI is required.
   * <p>
   * @return the namespace URI of an attribute in the attribute set (by position).
   * <p>
   * @note If index is out of range, an empty string will be returned.  Use
   * {@link XMLToken#hasAttr(int index)} to test
   * for attribute existence.
   */
 public";


%javamethodmodifiers XMLToken::getAttrValue(int index) const "
  /**
   * Return the value of an attribute in the attribute set in this {@link XMLToken}  
   * (by position).
   * <p>
   * @param index an integer, the position of the attribute whose value is 
   * required.
   * <p>
   * @return the value of an attribute in the attribute set (by position).  
   * <p>
   * @note If index is out of range, an empty string will be returned. Use
   * {@link XMLToken#hasAttr(int index)} to test
   * for attribute existence.
   */
 public";


%javamethodmodifiers XMLToken::getAttrValue(const std::string name, const std::string uri="") const "
  /**
   * Return a value of an attribute with the given local name and namespace URI.
   * <p>
   * @param name a string, the local name of the attribute whose value is required.
   * @param uri  a string, the namespace URI of the attribute.
   * <p>
   * @return The attribute value as a string.  
   * <p>
   * @note If an attribute with the 
   * given local name and namespace URI does not exist, an empty string will be 
   * returned.  
   * Use {@link XMLToken#hasAttr(String name, String uri)}
   * to test for attribute existence.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::getAttrValue(const XMLTriple& triple) const "
  /**
   * Return a value of an attribute with the given {@link XMLTriple}.
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute whose 
   *        value is required.
   * <p>
   * @return The attribute value as a string.  
   * <p>
   * @note If an attribute with the
   * given {@link XMLTriple} does not exist, an empty string will be returned.  
   * Use {@link XMLToken#hasAttr(XMLTriple triple)}
   * to test for attribute existence.
   */
 public";


%javamethodmodifiers XMLToken::hasAttr(int index) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether
   * an attribute with the given index exists in the attribute set in this 
   * {@link XMLToken}.
   * <p>
   * @param index an integer, the position of the attribute.
   * <p>
   * @return <code>true</code> if an attribute with the given index exists in the attribute 
   * set in this {@link XMLToken}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::hasAttr(const std::string name, const std::string uri="") const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether
   * an attribute with the given local name and namespace URI exists 
   * in the attribute set in this {@link XMLToken}.
   * <p>
   * @param name a string, the local name of the attribute.
   * @param uri  a string, the namespace URI of the attribute.
   * <p>
   * @return <code>true</code> if an attribute with the given local name and namespace 
   * URI exists in the attribute set in this {@link XMLToken}, <code>false</code> otherwise.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::hasAttr(const XMLTriple& triple) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether
   * an attribute with the given XML triple exists in the attribute set in 
   * this {@link XMLToken} 
   * <p>
   * @param triple an {@link XMLTriple}, the XML triple of the attribute 
   * <p>
   * @return <code>true</code> if an attribute with the given XML triple exists
   * in the attribute set in this {@link XMLToken}, <code>false</code> otherwise.
   * <p>
   */
 public";


%javamethodmodifiers XMLToken::isAttributesEmpty() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * the attribute set in this {@link XMLToken} set is empty.
   * <p>
   * @return <code>true</code> if the attribute set in this {@link XMLToken} is empty, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::getNamespaces() const "
  /**
   * Returns the XML namespace declarations for this XML element.
   * <p>
   * @return the XML namespace declarations for this XML element.
   */
 public";


%javamethodmodifiers XMLToken::setNamespaces(const XMLNamespaces& namespaces) "
  /**
   * Sets an XMLnamespaces to this XML element.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param namespaces {@link XMLNamespaces} to be set to this {@link XMLToken}.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <p>
   * @note This function replaces the existing {@link XMLNamespaces} with the new one.
   */
 public";


%javamethodmodifiers XMLToken::addNamespace(const std::string& uri, const std::string& prefix = "") "
  /**
   * Appends an XML namespace prefix and URI pair to this {@link XMLToken}.
   * If there is an XML namespace with the given prefix in this {@link XMLToken}, 
   * then the existing XML namespace will be overwritten by the new one.
   * <p>
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::removeNamespace(int index) "
  /**
   * Removes an XML Namespace stored in the given position of the {@link XMLNamespaces}
   * of this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param index an integer, position of the removed namespace.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLToken::removeNamespace(const std::string& prefix) "
  /**
   * Removes an XML Namespace with the given prefix.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @param prefix a string, prefix of the required namespace.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INDEX_EXCEEDS_SIZE LIBSBML_INDEX_EXCEEDS_SIZE }
   */
 public";


%javamethodmodifiers XMLToken::clearNamespaces "
  /**
   * Clears (deletes) all XML namespace declarations in the {@link XMLNamespaces} of
   * this {@link XMLToken}.
   * Nothing will be done if this {@link XMLToken} is not a start element.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   */
 public";


%javamethodmodifiers XMLToken::getNamespaceIndex(const std::string& uri) const "
  /**
   * Look up the index of an XML namespace declaration by URI.
   * <p>
   * @param uri a string, uri of the required namespace.
   * <p>
   * @return the index of the given declaration, or <code>-1</code> if not present.
   */
 public";


%javamethodmodifiers XMLToken::getNamespaceIndexByPrefix(const std::string& prefix) const "
  /**
   * Look up the index of an XML namespace declaration by prefix.
   * <p>
   * @param prefix a string, prefix of the required namespace.
   * <p>
   * @return the index of the given declaration, or <code>-1</code> if not present.
   */
 public";


%javamethodmodifiers XMLToken::getNamespacesLength() const "
  /**
   * Returns the number of XML namespaces stored in the {@link XMLNamespaces} 
   * of this {@link XMLToken}.
   * <p>
   * @return the number of namespaces in this list.
   */
 public";


%javamethodmodifiers XMLToken::getNamespacePrefix(int index) const "
  /**
   * Look up the prefix of an XML namespace declaration by position.
   * <p>
   * Callers should use getNamespacesLength() to find out how many 
   * namespaces are stored in the {@link XMLNamespaces}.
   * <p>
   * @param index an integer, position of the required prefix.
   * <p>
   * @return the prefix of an XML namespace declaration in the {@link XMLNamespaces} 
   * (by position).  
   * <p>
   * @note If index is out of range, an empty string will be
   * returned.
   * <p>
   * @see #getNamespacesLength()
   */
 public";


%javamethodmodifiers XMLToken::getNamespacePrefix(const std::string& uri) const "
  /**
   * Look up the prefix of an XML namespace declaration by its URI.
   * <p>
   * @param uri a string, the URI of the prefix being sought
   * <p>
   * @return the prefix of an XML namespace declaration given its URI.  
   * <p>
   * @note If <code>uri</code> does not exist, an empty string will be returned.
   */
 public";


%javamethodmodifiers XMLToken::getNamespaceURI(int index) const "
  /**
   * Look up the URI of an XML namespace declaration by its position.
   * <p>
   * @param index an integer, position of the required URI.
   * <p>
   * @return the URI of an XML namespace declaration in the {@link XMLNamespaces}
   * (by position).  
   * <p>
   * @note If <code>index</code> is out of range, an empty string will be
   * returned.
   * <p>
   * @see #getNamespacesLength()
   */
 public";


%javamethodmodifiers XMLToken::getNamespaceURI(const std::string& prefix = "") const "
  /**
   * Look up the URI of an XML namespace declaration by its prefix.
   * <p>
   * @param prefix a string, the prefix of the required URI
   * <p>
   * @return the URI of an XML namespace declaration given its prefix.  
   * <p>
   * @note If <code>prefix</code> does not exist, an empty string will be returned.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLToken::isNamespacesEmpty() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * the {@link XMLNamespaces} of this {@link XMLToken} is empty.
   * <p>
   * @return <code>true</code> if the {@link XMLNamespaces} of this {@link XMLToken} is empty, 
   * <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::hasNamespaceURI(const std::string& uri) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * an XML Namespace with the given URI is contained in the {@link XMLNamespaces} of
   * this {@link XMLToken}.
   * <p>
   * @param uri a string, the uri for the namespace
   * <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in the
   * {@link XMLNamespaces} of this {@link XMLToken},  <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::hasNamespacePrefix(const std::string& prefix) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * an XML Namespace with the given prefix is contained in the {@link XMLNamespaces} of
   * this {@link XMLToken}.
   * <p>
   * @param prefix a string, the prefix for the namespace
   * <p>
   * @return <code>true</code> if an XML Namespace with the given URI is contained in the
   * {@link XMLNamespaces} of this {@link XMLToken}, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::hasNamespaceNS(const std::string& uri, const std::string& prefix) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * an XML Namespace with the given uri/prefix pair is contained in the 
   * {@link XMLNamespaces} ofthis {@link XMLToken}.
   * <p>
   * @param uri a string, the uri for the namespace
   * @param prefix a string, the prefix for the namespace
   * <p>
   * @return <code>true</code> if an XML Namespace with the given uri/prefix pair is 
   * contained in the {@link XMLNamespaces} of this {@link XMLToken},  <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::setTriple(const XMLTriple& triple) "
  /**
   * Sets the XMLTripe (name, uri and prefix) of this XML element.
   * Nothing will be done if this XML element is a text node.
   * <p>
   * @param triple {@link XMLTriple} to be added to this XML element.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers XMLToken::getName() const "
  /**
   * Returns the (unqualified) name of this XML element.
   * <p>
   * @return the (unqualified) name of this XML element.
   */
 public";


%javamethodmodifiers XMLToken::getPrefix() const "
  /**
   * Returns the namespace prefix of this XML element.
   * <p>
   * @return the namespace prefix of this XML element.  
   * <p>
   * @note If no prefix
   * exists, an empty string will be return.
   */
 public";


%javamethodmodifiers XMLToken::getURI() const "
  /**
   * Returns the namespace URI of this XML element.
   * <p>
   * @return the namespace URI of this XML element.
   */
 public";


%javamethodmodifiers XMLToken::getCharacters() const "
  /**
   * Returns the text of this element.
   * <p>
   * @return the characters of this XML text.
   */
 public";


%javamethodmodifiers XMLToken::append(const std::string& chars) "
  /**
   * Appends characters to this XML text content.
   * <p>
   * @param chars string, characters to append
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   */
 public";


%javamethodmodifiers XMLToken::getColumn() const "
  /**
   * Returns the column at which this {@link XMLToken} occurred in the input
   * document or data stream.
   * <p>
   * @return the column at which this {@link XMLToken} occurred.
   */
 public";


%javamethodmodifiers XMLToken::getLine() const "
  /**
   * Returns the line at which this {@link XMLToken} occurred in the input document
   * or data stream.
   * <p>
   * @return the line at which this {@link XMLToken} occurred.
   */
 public";


%javamethodmodifiers XMLToken::isElement() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLToken} is an XML element.
   * <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML element, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::isEnd() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLToken} is an XML end element.
   * <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML end element, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::isEndFor(const XMLToken& element) const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLToken} is an XML end element for the given start element.
   * <p>
   * @param element {@link XMLToken}, element for which query is made.
   * <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML end element for the given
   * {@link XMLToken} start element, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::isEOF() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLToken} is an end of file marker.
   * <p>
   * @return <code>true</code> if this {@link XMLToken} is an end of file (input) marker, <code>false</code>
   * otherwise.
   */
 public";


%javamethodmodifiers XMLToken::isStart() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLToken} is an XML start element.
   * <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML start element, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::isText() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLToken} is an XML text element.
   * <p>
   * @return <code>true</code> if this {@link XMLToken} is an XML text element, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers XMLToken::setEnd "
  /**
   * Declares this XML start element is also an end element.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   */
 public";


%javamethodmodifiers XMLToken::setEOF "
  /**
   * Declares this {@link XMLToken} is an end-of-file (input) marker.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   */
 public";


%javamethodmodifiers XMLToken::unsetEnd "
  /**
   * Declares this XML start/end element is no longer an end element.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   */
 public";


%javamethodmodifiers XMLToken::write(XMLOutputStream& stream) const "
  /**
   * Writes this {@link XMLToken} to stream.
   * <p>
   * @param stream XMLOutputStream, stream to which this {@link XMLToken}
   * is to be written.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLToken::toString "
  /**
   * Prints a string representation of the underlying token stream, for
   * debugging purposes.
   */
 public";


%typemap(javaimports) XMLNode "
/** 
 * Representation of a node in an XML document tree.
 * <p>
 * Beginning with version 3.0.0, libSBML implements an XML abstraction
 * layer.  This layer presents a uniform XML interface to calling programs
 * regardless of which underlying XML parser libSBML has actually been
 * configured to use.  The basic data object in the XML abstraction is a
 * <em>node</em>, represented by {@link XMLNode}.
 * <p>
 * An {@link XMLNode} can contain any number of children.  Each child is another
 * {@link XMLNode}, thereby forming a tree.  The methods {@link XMLNode#getNumChildren()}
 * and {@link XMLNode#getChild(long n)} can be used to access the tree
 * structure starting from a given node.
 * <p>
 * Each {@link XMLNode} is subclassed from {@link XMLToken}, and thus has the same methods
 * available as {@link XMLToken}.  These methods include {@link XMLToken#getNamespaces()},
 * {@link XMLToken#getPrefix()}, {@link XMLToken#getName()}, {@link XMLToken#getURI()}, and
 * {@link XMLToken#getAttributes()}.
 * <p>
 * <h2>Conversion between an XML string and an {@link XMLNode}</h2>
 * <p>
 * LibSBML provides the following utility functions for converting an XML
 * string (e.g., <code>&lt;annotation&gt;...&lt;/annotation&gt;</code>)
 * to/from an {@link XMLNode} object.
 * <ul>
 * <li> {@link XMLNode#toXMLString()} returns a string representation of the {@link XMLNode} object. 
 * <p>
 * <li> {@link XMLNode#convertXMLNodeToString(XMLNode node)}
 * (static function) returns a string representation 
 * of the given {@link XMLNode} object.
 * <p>
 * <li> {@link XMLNode#convertStringToXMLNode(String xml)}
 * (static function) returns an {@link XMLNode} object converted 
 * from the given XML string.
 * </ul>
 * <p>
 * The returned {@link XMLNode} object by {@link XMLNode#convertStringToXMLNode(String xml)}
 * is a dummy root (container) {@link XMLNode} if the given XML string has two or
 * more top-level elements (e.g.,
 * &quot;<code>&lt;p&gt;...&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;</code>&quot;). In the
 * dummy root node, each top-level element in the given XML string is
 * contained as a child {@link XMLNode}. {@link XMLToken#isEOF()} can be used to identify
 * if the returned {@link XMLNode} object is a dummy node or not.  Here is an
 * example: <div class=\'fragment\'><pre>
// Checks if the returned {@link XMLNode} object is a dummy root node:

String str = \'...\';
{@link XMLNode} xn = {@link XMLNode}.convertStringToXMLNode(str);
if ( xn == null )
{
  // returned value is null (error)
  ...
}
else if ( xn.isEOF() )
{
  // root node is a dummy node
  for ( int i = 0; i &lt; xn.getNumChildren(); i++ )
  {
    // access to each child node of the dummy node.
    {@link XMLNode} xnChild = xn.getChild(i);
    ...
  }
}
else
{
  // root node is NOT a dummy node
  ...
}
</pre></div>
 * <p>
 */
"

%javamethodmodifiers XMLNode::XMLNode "
  /**
   * Creates a new empty {@link XMLNode} with no children.
   */
 public";


%javamethodmodifiers XMLNode::XMLNode(const XMLToken& token) "
  /**
   * Creates a new {@link XMLNode} by copying token.
   * <p>
   * @param token {@link XMLToken} to be copied to {@link XMLNode}
   */
 public";


%javamethodmodifiers XMLNode::XMLNode(  const XMLTriple&     triple , const XMLAttributes& attributes , const XMLNamespaces& namespaces , const unsigned int   line   = 0 , const unsigned int   column = 0 ) "
  /**
   * Creates a new start element {@link XMLNode} with the given set of attributes and
   * namespace declarations.
   * <p>
   * @param triple {@link XMLTriple}.
   * @param attributes {@link XMLAttributes}, the attributes to set.
   * @param namespaces {@link XMLNamespaces}, the namespaces to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLNode::XMLNode(  const XMLTriple&      triple , const XMLAttributes&  attributes , const unsigned int    line   = 0 , const unsigned int    column = 0 ) "
  /**
   * Creates a start element {@link XMLNode} with the given set of attributes.
   * <p>
   * @param triple {@link XMLTriple}.
   * @param attributes {@link XMLAttributes}, the attributes to set.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

  */
 public";


%javamethodmodifiers XMLNode::XMLNode(  const XMLTriple&    triple , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
  /**
   * Creates an end element {@link XMLNode}.
   * <p>
   * @param triple {@link XMLTriple}.
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLNode::XMLNode(  const std::string&  chars , const unsigned int  line   = 0 , const unsigned int  column = 0 ) "
  /**
   * Creates a text {@link XMLNode}.
   * <p>
   * @param chars a string, the text to be added to the {@link XMLToken}
   * @param line a long integer, the line number (default = 0).
   * @param column a long integer, the column number (default = 0).
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLNode::XMLNode(XMLInputStream& stream) "
  /**
   * Creates a new {@link XMLNode} by reading XMLTokens from stream.  
   * <p>
   * The stream must be positioned on a start element
   * (<code>stream.peek().isStart() == true</code>) and will be read until
   * the matching end element is found.
   * <p>
   * @param stream XMLInputStream from which {@link XMLNode} is to be created.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLNode::XMLNode(const XMLNode& orig) "
  /**
   * Copy constructor; creates a copy of this {@link XMLNode}.
   * <p>
   * @param orig the {@link XMLNode} instance to copy.
   */
 public";


%javamethodmodifiers XMLNode::clone() const "
  /**
   * Creates and returns a deep copy of this {@link XMLNode}.
   * <p>
   * @return a (deep) copy of this {@link XMLNode}.
   */
 public";


%javamethodmodifiers XMLNode::addChild(const XMLNode& node) "
  /**
   * Adds a copy of <code>node</code> as a child of this {@link XMLNode}.
   * <p>
   * The given <code>node</code> is added at the end of the list of children.
   * <p>
   * @param node the {@link XMLNode} to be added as child.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_XML_OPERATION LIBSBML_INVALID_XML_OPERATION }
   * <p>
   * @note The given node is added at the end of the children list.
   */
 public";


%javamethodmodifiers XMLNode::insertChild(unsigned int n, const XMLNode& node) "
  /**
   * Inserts a copy of the given node as the <code>n</code>th child of this
   * {@link XMLNode}.
   * <p>
   * If the given index <code>n</code> is out of range for this {@link XMLNode} instance,
   * the <code>node</code> is added at the end of the list of children.  Even in
   * that situation, this method does not throw an error.
   * <p>
   * @param n an integer, the index at which the given node is inserted
   * @param node an {@link XMLNode} to be inserted as <code>n</code>th child.
   * <p>
   * @return a reference to the newly-inserted child <code>node</code>
   */
 public";


%javamethodmodifiers XMLNode::removeChild(unsigned int n) "
  /**
   * Removes the <code>n</code>th child of this {@link XMLNode} and returns the
   * removed node.
   * <p>
   * It is important to keep in mind that a given {@link XMLNode} may have more
   * than one child.  Calling this method erases all existing references to
   * child nodes <em>after</em> the given position <code>n</code>.  If the index <code>n</code> is
   * greater than the number of child nodes in this {@link XMLNode}, this method
   * takes no action (and returns <code>null</code>).
   * <p>
   * @param n an integer, the index of the node to be removed
   * <p>
   * @return the removed child, or <code>null</code> if <code>n</code> is greater than the number
   * of children in this node
   * <p>
   * @note The caller owns the returned node and is responsible for deleting it.
   */
 public";


%javamethodmodifiers XMLNode::removeChildren "
  /**
   * Removes all children from this node.
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers XMLNode::getChild(unsigned int n) "
  /**
   * Returns the <code>n</code>th child of this {@link XMLNode}.
   * <p>
   * If the index <code>n</code> is greater than the number of child nodes, or it is
   * 0 or less, this method returns an empty node.
   * <p>
   * @param n the index of the node to return
   * <p>
   * @return the  <code>n</code>th child of this {@link XMLNode}.
   */
 public";


%javamethodmodifiers XMLNode::getChild "
  /**
   * Returns the  <code>n</code>th child of this {@link XMLNode}.
   * <p>
   * If the index <code>n</code> is greater than the number of child nodes, or it is
   * 0 or less, this method returns an empty node.
   * <p>
   * @param n an integer, the index of the node to return
   * <p>
   * @return the  <code>n</code>th child of this {@link XMLNode}.
   */
 public";


%javamethodmodifiers XMLNode::getChild(const std::string&  name) "
	/**
	 * Returns the first child of this {@link XMLNode} with the corresponding name.
	 * <p>
	 * If no child with corrsponding name can be found, 
	 * this method returns an empty node.
	 * <p>
	 * @param name the name of the node to return
	 * <p>
	 * @return the first child of this {@link XMLNode} with given name.
	 */
 public";


%javamethodmodifiers XMLNode::getChild(const std::string&  name) const "
	/**
	 * Returns the first child of this {@link XMLNode} with the corresponding name.
	 * <p>
	 * If no child with corrsponding name can be found, 
	 * this method returns an empty node.
	 * <p>
	 * @param name the name of the node to return
	 * <p>
	 * @return the first child of this {@link XMLNode} with given name.
	 */
 public";


%javamethodmodifiers XMLNode::getIndex(const std::string& name) const "
	/**
	 * Return the index of the first child of this {@link XMLNode} with the given name.
	 * <p>
	 * <p>
	 * @param name a string, the name of the child for which the 
	 * index is required.
	 * <p>
	 * @return the index of the first child of this {@link XMLNode} with the given name, or -1 if not present.
	 */
 public";


%javamethodmodifiers XMLNode::hasChild(const std::string& name) const "
	/**
	 * Return a boolean indicating whether this {@link XMLNode} has a child with the given name.
	 * <p>
	 * <p>
	 * @param name a string, the name of the child to be checked.
	 * <p>
	 * @return boolean indicating whether this {@link XMLNode} has a child with the given name.
	 */
 public";


%javamethodmodifiers XMLNode::equals(const XMLNode& other) const "
	/**
	 * Compare this {@link XMLNode} against another {@link XMLNode} returning true if both nodes
	 * represent the same XML tree, or false otherwise.
	 * <p>
	 * <p>
	 * @param other another {@link XMLNode} to compare against
	 * <p>
	 * @return boolean indicating whether this {@link XMLNode} represents the same XML tree as another.
	 */
 public";


%javamethodmodifiers XMLNode::getNumChildren() const "
  /**
   * Returns the number of children for this {@link XMLNode}.
   * <p>
   * @return the number of children for this {@link XMLNode}.
   */
 public";


%javamethodmodifiers XMLNode::write(XMLOutputStream& stream) const "
  /**
   * Writes this {@link XMLNode} and its children to stream.
   * <p>
   * @param stream XMLOutputStream, stream to which this {@link XMLNode}
   * is to be written.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLNode::toXMLString() const "
  /**
   * Returns a string representation of this {@link XMLNode}. 
   * <p>
   * @return a string derived from this {@link XMLNode}.
   */
 public";


%javamethodmodifiers XMLNode::convertXMLNodeToString(const XMLNode* node) "
  /**
   * Returns a string representation of a given {@link XMLNode}. 
   * <p>
   * @param node the {@link XMLNode} to be represented as a string
   * <p>
   * @return a string-form representation of <code>node</code>
   */
 public";


%javamethodmodifiers XMLNode::convertStringToXMLNode(const std::string& xmlstr, const XMLNamespaces* xmlns = NULL) "
  /**
   * Returns an {@link XMLNode} which is derived from a string containing XML
   * content.
   * <p>
   * The XML namespace must be defined using argument <code>xmlns</code> if the
   * corresponding XML namespace attribute is not part of the string of the
   * first argument.
   * <p>
   * @param xmlstr string to be converted to a XML node.
   * @param xmlns {@link XMLNamespaces} the namespaces to set (default value is <code>null</code>).
   * <p>
   * @note The caller owns the returned {@link XMLNode} and is reponsible for
   * deleting it.  The returned {@link XMLNode} object is a dummy root (container)
   * {@link XMLNode} if the top-level element in the given XML string is NOT
   * <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code>,
   * <code>&lt;annotation&gt;</code>, or <code>&lt;notes&gt;</code>.  In
   * the dummy root node, each top-level element in the given XML string is
   * contained as a child {@link XMLNode}. {@link XMLToken#isEOF()} can be used to
   * identify if the returned {@link XMLNode} object is a dummy node.
   * <p>
   * @return a {@link XMLNode} which is converted from string <code>xmlstr</code>.  If the
   * conversion failed, this method returns <code>null.</code>
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%typemap(javaimports) XMLTriple "
/** 
 * Representation of a qualified XML name.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * A \'triple\' in the libSBML XML layer encapsulates the notion of qualified
 * name, meaning an element name or an attribute name with an optional
 * namespace qualifier.  An {@link XMLTriple} instance carries up to three data items:
 * <p>
 * <ul>
 * <p>
 * <li> The name of the attribute or element; that is, the attribute name
 * as it appears in an XML document or data stream;
 * <p>
 * <li> The XML namespace prefix (if any) of the attribute.  For example,
 * in the following fragment of XML, the namespace prefix is the string
 * <code>mysim</code> and it appears on both the element
 * <code>someelement</code> and the attribute <code>attribA</code>.  When
 * both the element and the attribute are stored as {@link XMLTriple} objects,
 * their <i>prefix</i> is <code>mysim</code>.
 * <div class=\'fragment\'><pre>
&lt;mysim:someelement mysim:attribA=\'value\' /&gt;
</pre></div>
 * <p>
 * <li> The XML namespace URI with which the prefix is associated.  In
 * XML, every namespace used must be declared and mapped to a URI.
 * <p>
 * </ul>
 * <p>
 * {@link XMLTriple} objects are the lowest-level data item in the XML layer
 * of libSBML.  Other objects such as {@link XMLToken} make use of {@link XMLTriple}
 * objects.
 */
"

%javamethodmodifiers XMLTriple::XMLTriple "
  /**
   * Creates a new, empty {@link XMLTriple}.
   */
 public";


%javamethodmodifiers XMLTriple::XMLTriple(  const std::string&  name , const std::string&  uri , const std::string&  prefix ) "
  /**
   * Creates a new {@link XMLTriple} with the given <code>name</code>, <code>uri</code> and and 
   * <code>prefix</code>.
   * <p>
   * @param name a string, name for the {@link XMLTriple}.
   * @param uri a string, URI of the {@link XMLTriple}.
   * @param prefix a string, prefix for the URI of the {@link XMLTriple},
   */
 public";


%javamethodmodifiers XMLTriple::XMLTriple(const std::string& triplet, const char sepchar = ' ') "
  /**
   * Creates a new {@link XMLTriple} by splitting the given <code>triplet</code> on the
   * separator character <code>sepchar</code>.
   * <p>
   * Triplet may be in one of the following formats:
   * <ul>
   * <li> name
   * <li> uri sepchar name
   * <li> uri sepchar name sepchar prefix
   * </ul>
   * @param triplet a string representing the triplet as above
   * @param sepchar a character, the sepchar used in the triplet
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLTriple::XMLTriple(const XMLTriple& orig) "
  /**
   * Copy constructor; creates a copy of this {@link XMLTriple} set.
   */
 public";


%javamethodmodifiers XMLTriple::clone() const "
  /**
   * Creates and returns a deep copy of this {@link XMLTriple} set.
   * <p>
   * @return a (deep) copy of this {@link XMLTriple} set.
   */
 public";


%javamethodmodifiers XMLTriple::getName() const "
  /**
   * Returns the <em>name</em> portion of this {@link XMLTriple}.
   * <p>
   * @return a string, the name from this {@link XMLTriple}.
   */
 public";


%javamethodmodifiers XMLTriple::getPrefix() const "
  /**
   * Returns the <em>prefix</em> portion of this {@link XMLTriple}.
   * <p>
   * @return a string, the <em>prefix</em> portion of this {@link XMLTriple}.
   */
 public";


%javamethodmodifiers XMLTriple::getURI() const "
  /**
   * Returns the <em>URI</em> portion of this {@link XMLTriple}.
   * <p>
   * @return URI a string, the <em>prefix</em> portion of this {@link XMLTriple}.
   */
 public";


%javamethodmodifiers XMLTriple::getPrefixedName() const "
  /**
   * Returns the prefixed name from this {@link XMLTriple}.
   * <p>
   * @return a string, the prefixed name from this {@link XMLTriple}.
   */
 public";


%javamethodmodifiers XMLTriple::isEmpty() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this {@link XMLTriple} is empty.
   * <p>
   * @return <code>true</code> if this {@link XMLTriple} is empty, <code>false</code> otherwise.
   */
 public";


%typemap(javaimports) XMLOutputStream "
/** 
 * @deprecated libSBML internal 
 */
"

%javamethodmodifiers XMLOutputStream::XMLOutputStream(  std::ostream&       stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&   programName  = "" , const std::string&  programVersion = "") "
  /**
   * Creates a new XMLOutputStream that wraps stream.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLOutputStream::endElement(const std::string& name, const std::string& prefix = "") "
  /**
   * Writes the given XML end element name to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::endElement(const XMLTriple& triple) "
  /**
   * Writes the given XML end element \'prefix:name\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::setAutoIndent(bool indent) "
  /**
   * Turns automatic indentation on or off for this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::startElement(const std::string& name, const std::string& prefix = "") "
  /**
   * Writes the given XML start element name to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::startElement(const XMLTriple& triple) "
  /**
   * Writes the given XML start element \'prefix:name\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::startEndElement(const std::string& name, const std::string& prefix = "") "
  /**
   * Writes the given XML start and end element name to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::startEndElement(const XMLTriple& triple) "
  /**
   * Writes the given XML start and end element \'prefix:name\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& value) "
  /**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const std::string& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const std::string& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const char* value) "
  /**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const char* value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const char* value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const bool& value) "
  /**
   * Writes the given attribute, name=\'true\' or name=\'false\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string &prefix, const bool& value) "
  /**
   * Writes the given attribute, prefix:name=\'true\' or prefix:name=\'false\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const bool& value) "
  /**
   * Writes the given attribute, prefix:name=\'true\' or prefix:name=\'false\'
   * to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const double& value) "
  /**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const double& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const double& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const long& value) "
  /**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const long& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const long& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const int& value) "
  /**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const int& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const int& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const unsigned int& value) "
  /**
   * Writes the given attribute, name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const std::string& name, const std::string& prefix, const unsigned int& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeAttribute(const XMLTriple& triple, const unsigned int& value) "
  /**
   * Writes the given attribute, prefix:name=\'value\' to this
   * XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::writeXMLDecl "
  /**
   * Writes the XML declaration:
   * <?xml version=\'1.0\' encoding=\'...\'?>
   */
 public";


%javamethodmodifiers XMLOutputStream::writeComment(const std::string& programName, const std::string& programVersion) "
  /**
   * Writes an XML comment:
   * <?xml version=\'1.0\' encoding=\'...\'?>
   */
 public";


%javamethodmodifiers XMLOutputStream::downIndent "
  /**
   * Decreases the indentation level for this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::upIndent "
  /**
   * Increases the indentation level for this XMLOutputStream.
   */
 public";


%javamethodmodifiers XMLOutputStream::getStringStream "
  /**
   * Increases the indentation level for this XMLOutputStream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::XMLOutputStream "
  /**
   * Unitialized XMLOutputStreams may only be created by subclasses.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeChars(const std::string& name) "
  /**
   * Outputs the given characters to the underlying stream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeIndent(bool isEnd = false) "
  /**
   * Outputs indentation whitespace.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeName(const std::string& name, const std::string& prefix = "") "
  /**
   * Outputs name.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeName(const XMLTriple& triple) "
  /**
   * Outputs prefix:name.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const std::string& value) "
  /**
   * Outputs value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const char* value) "
  /**
   * Outputs value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const bool& value) "
  /**
   * Outputs \'true\' or \'false\' in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const double& value) "
  /**
   * Outputs the double value in quotes, or \'INF\', \'-INF\', or \'NaN\'.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const long& value) "
  /**
   * Outputs the long value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const int& value) "
  /**
   * Outputs the int value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::writeValue(const unsigned int& value) "
  /**
   * Outputs the int value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::setStringStream "
  /**
   * Outputs the int value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStream::unsetStringStream "
  /**
   * Outputs the int value in quotes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStringStream::XMLOutputStringStream(  std::ostringstream& stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
  /**
   * Creates a new XMLOutputStream that wraps stream.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputStringStream::getString "
  /**
   * Creates a new XMLOutputStream that wraps stream.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLOutputFileStream::XMLOutputFileStream(  std::ofstream&      stream , const std::string&  encoding     = "UTF-8" , bool                writeXMLDecl = true , const std::string&  programName  = "" , const std::string&  programVersion = "") "
  /**
   * Creates a new XMLOutputStream that wraps stream.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) XMLInputStream "
/** 
 * @deprecated libSBML internal 
 */
"

%javamethodmodifiers XMLInputStream::XMLInputStream(  const char*        content , bool               isFile   = true , const std::string  library  = "" , XMLErrorLog*       errorLog = NULL ) "
  /**
   * Creates a new XMLInputStream.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::getEncoding "
  /**
   * @return the encoding of the XML stream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::getVersion "
  /**
   * @return the version of the XML stream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::getErrorLog "
  /**
   * @return an {@link XMLErrorLog} which can be used to log XML parse errors and
   * other validation errors (and messages).
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::isEOF() const "
  /**
   * @return true if end of file (stream) has been reached, false
   * otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::isError() const "
  /**
   * @return true if a fatal error occurred while reading from this stream.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::isGood() const "
  /**
   * @return true if the stream is in a good state (i.e. isEOF() and
   * isError() are both false), false otherwise.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::next "
  /**
   * Consumes the next {@link XMLToken} and return it.
   * <p>
   * @return the next {@link XMLToken} or EOF (XMLToken.isEOF() == true).
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::peek "
  /**
   * Returns the next {@link XMLToken} without consuming it.  A subsequent call to
   * either peek() or next() will return the same token.
   * <p>
   * @return the next {@link XMLToken} or EOF (XMLToken.isEOF() == true).
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::skipPastEnd(const XMLToken& element) "
  /**
   * Consume zero or more XMLTokens up to and including the corresponding
   * end XML element or EOF.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::skipText "
  /**
   * Consume zero or more XMLTokens up to but not including the next XML
   * element or EOF.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::setErrorLog(XMLErrorLog* log) "
  /**
   * Sets the {@link XMLErrorLog} this stream will use to log errors.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> @link libsbmlConstants#{@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED } {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED } @endlink
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::toString "
  /**
   * Prints a string representation of the underlying token stream, for
   * debugging purposes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::getSBMLNamespaces "
  /**
   * Prints a string representation of the underlying token stream, for
   * debugging purposes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::setSBMLNamespaces(SBMLNamespaces * sbmlns) "
  /**
   * Prints a string representation of the underlying token stream, for
   * debugging purposes.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::XMLInputStream "
  /**
   * Unitialized XMLInputStreams may only be created by subclasses.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLInputStream::queueToken "
  /**
   * Runs mParser until mTokenizer is ready to deliver at least one
   * {@link XMLToken} or a fatal error occurs.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) XMLError "
/** 
 * Representation of errors, warnings and other diagnostics
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * LibSBML can be configured to use any of a number of XML parsers; at the
 * time of this writing, libSBML supports Xerces versions 2.4 through 3.1,
 * Expat version 1.95.x and higher, and libxml2 version 2.6.16 and higher.
 * These parsers each report different status codes for the various
 * exceptions that can occur during XML processing.  The {@link XMLError} object
 * class abstracts away from the particular diagnostics reported by the
 * different parsers and presents a single uniform interface and set of
 * status codes, along with operations for manipulating the error objects.
 * <p>
 * When the libSBML XML parser layer encounters an error in the XML content
 * being processed, or when there is something else wrong (such as an
 * out-of-memory condition), the problems are reported as {@link XMLError} objects.
 * Each {@link XMLError} object instance has an identification number that
 * identifies the nature of the problem.
 * This
 * error identifier is one of the constants listed in the next section below.
 * Applications can use the error identifiers as a means of recognizing the
 * error encountered and changing their behavior if desired.  
 * <p>
 * Integer error codes are useful for software, but not so much for telling
 * humans what happened.  For this reason, {@link XMLError} also provides two text
 * messages describing the nature of the error.  These messages are
 * accessible by means of the methods {@link XMLError#getShortMessage()} and
 * {@link XMLError#getMessage()}.  The method {@link XMLError#getShortMessage()} returns
 * a very brief synopsis of the warning or error condition, whereas
 * {@link XMLError#getMessage()} returns a longer explanation.  These text strings
 * are suitable for displaying to human users.
 * <p>
 * Each {@link XMLError} object also contains a category code; its value may be
 * retrieved using the method {@link XMLError#getCategory()}.  Category values
 * are drawn from a
 * set of constants whose names begin with the characters <code>LIBSBML_CAT_</code>, described below. &nbsp;Categories
 * are used by libSBML to provide more information to calling programs about
 * the nature of a given error.  
 * <p>
 * In addition to category codes, each {@link XMLError} object also has a severity
 * code; its value may be retrieved using the method
 * {@link XMLError#getSeverity()}.  Severity code values are drawn from
 * a
 * set of constants whose names begin with the characters <code>LIBSBML_SEV_</code>,
 * described below. Severity levels range from informational
 * ({@link  libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO}) to
 * fatal errors ({@link  libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL}).
 * <p>
 * Finally, {@link XMLError} objects record the line and column near where the
 * problem occurred in the XML content.  The values can be retrieved using
 * the methods {@link XMLError#getLine()} and {@link XMLError#getColumn()}.  We say \'near
 * where the problem occurred\', because many factors affect how accurate
 * the line/column information ultimately is.  For example, different XML
 * parsers have different conventions for which line and column number they
 * report for a particular problem (which in turn makes a difference when a
 * problem involves an opening XML tag on one line and a closing tag on
 * another line).  In some situations, some parsers report invalid line
 * and/or column numbers altogether.  If this occurs, libSBML sets the line
 * and/or column number in the {@link XMLError} object to the the value of the
 * maximum unsigned long integer representable on the platform where
 * libSBML is running.  (This is equal to the constant named
 * <code>ULONG_MAX</code> in C and C++.)  The probability that a true line
 * or column number in an SBML model would equal this value is vanishingly
 * small; thus, if an application encounters these values in an {@link XMLError}
 * object, it can assume no valid line/column number could be provided by
 * libSBML in that situation.
 * <p>
 * <p>
 * <h3><a class=\'anchor\' 
 * name=\'XMLErrorCode_t\'>Error codes associated with {@link XMLError} objects</a></h3>
 * <p>
 * The error and warning codes returned by the XML layer in libSBML are
 * listed in the table below.  In the libSBML Java language interface,
 * these error identifiers are currently implemented as static integer
 * constants defined in the interface class <code><a
 * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.  This is
 * admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the error
 * identifiers. 
 * <p>
 * <center>
 * <table cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 * <caption>Possible {@link XMLError} error codes.  Depending on the programming
 * language in use, the <em>Enumerator</em> values will be defined either
 * as a value from the enumeration XMLErrorCode_t or as integer constants.
 * To make this table more compact, we have shortened the identifiers for
 * the category and severity codes to their essential parts.  To get the
 * actual names of the constants, prepend <code>LIBSBML_CAT_</code> to the
 * category names and <code>LIBSBML_SEV_</code> to the severity names
 * shown in the two right-hand columns.
 * </caption>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</th>
 *      <th>Meaning</th>
 *      <th width=\'90\'>Category</th>
 *      <th width=\'90\'>Severity</th>
 *  </tr>
 * <tr><td>{@link  libsbmlConstants#XMLUnknownError XMLUnknownError}</td><td>Unrecognized error encountered internally</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLOutOfMemory XMLOutOfMemory}</td> <td>Out of memory</td><td>SYSTEM</td><td>FATAL</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLFileUnreadable XMLFileUnreadable}</td> <td>File unreadable</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLFileUnwritable XMLFileUnwritable}</td> <td>File unwritable</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLFileOperationError XMLFileOperationError}</td><td>Error encountered while attempting file operation</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLNetworkAccessError XMLNetworkAccessError}</td><td>Network access error</td><td>SYSTEM</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#InternalXMLParserError InternalXMLParserError}</td><td>Internal XML parser state error</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link  libsbmlConstants#UnrecognizedXMLParserCode UnrecognizedXMLParserCode}</td><td>XML parser returned an unrecognized error code</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLTranscoderError XMLTranscoderError}</td><td>Character transcoder error</td><td>INTERNAL</td><td>FATAL</td></tr>
 * <tr><td>{@link  libsbmlConstants#MissingXMLDecl MissingXMLDecl}</td><td>Missing XML declaration at beginning of XML input</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#MissingXMLEncoding MissingXMLEncoding}</td><td>Missing encoding attribute in XML declaration</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLDecl BadXMLDecl}</td><td>Invalid or unrecognized XML declaration or XML encoding</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLDOCTYPE BadXMLDOCTYPE}</td><td>Invalid, malformed or unrecognized XML DOCTYPE declaration</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#InvalidCharInXML InvalidCharInXML}</td><td>Invalid character in XML content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadlyFormedXML BadlyFormedXML}</td><td>XML content is not well-formed</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#UnclosedXMLToken UnclosedXMLToken}</td><td>Unclosed XML token</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#InvalidXMLConstruct InvalidXMLConstruct}</td><td>XML construct is invalid or not permitted</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLTagMismatch XMLTagMismatch}</td><td>Element tag mismatch or missing tag</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#DuplicateXMLAttribute DuplicateXMLAttribute}</td><td>Duplicate XML attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#UndefinedXMLEntity UndefinedXMLEntity}</td><td>Undefined XML entity</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadProcessingInstruction BadProcessingInstruction}</td><td>Invalid, malformed or unrecognized XML processing instruction</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLPrefix BadXMLPrefix}</td><td>Invalid or undefined XML namespace prefix</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLPrefixValue BadXMLPrefixValue}</td><td>Invalid XML namespace prefix value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#MissingXMLRequiredAttribute MissingXMLRequiredAttribute}</td><td>Missing a required XML attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLAttributeTypeMismatch XMLAttributeTypeMismatch}</td><td>Data type mismatch for the value of an attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLBadUTF8Content XMLBadUTF8Content}</td><td>Invalid UTF8 content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#MissingXMLAttributeValue MissingXMLAttributeValue}</td><td>Missing or improperly formed attribute value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLAttributeValue BadXMLAttributeValue}</td><td>Invalid or unrecognizable attribute value</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLAttribute BadXMLAttribute}</td><td>Invalid, unrecognized or malformed attribute</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#UnrecognizedXMLElement UnrecognizedXMLElement}</td><td>Element either not recognized or not permitted</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLComment BadXMLComment}</td><td>Badly formed XML comment</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLDeclLocation BadXMLDeclLocation}</td><td>XML declaration not permitted in this location</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLUnexpectedEOF XMLUnexpectedEOF}</td><td>Reached end of input unexpectedly</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLIDValue BadXMLIDValue}</td><td>Value is invalid for XML ID, or has already been used</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLIDRef BadXMLIDRef}</td><td>XML ID value was never declared</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#UninterpretableXMLContent UninterpretableXMLContent}</td><td>Unable to interpret content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#BadXMLDocumentStructure BadXMLDocumentStructure}</td><td>Bad XML document structure</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#InvalidAfterXMLContent InvalidAfterXMLContent}</td><td>Encountered invalid content after expected content</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLExpectedQuotedString XMLExpectedQuotedString}</td><td>Expected to find a quoted string</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLEmptyValueNotPermitted XMLEmptyValueNotPermitted}</td><td>An empty value is not permitted in this context</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLBadNumber XMLBadNumber}</td><td>Invalid or unrecognized number</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLBadColon XMLBadColon}</td><td>Colon characters are invalid in this context</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#MissingXMLElements MissingXMLElements}</td><td>One or more expected elements are missing</td><td>XML</td><td>ERROR</td></tr>
 * <tr><td>{@link  libsbmlConstants#XMLContentEmpty XMLContentEmpty}</td><td>Main XML content is empty</td><td>XML</td><td>ERROR</td></tr>
 * </table>
 * </center>
 * <p>
 * <p>
 * <h3><a class=\'anchor\'
 * name=\'XMLErrorCategory_t\'>Category codes associated with {@link XMLError} objects</a></h3>
 * <p>
 * As discussed above, each {@link XMLError} object contains a value for a category
 * identifier, describing the type of issue that the {@link XMLError} object represents.
 * The category can be retrieved from an {@link XMLError} object using the method
 * {@link XMLError#getCategory()}. The following table lists each possible value
 * and a brief description of its meaning.
 * <p>
 * As is the case with the error codes, in the libSBML Java language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * <code>libsbmlConstants</code> in the file \'<a
 * href=\'libsbmlConstants.html\'>libsbmlConstants.java</a>\'.
 * <p>
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</th>
 *      <th>Meaning</th>
 *  </tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_INTERNAL LIBSBML_CAT_INTERNAL}</td>
 * <td>A problem involving the libSBML
 * software itself or the underlying XML parser.  This almost certainly
 * indicates a software defect (i.e., bug) in libSBML.  Please report
 * instances of this to the libSBML developers.</td></tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SYSTEM LIBSBML_CAT_SYSTEM}</td>
 * <td>A problem reported by the operating
 * system, such as an inability to read or write a file.  This indicates
 * something that is not a program error but is outside of the control of
 * libSBML.</td></tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_XML LIBSBML_CAT_XML}</td>
 * <td>A problem in the XML content itself.  This
 * usually arises from malformed XML or the use of
 * constructs not permitted in SBML.</td></tr>
 * </table>
 * </center>
 * <p>
 * <p>
 * <h3><a class=\'anchor\'
 * name=\'XMLErrorSeverity_t\'>Severity codes associated with {@link XMLError} objects</a></h3>
 * <p>
 * As described above, each {@link XMLError} object contains a value for a severity
 * code, describing how severe is the issue that the {@link XMLError} object
 * represents.  The severity be retrieved from an {@link XMLError} object using the
 * method {@link XMLError#getSeverity()}. The following table lists each possible
 * value and a brief description of its meaning.
 * <p>
 * As is the case with the category codes, in the libSBML Java language
 * interface, these severity codes are currently
 * implemented as static integer constants defined in the interface class
 * <code>libsbmlConstants</code> in the file \'<a
 * href=\'libsbmlConstants.html\'>libsbmlConstants.java</a>\'.  This
 * is admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the severity
 * codes. 
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'1\' border=\'0\' class=\'text-table width80 normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</th>
 *      <th>Meaning</th>
 *  </tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO}</td>
 * <td>The error is actually informational and
 * not necessarily a serious problem.</td></tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_SEV_WARNING LIBSBML_SEV_WARNING}</td>
 * <td>The error object represents a problem
 * that is not serious enough to necessarily stop the problem, but
 * applications should take note of the problem and evaluate what its
 * implications may be.</td></tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_SEV_ERROR LIBSBML_SEV_ERROR}</td>
 * <td>The error object represents a serious
 * error.  The application may continue running but it is unlikely to be
 * able to continue processing the same XML file or data stream.</td></tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL}</td>
 * <td>A serious error occurred, such as an
 * out-of-memory condition, and the software should terminate
 * immediately.</td></tr>
 * </table>
 * </center>
 */
"

%javamethodmodifiers XMLError::XMLError( const int errorId           = 0 , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_FATAL , const unsigned int category = LIBSBML_CAT_INTERNAL ) "
  /**
   * Creates a new {@link XMLError} to report that something occurred during XML
   * processing.
   * <p>
   * {@link XMLError} objects have identification numbers to indicate the nature of
   * the exception.  These numbers are defined as unsigned 
   * integer constants in the file
   * \'libsbmlConstants.java\'.  See the <a class=\'el\'
   * href=\'#XMLErrorCode_t\'>top of this documentation</a> for a table
   * listing the possible values and their meanings.  The argument 
   * <code>errorId</code> to this constructor <em>can</em> be (but does not have to be) a
   * value from this set of constants.  If it is
   * one of the predefined error identifiers, the {@link XMLError} class assumes
   * the error is a low-level system or XML layer error and
   * <em>prepends</em> a built-in, predefined error message to any string
   * passed in the argument <code>details</code> to this constructor.  In addition,
   * all the predefined error identifiers have associated values for the 
   * <code>severity</code> and <code>category</code> codes, and these fields are filled-in as
   * well. 
   * <p>
   * If the error identifier <code>errorId</code> is a number greater than 9999, this
   * constructor assumes that the error was generated from another part of
   * the software, and does not do additional filling in of values beyond
   * the defaults in the constructor itself.  This allows {@link XMLError} to serve
   * as a base class for other errors (and is used in this way elsewhere in
   * libSBML).  Callers should fill in all the parameters with suitable
   * values if generating errors with codes greater than 9999 to make
   * maximum use of the {@link XMLError} facilities.
   * <p>
   * As mentioned above, 
   * there are additional constants defined for <a class=\'el\'
   * href=\'#XMLErrorSeverity_t\'>standard severity</a> and <a class=\'el\'
   * href=\'#XMLErrorCategory_t\'>standard category</a> codes, and every predefined 
   * error in libSBML has an associated value for severity and category taken
   * from these predefined sets.  These constants have symbol names
   * prefixed with <code>LIBSBML_SEV_</code> and <code>LIBSBML_CAT_</code>,
   * respectively.  If the value of <code>errorId</code> is one of the standard error
   * codes, callers do not need to fill in <code>severity</code> and <code>category</code> in a
   * call to this constructor.  Conversely, if <code>errorId</code> is not an existing
   * XML-level error code, callers can use other values for <code>severity</code> and
   * <code>category</code>. 
   * <p>
   * @param errorId a long integer, the identification number of the error.
   * <p>
   * @param details a string containing additional details about the error.
   * If the error code in <code>errorId</code> is one that is recognized by {@link XMLError},
   * the given message is <em>appended</em> to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   * <p>
   * @param line a long integer, the line number at which the error occured.
   * <p>
   * @param column a long integer, the column number at which the error occured.
   * <p>
   * @param severity an integer indicating severity of the error.
   * <p>
   * @param category an integer indicating the category to which the error
   * belongs.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers XMLError::XMLError(const XMLError& orig) "
  /**
   * Copy constructor; creates a copy of this {@link XMLError}.
   */
 public";


%javamethodmodifiers XMLError::getErrorId() const "
  /**
   * Returns the identifier of this error.
   * <p>
   * @return the error code for this error.
   * <p>
   * @see #getMessage()
   * @see #getShortMessage()
   * @see #getCategory()
   * @see #getSeverity()
   */
 public";


%javamethodmodifiers XMLError::getMessage() const "
  /**
   * Returns the message text of this error.
   * <p>
   * The message associated with an error object describes the nature of
   * the problem.  The message returned by this method is generally longer
   * and clearer than the message returned by {@link XMLError#getShortMessage()},
   * but not in all cases.
   * <p>
   * Callers may use {@link XMLError#getCategory()} and {@link XMLError#getSeverity()} to
   * obtain additional information about the nature and severity of the
   * problem.
   * <p>
   * @return the message text
   * <p>
   * @see #getErrorId()
   * @see #getShortMessage()
   * @see #getCategory()
   * @see #getSeverity()
   */
 public";


%javamethodmodifiers XMLError::getShortMessage() const "
  /**
   * Returns a brief message for this error.
   * <p>
   * This is an alternative error message that, in general, is as short as
   * the authors could make it.  However, brevity is often inversely
   * proportional to clarity, so this short message may not be sufficiently
   * informative to understand the nature of the error.  Calling
   * applications may wish to check {@link XMLError#getMessage()} in addition or
   * instead.
   * <p>
   * @return the short error message text
   * <p>
   * @see #getErrorId()
   * @see #getMessage()
   * @see #getCategory()
   * @see #getSeverity()
   */
 public";


%javamethodmodifiers XMLError::getLine() const "
  /**
   * Returns the line number in the XML input near where the error, warning
   * or other diagnostic occurred.
   * <p>
   * We say \'near where the problem occurred\', because many factors affect
   * how accurate the line/column information ultimately is.  For example,
   * different XML parsers have different conventions for which line and
   * column number they report for a particular problem (which in turn
   * makes a difference when a problem involves an opening XML tag on one
   * line and a closing tag on another line).  In some situations, some
   * parsers report invalid line and/or column numbers altogether.  If this
   * occurs, the line and/or column number in the {@link XMLError} object will be
   * set to the the value of the maximum unsigned long integer
   * representable on the platform where libSBML is running.  (This is
   * equal to the constant named <code>ULONG_MAX</code> in C and C++.)  The
   * probability that a true line or column number in an SBML model would
   * equal this value is vanishingly small; thus, if an application
   * encounters these values in an {@link XMLError} object, it can assume no valid
   * line/column number could be provided by libSBML in that situation.
   * <p>
   * @return the line number
   * <p>
   * @see #getColumn()
   */
 public";


%javamethodmodifiers XMLError::getColumn() const "
  /**
   * Returns the column number in the XML input near where the error,
   * warning or other diagnostic occurred.
   * <p>
   * We say \'near where the problem occurred\', because many factors affect
   * how accurate the line/column information ultimately is.  For example,
   * different XML parsers have different conventions for which line and
   * column number they report for a particular problem (which in turn
   * makes a difference when a problem involves an opening XML tag on one
   * line and a closing tag on another line).  In some situations, some
   * parsers report invalid line and/or column numbers altogether.  If this
   * occurs, the line and/or column number in the {@link XMLError} object will be
   * set to the the value of the maximum unsigned long integer
   * representable on the platform where libSBML is running.  (This is
   * equal to the constant named <code>ULONG_MAX</code> in C and C++.)  The
   * probability that a true line or column number in an SBML model would
   * equal this value is vanishingly small; thus, if an application
   * encounters these values in an {@link XMLError} object, it can assume no valid
   * line/column number could be provided by libSBML in that situation.
   * <p>
   * @return the column number
   * <p>
   * @see #getLine()
   */
 public";


%javamethodmodifiers XMLError::getSeverity() const "
  /**
   * Returns the severity of this error.
   * <p>
   * {@link XMLError} defines an enumeration of severity codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own severity codes with numbers higher than those in the predefined
   * set of severity codes.
   * <p>
   * @return the severity of this {@link XMLError}.
   * <p>
   * @see #getSeverityAsString()
   * @see #getCategory()
   */
 public";


%javamethodmodifiers XMLError::getSeverityAsString() const "
  /**
   * Returns a string describing the severity level of this error.
   * <p>
   * {@link XMLError} defines an enumeration of severity codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own severity codes with numbers higher than those in the predefined
   * set of severity codes.
   * <p>
   * @return string representing the severity of this {@link XMLError}.
   * <p>
   * @see #getSeverity()
   * @see #getCategoryAsString()
   */
 public";


%javamethodmodifiers XMLError::getCategory() const "
  /**
   * Returns the category of this error.
   * <p>
   * {@link XMLError} defines an enumeration of category codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own categories with numbers higher than those in the predefined
   * set of category codes.
   * <p>
   * Categories can be used to partition errors into distinct groups.
   * Among other things, this can be used to prevent id conflicts by
   * uniquely identifying an {@link XMLError} by both id and category.
   * <p>
   * @return the category of this {@link XMLError}.
   * <p>
   * @see #getSeverity()
   * @see #getCategoryAsString()
   */
 public";


%javamethodmodifiers XMLError::getCategoryAsString() const "
  /**
   * Returns a string describing the category of this error.
   * <p>
   * {@link XMLError} defines an enumeration of category codes for the XML layer.
   * Applications that build on {@link XMLError} by subclassing it may add their
   * own categories with numbers higher than those in the predefined
   * set of category codes.
   * <p>
   * Categories can be used to partition errors into distinct groups.
   * Among other things, this can be used to prevent id conflicts by
   * uniquely identifying an {@link XMLError} by both id and category.
   * <p>
   * @return string representing the category of this {@link XMLError}.
   * <p>
   * @see #getCategory()
   * @see #getSeverityAsString()
   */
 public";


%javamethodmodifiers XMLError::isInfo() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error object is for information purposes only.
   * <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link  libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO} from the
   * set of predefined
   * severity codes.
   * <p>
   * @return <code>true</code> if this {@link XMLError} is for informational purposes only,
   * <code>false</code> otherwise.
   * <p>
   * @see #isWarning()
   * @see #isError()
   * @see #isFatal()
   */
 public";


%javamethodmodifiers XMLError::isWarning() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether 
   * this error object is a warning.
   * <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link  libsbmlConstants#LIBSBML_SEV_WARNING LIBSBML_SEV_WARNING} from the
   * set of predefined
   * severity codes.
   * <p>
   * @return <code>true</code> if this error is a warning, <code>false</code> otherwise.
   * <p>
   * @see #isInfo()
   * @see #isError()
   * @see #isFatal()
   */
 public";


%javamethodmodifiers XMLError::isError() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error is a significant error.
   * <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link  libsbmlConstants#LIBSBML_SEV_ERROR LIBSBML_SEV_ERROR} from the
   * set of predefined
   * severity codes.
   * <p>
   * @return <code>true</code> if this error is an error, <code>false</code> otherwise.
   * <p>
   * @see #isInfo()
   * @see #isWarning()
   * @see #isFatal()
   */
 public";


%javamethodmodifiers XMLError::isFatal() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error is a fatal run-time error.
   * <p>
   * This is equivalent to obtaining the severity code from an {@link XMLError}
   * object (via {@link XMLError#getSeverity()}) and then comparing it to the
   * value {@link  libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL} from the
   * set of predefined severity codes.
   * <p>
   * @return <code>true</code> if this error is a fatal error, <code>false</code> otherwise.
   * <p>
   * @see #isInfo()
   * @see #isWarning()
   * @see #isError()
   */
 public";


%javamethodmodifiers XMLError::isInternal() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error resulted from an internal program error.
   * <p>
   * This is equivalent to obtaining the category identifier from an
   * {@link XMLError} object (via {@link XMLError#getCategory()}) and then comparing it to
   * the value {@link  libsbmlConstants#LIBSBML_CAT_INTERNAL LIBSBML_CAT_INTERNAL} from the
   * set of predefined category codes.
   * <p>
   * @return <code>true</code> or <code>false</code>
   * <p>
   * @see #isSystem()
   * @see #isXML()
   */
 public";


%javamethodmodifiers XMLError::isSystem() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error was generated by the operating system.
   * <p>
   * This is equivalent to obtaining the category identifier from an
   * {@link XMLError} object (via {@link XMLError#getCategory()}) and then comparing it to
   * the value {@link  libsbmlConstants#LIBSBML_CAT_SYSTEM LIBSBML_CAT_SYSTEM} from the
   * set of predefined category codes.
   * <p>
   * @return <code>true</code> or <code>false</code>
   * <p>
   * @see #isInternal()
   * @see #isXML()
   */
 public";


%javamethodmodifiers XMLError::isXML() const "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * error resulted from a problem in the XML input (e.g., an XML syntax
   * error).
   * <p>
   * This is equivalent to obtaining the category identifier from an
   * {@link XMLError} object (via {@link XMLError#getCategory()}) and then comparing it to
   * the value {@link  libsbmlConstants#LIBSBML_CAT_XML LIBSBML_CAT_XML} from the
   * set of predefined category codes.
   * <p>
   * @return <code>true</code> or <code>false</code>
   * <p>
   * @see #isInternal()
   * @see #isSystem()
   */
 public";


%javamethodmodifiers XMLError::setLine(unsigned int line) "
  /**
   * Sets the line number where this error occurred.
   * <p>
   * @param line a long integer, the line number to set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #setColumn(long column)
   */
 public";


%javamethodmodifiers XMLError::setColumn(unsigned int column) "
  /**
   * Sets the column number where this error occurred.
   * <p>
   * @param column a long integer, the column number to set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #setLine(long line)
   */
 public";


%javamethodmodifiers XMLError::getStandardMessage(const int code) "
  /**
   * Returns a copy of the message string associated with the given
   * predefined {@link XMLError} code.
   * <p>
   * @param code the error code whose message is sought; it must be a
   * predefined value from <a class=\'el\'
   * href=\'#XMLErrorCode_t\'>the set of predefined error identifiers</a>.
   */
 public";


%typemap(javaimports) XMLErrorLog "
/** 
 * Log of errors and other events encountered while processing an XML
 * file or data stream.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The error log is a list.  The XML layer of libSBML maintains an error
 * log associated with a given XML document or data stream.  When an
 * operation results in an error, or when there is something wrong with the
 * XML content, the problem is reported as an {@link XMLError} object stored in the
 * {@link XMLErrorLog} list.  Potential problems range from low-level issues (such
 * as the inability to open a file) to XML syntax errors (such as
 * mismatched tags or other problems).
 * <p>
 * A typical approach for using this error log is to first use
 * {@link XMLErrorLog#getNumErrors()} to inquire how many {@link XMLError}
 * object instances it contains, and then to iterate over the list of
 * objects one at a time using getError(long n) const.  Indexing in
 * the list begins at 0.
 * <p>
 * In normal circumstances, programs using libSBML will actually obtain an
 * {@link SBMLErrorLog} rather than an {@link XMLErrorLog}.  The former is subclassed from
 * {@link XMLErrorLog} and simply wraps commands for working with {@link SBMLError} objects
 * rather than the low-level {@link XMLError} objects.  Classes such as
 * {@link SBMLDocument} use the higher-level {@link SBMLErrorLog}.
 */
"

%javamethodmodifiers XMLErrorLog::getNumErrors() const "
  /**
   * Returns the number of errors that have been logged.
   * <p>
   * To retrieve individual errors from the log, callers may use
   * {@link XMLErrorLog#getError(long n)} const.
   * <p>
   * @return the number of errors that have been logged.
   */
 public";


%javamethodmodifiers XMLErrorLog::getError "
  /**
   * Returns the <i>n</i>th {@link XMLError} object in this log.
   * <p>
   * Index <code>n</code> is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the method
   * {@link XMLErrorLog#getNumErrors()}.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a <code>null</code> being returned.
   * <p>
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   * <p>
   * @return the <i>n</i>th {@link XMLError} in this log, or <code>null</code> if <code>n</code> is
   * greater than or equal to
   * {@link XMLErrorLog#getNumErrors()}.
   * <p>
   * @see #getNumErrors()
   */
 public";


%javamethodmodifiers XMLErrorLog::clearLog "
  /**
   * Deletes all errors from this log.
   */
 public";


%javamethodmodifiers XMLErrorLog::XMLErrorLog "
  /**
   * Creates a new empty {@link XMLErrorLog}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLErrorLog::add(const XMLError& error) "
  /**
   * Logs the given {@link XMLError}.
   * <p>
   * @param error {@link XMLError}, the error to be logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLErrorLog::add(const std::list<XMLError>& errors) "
  /**
   * Logs (copies) the XMLErrors in the given {@link XMLError} list to this
   * {@link XMLErrorLog}.
   * <p>
   * @param errors list, a list of {@link XMLError} to be added to the log.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers XMLErrorLog::setParser(const XMLParser* p) "
  /**
   * Sets the XMLParser associated with this {@link XMLErrorLog}.
   * <p>
   * The XMLParser will be used to obtain the current line and column
   * number for {@link XMLError} objects that lack line and column numbers when
   * they are logged.  This method is used by libSBML\'s internal XML
   * parsing code and probably has no useful reason to be called from
   * application programs.
   * <p>
   * @param p XMLParser, the parser to use
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> @link libsbmlConstants#{@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED } {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED } @endlink
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SBMLErrorLog "
/** 
 * Log of errors and other events encountered during SBML processing.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The error log is a list.  Each {@link SBMLDocument} maintains its own
 * {@link SBMLErrorLog}.  When a libSBML operation on SBML content results in an
 * error, or when there is something worth noting about the SBML content,
 * the issue is reported as an {@link SBMLError} object stored in the {@link SBMLErrorLog}
 * list.
 * <p>
 * {@link SBMLErrorLog} is derived from {@link XMLErrorLog}, an object class that serves
 * exactly the same purpose but for the XML parsing layer.  {@link XMLErrorLog}
 * provides crucial methods such as
 * {@link XMLErrorLog#getNumErrors()}
 * for determining how many {@link SBMLError} or {@link XMLError} objects are in the log.
 * {@link SBMLErrorLog} inherits these methods.
 * <p>
 * The general approach to working with {@link SBMLErrorLog} in user programs
 * involves first obtaining a pointer to a log from a libSBML object such
 * as {@link SBMLDocument}.  Callers should then use
 * {@link XMLErrorLog#getNumErrors()} to inquire how
 * many objects there are in the list.  (The answer may be 0.)  If there is
 * at least one {@link SBMLError} object in the {@link SBMLErrorLog} instance, callers can
 * then iterate over the list using
 * {@link SBMLErrorLog#getError(long n)},
 * using methods provided by the {@link SBMLError} class to find out the error code
 * and associated information such as the error severity, the message, and
 * the line number in the input.
 * <p>
 * If you wish to simply print the error strings for a human to read, an
 * easier and more direct way might be to use {@link SBMLDocument#printErrors()}.
 * <p>
 * @see SBMLError
 * @see XMLErrorLog
 * @see XMLError
 */
"

%javamethodmodifiers SBMLErrorLog::getError "
  /**
   * Returns the <i>n</i>th {@link SBMLError} object in this log.
   * <p>
   * Index <code>n</code> is counted from 0.  Callers should first inquire about the
   * number of items in the log by using the
   * {@link XMLErrorLog#getNumErrors()} method.
   * Attempts to use an error index number that exceeds the actual number
   * of errors in the log will result in a <code>null</code> being returned.
   * <p>
   * @param n the index number of the error to retrieve (with 0 being the
   * first error).
   * <p>
   * @return the <i>n</i>th {@link SBMLError} in this log, or <code>null</code> if <code>n</code> is
   * greater than or equal to
   * {@link XMLErrorLog#getNumErrors()}.
   * <p>
   * @see #getNumErrors()
   */
 public";


%javamethodmodifiers SBMLErrorLog::getNumFailsWithSeverity(unsigned int severity) "
  /**
   * Returns the number of errors that have been logged with the given
   * severity code.
   * <p>
   * LibSBML associates severity levels with every {@link SBMLError} object to
   * provide an indication of how serious the problem is.  Severities range
   * from informational diagnostics to fatal (irrecoverable) errors.  Given
   * an {@link SBMLError} object instance, a caller can interrogate it for its
   * severity level using methods such as {@link SBMLError#getSeverity()},
   * {@link SBMLError#isFatal()}, and so on.  The present method encapsulates
   * iteration and interrogation of all objects in an {@link SBMLErrorLog}, making
   * it easy to check for the presence of error objects with specific
   * severity levels.
   * <p>
   * @param severity a
   * value from the set of <code>LIBSBML_SEV_</code> constants defined by
   * the interface class <code><a
   * href=\'libsbmlConstants.html\'>libsbmlConstants</a></code> 
   * <p>
   * @return a count of the number of errors with the given severity code.
   * <p>
   * @see #getNumErrors()
   */
 public";


%javamethodmodifiers SBMLErrorLog::SBMLErrorLog "
  /**
   * Creates a new, empty {@link SBMLErrorLog}.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLErrorLog::logError( const unsigned int errorId  = 0 , const unsigned int level    = SBML_DEFAULT_LEVEL , const unsigned int version  = SBML_DEFAULT_VERSION , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_ERROR , const unsigned int category = LIBSBML_CAT_SBML ) "
  /**
   * Convenience function that combines creating an {@link SBMLError} object and
   * adding it to the log.
   * <p>
   * @param errorId a long integer, the identification number of the error.
   * <p>
   * @param details a string containing additional details about the error.
   * If the error code in <code>errorId</code> is one that is recognized by {@link SBMLError},
   * the given message is <em>appended</em> to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   * <p>
   * @param line a long integer, the line number at which the error occured.
   * <p>
   * @param column a long integer, the column number at which the error occured.
   * <p>
   * @param severity an integer indicating severity of the error.
   * <p>
   * @param category an integer indicating the category to which the error
   * belongs.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLErrorLog::add(const SBMLError& error) "
  /**
   * Adds the given {@link SBMLError} to the log.
   * <p>
   * @param error {@link SBMLError}, the error to be logged.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLErrorLog::add(const std::list<SBMLError>& errors) "
  /**
   * Adds (copies) the SBMLErrors in the given {@link SBMLError} list to this
   * {@link SBMLErrorLog}.
   * <p>
   * @param errors list, a list of {@link SBMLError} to be added to the log.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLErrorLog::remove(const unsigned int errorId) "
  /**
   * Removes an error having errorId from the {@link SBMLError} list.
   * <p>
   * Only the first item will be removed if there are multiple errors
   * with the given errorId.
   * <p>
   * @param errorId the error identifier of the error to be removed.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) SBMLError "
/** 
 * Representation of errors, warnings and other diagnostics
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * When a libSBML operation on SBML content results in an error, or when
 * there is something wrong with the SBML content, the problems are
 * reported as {@link SBMLError} objects.  These are generally stored in an
 * {@link SBMLErrorLog} object; this log object, in turn, is kept in the
 * {@link SBMLDocument} object containing the SBML content.  Applications can
 * obtain the list of logged errors using {@link SBMLDocument#getErrorLog()} and
 * then use the methods provided by {@link SBMLErrorLog} to access individual
 * {@link SBMLError} objects.  (Note that despite the word \'error\' in the name,
 * {@link SBMLError} objects are used to represent not only \'true\' errors, but also
 * warnings and some informational diagnostics.  The name is a historical
 * hold-over from early versions of libSBML, in which the object really was
 * only used to report errors.)
 * <p>
 * * Each {@link SBMLError} object instance has an identification number that
 * identifies the nature of the problem.  This \'error id\' number will be up
 * to five digits long, and it will come from one of two sets of static
 * integer constants defined in the interface class <code><a
 * href=\'libsbmlConstants.html\'> libsbmlConstants</a></code>: either the
 * SBML error identifiers <a class=\'el\' href=\'#SBMLErrorCode_t\'> (described
 * below)</a> or the XML error identifiers (described in the documentation
 * for the class <code><a href=\'{@link XMLError}.html\'> {@link XMLError}</a></code>).  The
 * former set of constants includes all the SBML validation rule numbers
 * listed in the appendices of the SBML specification documents, as well as
 * some additional libSBML-specific error codes.
 * <p>
 * <p>
 * Error codes are useful mainly for software.  For human readers,
 * {@link SBMLError} also includes text messages that describe the nature of a
 * given problem.  The messages can be accessed using
 * {@link SBMLError#getShortMessage()} and {@link SBMLError#getMessage()}.  The former
 * provides a brief one-line description of the issue, while
 * {@link SBMLError#getMessage()} provides a more detailed text, including (if
 * appropriate) references to sections of the SBML specifications where
 * relevant topics are discussed.  These text strings are suitable for
 * displaying to human users.
 * <p>
 * * An {@link SBMLError} object also contains a category code; its value may be
 * retrieved using the method {@link SBMLError#getCategory()}.  Category values
 * are drawn from a set of static integer constants
 * defined in <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>,
 * and having names beginning with the characters
 * <code>LIBSBML_CAT_</code>.  The list of possible codes is described in a
 * separate section below.  Categories are used to partition errors into
 * distinct conceptual groups.  This is principally used by the libSBML
 * validation system to group classes of validation checks.  For example,
 * {@link  libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY}
 * is the category for tests that check identifier consistency;
 * {@link  libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY}
 * is the category for MathML consistency checking; and
 * so on.
 * <p>
 * <p>
 * In addition, {@link SBMLError} also has a severity code.  Its value may be
 * retrieved using the method {@link SBMLError#getSeverity()}.  The possible
 * severity values are the same as those reported by <code><a href=\'{@link XMLError}.html\'>{@link XMLError}</a></code>. 
 * Severity levels currently range from informational
 * ({@link  libsbmlConstants#LIBSBML_SEV_INFO LIBSBML_SEV_INFO})
 * to fatal errors
 * ({@link  libsbmlConstants#LIBSBML_SEV_FATAL LIBSBML_SEV_FATAL}).
 * They can be
 * used by an application to evaluate how serious a given problem
 * is. 
 * <p>
 * Finally, {@link SBMLError} records the line and column near where the problem
 * occurred in the SBML content.  The values may be retrieved using the
 * methods {@link SBMLError#getLine()} and {@link SBMLError#getColumn()}.  We say \'near\',
 * because a lot of factors affect how accurate the line/column information
 * ultimately is.  For example, different XML parsers have different
 * conventions for which line and column number they report for a
 * particular problem (which makes a difference when a problem involves an
 * opening XML tag on one line and a closing tag on another line).  In some
 * situations, some parsers report invalid line and/or column numbers
 * altogether.  If this occurs, libSBML sets the line and/or column number
 * in the {@link SBMLError} object to the the value of the maximum unsigned long
 * integer representable on the platform where libSBML is running.  (This
 * is equal to the constant named <code>ULONG_MAX</code> in C and C++.)
 * The probability that a true line or column number in an SBML model would
 * equal this value is vanishingly small; thus, if an application
 * encounters these values in an {@link XMLError} object, it can assume no valid
 * line/column number could be provided by libSBML in that situation.
 * <p>
 * <h3><a class=\'anchor\' 
 * name=\'SBMLErrorCode_t\'>Error codes associated with {@link SBMLError} objects</a></h3>
 * <p>
 * The error and warning codes returned by libSBML are listed in the table
 * below.  The method {@link SBMLError#getErrorId()} returns the error code of a
 * given {@link SBMLError} object instance.  In the libSBML Java language
 * interface, these error identifiers are currently
 * implemented as static integer constants defined in the interface class
 * <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>.  This
 * is admittedly not an ideal approach from the standpoint of modern Java
 * programming, but it was necessary to work around the lack of
 * enumerations in Java prior to JDK 1.5.  Future versions of libSBML may
 * use a proper Java enumeration type to define the error identifiers.
 * <p>
 * In this table, the right-hand columns titled \'L1V1\', \'L1V2\', etc. refer
 * to Levels and Versions of the SBML specifications, and the entries in
 * each column refer to whether the severity of the condition in that
 * particular Level+Version of SBML.  The codes stand for the following:
 * <p>
 * <p>
 * <p>
 * <table cellspacing=\'1\' cellpadding=\'2\' border=\'0\' class=\'normal-font\'>
 * <tr><td class=\'s-na\'>N</td><td>= Not applicable</td></tr>
 * <tr><td class=\'s-info\'>I</td><td>= Informational</td></tr>
 * <tr><td class=\'s-warning\'>W</td><td>= Warning</td></tr>
 * <tr><td class=\'s-error\'>E</td><td>= Error</td></tr>
 * <tr><td class=\'s-fatal\'>F</td><td>= Fatal</td></tr>
 * </table>
 * <p>
 * The text shown in the \'Meaning\' is the text returned by the
 * {@link SBMLError#getShortMessage()} method on a given {@link SBMLError} object.  A
 * longer and (hopefully) clearer explanation of the issue is returned by
 * {@link SBMLError#getMessage()}.
 * <p>
 * <center>
<table width=\'95%\' cellspacing=\'1\' cellpadding=\'2\' border=\'0\' class=\'text-table small-font alt-row-colors\'>
 <tr style=\'background: lightgray\' class=\'normal-font\'>
     <th valign=\'bottom\'><strong>Enumerator</strong></th>
     <th valign=\'bottom\'><strong>Meaning</strong></th>
     <th align=\'center\' width=\'15\'>L 1 V 1</th>
     <th align=\'center\' width=\'15\'>L 1 V 2</th>
     <th align=\'center\' width=\'15\'>L 2 V 1</th>
     <th align=\'center\' width=\'15\'>L 2 V 2</th>
     <th align=\'center\' width=\'15\'>L 2 V 3</th>
     <th align=\'center\' width=\'15\'>L 2 V 4</th>
     <th align=\'center\' width=\'15\'>L 3 V 1</th>
 </tr>
<tr><td><code>UnknownError</code></td><td>Unknown internal libSBML error</td><td class=\'s-fatal\'>F</td><td class=\'s-fatal\'>F</td><td class=\'s-fatal\'>F</td><td class=\'s-fatal\'>F</td><td class=\'s-fatal\'>F</td><td class=\'s-fatal\'>F</td><td class=\'s-fatal\'>F</td></tr>
<tr><td><code>NotUTF8</code></td><td>Not UTF8</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>UnrecognizedElement</code></td><td>Unrecognized element</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NotSchemaConformant</code></td><td>Not conformant to SBML XML schema</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>L3NotSchemaConformant</code></td><td>Not conformant to SBML XML schema</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidMathElement</code></td><td>Invalid MathML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DisallowedMathMLSymbol</code></td><td>Disallowed MathML symbol</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DisallowedMathMLEncodingUse</code></td><td>Disallowed use of MathML \'encoding\' attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DisallowedDefinitionURLUse</code></td><td>Disallowed use of MathML \'definitionURL\' attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>BadCsymbolDefinitionURLValue</code></td><td>Invalid &lt;csymbol&gt; \'definitionURL\' attribute value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DisallowedMathTypeAttributeUse</code></td><td>Disallowed use of MathML \'type\' attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DisallowedMathTypeAttributeValue</code></td><td>Disallowed MathML \'type\' attribute value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>LambdaOnlyAllowedInFunctionDef</code></td><td>Use of &lt;lambda&gt; not permitted outside of a &lt;functionDefinition&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>BooleanOpsNeedBooleanArgs</code></td><td>Non-boolean argument given to boolean operator</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NumericOpsNeedNumericArgs</code></td><td>Non-numerical argument given to numerical operator</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ArgsToEqNeedSameType</code></td><td>Arguments to &lt;eq&gt; or &lt;neq&gt; have inconsistent data types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>PiecewiseNeedsConsistentTypes</code></td><td>&lt;piecewise&gt; terms have inconsistent data types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>PieceNeedsBoolean</code></td><td>Second argument of &lt;piece&gt; must yield a boolean value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ApplyCiMustBeUserFunction</code></td><td>&lt;ci&gt; does not refer to a function definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ApplyCiMustBeModelComponent</code></td><td>&lt;ci&gt;\'s value is not a component in this model</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>KineticLawParametersAreLocalOnly</code></td><td>Cannot use &lt;kineticLaw&gt; parameter outside local scope</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MathResultMustBeNumeric</code></td><td>Formula result is not a numerical value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OpsNeedCorrectNumberOfArgs</code></td><td>Incorrect number of arguments to operator</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidNoArgsPassedToFunctionDef</code></td><td>Incorrect number of arguments to function</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DisallowedMathUnitsUse</code></td><td>Attribute \'units\' only permitted on cn element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidUnitsValue</code></td><td>Invalid value for \'units\' attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DuplicateComponentId</code></td><td>Duplicate component identifier</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DuplicateUnitDefinitionId</code></td><td>Duplicate unit definition identifier</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DuplicateLocalParameterId</code></td><td>Duplicate local parameter identifier</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MultipleAssignmentOrRateRules</code></td><td>Multiple rules for the same variable</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MultipleEventAssignmentsForId</code></td><td>Multiple event assignments for the same variable</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>EventAndAssignmentRuleForId</code></td><td>\'variable\' value used in both event assignments and assignment rules</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DuplicateMetaId</code></td><td>Duplicate \'metaid\' identifier</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidSBOTermSyntax</code></td><td>Invalid \'sboTerm\' value syntax</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidMetaidSyntax</code></td><td>Invalid \'metaid\' value syntax</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidIdSyntax</code></td><td>Invalid identifier syntax</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidUnitIdSyntax</code></td><td>Invalid unit identifier syntax</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidNameSyntax</code></td><td>Invalid name syntax</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MissingAnnotationNamespace</code></td><td>Missing declaration of XML namespace for annotation</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>DuplicateAnnotationNamespaces</code></td><td>Multiple annotations using same XML namespace</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>SBMLNamespaceInAnnotation</code></td><td>Invalid use of SBML XML namespace in annotation</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>MultipleAnnotations</code></td><td>Multiple annotation elements not allowed</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InconsistentArgUnits</code></td><td>Units of arguments to function call do not match function\'s definition</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InconsistentKineticLawUnitsL3</code></td><td>Inconsistent &lt;kineticLaw&gt; units</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>AssignRuleCompartmentMismatch</code></td><td>Mismatched units in assignment rule for compartment</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>AssignRuleSpeciesMismatch</code></td><td>Mismatched units in assignment rule for species</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>AssignRuleParameterMismatch</code></td><td>Mismatched units in assignment rule for parameter</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>AssignRuleStoichiometryMismatch</code></td><td>Mismatched units in assignment rule for stoichiometry</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InitAssignCompartmenMismatch</code></td><td>Mismatched units in initial assignment to compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InitAssignSpeciesMismatch</code></td><td>Mismatched units in initial assignment to species</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InitAssignParameterMismatch</code></td><td>Mismatched units in initial assignment to parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InitAssignStoichiometryMismatch</code></td><td>Mismatched units in initial assignment to stoichiometry</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>RateRuleCompartmentMismatch</code></td><td>Mismatched units in rate rule for compartment</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>RateRuleSpeciesMismatch</code></td><td>Mismatched units in rate rule for species</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>RateRuleParameterMismatch</code></td><td>Mismatched units in rate rule for parameter</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>RateRuleStoichiometryMismatch</code></td><td>Mismatched units in rate rule for stoichiometry</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>KineticLawNotSubstancePerTime</code></td><td>Kinetic law units are not \'substance\'/\'time\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>SpeciesInvalidExtentUnits</code></td><td>{@link Species} units not consistent with extent</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>DelayUnitsNotTime</code></td><td>Units of delay are not units of time</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>EventAssignCompartmentMismatch</code></td><td>Mismatched units in event assignment for compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>EventAssignSpeciesMismatch</code></td><td>Mismatched units in event assignment for species</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>EventAssignParameterMismatch</code></td><td>Mismatched units in event assignment for parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>EventAssignStoichiometryMismatch</code></td><td>Mismatched units in event assignment for stoichiometry</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>PriorityUnitsNotDimensionless</code></td><td>Priority units must be dimensionless</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>OverdeterminedSystem</code></td><td>{@link Model} is overdetermined</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidModelSBOTerm</code></td><td>Invalid \'sboTerm\' value for model</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidFunctionDefSBOTerm</code></td><td>Invalid \'sboTerm\' value for function definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidParameterSBOTerm</code></td><td>Invalid \'sboTerm\' value for parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidInitAssignSBOTerm</code></td><td>Invalid \'sboTerm\' value for initial assignment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidRuleSBOTerm</code></td><td>Invalid \'sboTerm\' value for rule</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidConstraintSBOTerm</code></td><td>Invalid \'sboTerm\' value for constraint</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidReactionSBOTerm</code></td><td>Invalid \'sboTerm\' value for reaction</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidSpeciesReferenceSBOTerm</code></td><td>Invalid \'sboTerm\' value for species reference</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidKineticLawSBOTerm</code></td><td>Invalid \'sboTerm\' value for kinetic law</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidEventSBOTerm</code></td><td>Invalid \'sboTerm\' value for event</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidEventAssignmentSBOTerm</code></td><td>Invalid \'sboTerm\' value for event assignment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidCompartmentSBOTerm</code></td><td>Invalid \'sboTerm\' value for compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidSpeciesSBOTerm</code></td><td>Invalid \'sboTerm\' value for species</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidCompartmentTypeSBOTerm</code></td><td>Invalid \'sboTerm\' value for compartment type</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidSpeciesTypeSBOTerm</code></td><td>Invalid \'sboTerm\' value for species type</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidTriggerSBOTerm</code></td><td>Invalid \'sboTerm\' value for event trigger</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidDelaySBOTerm</code></td><td>Invalid \'sboTerm\' value for event delay</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NotesNotInXHTMLNamespace</code></td><td>Notes not placed in XHTML namespace</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NotesContainsXMLDecl</code></td><td>XML declarations not permitted in notes</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NotesContainsDOCTYPE</code></td><td>XML DOCTYPE not permitted in notes</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidNotesContent</code></td><td>Invalid notes content</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>OnlyOneNotesElementAllowed</code></td><td>Only one notes element allowed.</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidNamespaceOnSBML</code></td><td>Invalid XML namespace for SBML container</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MissingOrInconsistentLevel</code></td><td>Missing or inconsistent value for \'level\' attribute</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MissingOrInconsistentVersion</code></td><td>Missing or inconsistent value for \'version\' attribute</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>PackageNSMustMatch</code></td><td>Invalid level/version on package namespace</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>LevelPositiveInteger</code></td><td>\'level\' must be positive integer</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>VersionPositiveInteger</code></td><td>\'version\' must be positive integer</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnSBML</code></td><td></td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MissingModel</code></td><td>Missing model</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>IncorrectOrderInModel</code></td><td>Incorrect ordering of components in model definition</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>EmptyListElement</code></td><td>A given listOf___, if present, cannot be empty</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NeedCompartmentIfHaveSpecies</code></td><td>Missing compartment in species definition</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneOfEachListOf</code></td><td>Only one of each {@link ListOf} element allowed</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyFuncDefsInListOfFuncDefs</code></td><td>Only FunctionDefinitions allowed in {@link ListOfFunctionDefinitions}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyUnitDefsInListOfUnitDefs</code></td><td>Only UnitDefinitions allowed in {@link ListOfUnitDefinitions}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyCompartmentsInListOfCompartments</code></td><td>Only Compartments allowed in {@link ListOfCompartments}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlySpeciesInListOfSpecies</code></td><td>Only {@link Species} allowed in {@link ListOfSpecies}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyParametersInListOfParameters</code></td><td>Only parameters allowed in {@link ListOfParameters}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyInitAssignsInListOfInitAssigns</code></td><td>Only InitialAssignments allowed in {@link ListOfInitialAssignments}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyRulesInListOfRules</code></td><td>Only Rules allowed in {@link ListOfRules}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyConstraintsInListOfConstraints</code></td><td>Only Constraints allowed in {@link ListOfConstraints}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyReactionsInListOfReactions</code></td><td>Only Reactions allowed in {@link ListOfReactions}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyEventsInListOfEvents</code></td><td>Only Events allowed in {@link ListOfEvents}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>L3ConversionFactorOnModel</code></td><td>ConversionFactor must be parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>L3TimeUnitsOnModel</code></td><td>Invalid value of \'timeUnits\' on &lt;model&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>L3VolumeUnitsOnModel</code></td><td>Invalid value of \'volumeUnits\' on &lt;model&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>L3AreaUnitsOnModel</code></td><td>Invalid value of \'areaUnits\' on &lt;model&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>L3LengthUnitsOnModel</code></td><td>Invalid value of \'lengthUnits\' on &lt;model&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>L3ExtentUnitsOnModel</code></td><td>Invalid value of \'extentUnits\' on &lt;model&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>AllowedAttributesOnModel</code></td><td>Invalid attribute on &lt;model&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfFuncs</code></td><td>Invalid attribute on &lt;listOfFunctionDefinitions&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfUnitDefs</code></td><td>Invalid attribute on &lt;listOfUnitDefinitions&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfComps</code></td><td>Invalid attribute on &lt;listOfCompartments&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfSpecies</code></td><td>Invalid attribute on &lt;listOfSpecies&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfParams</code></td><td>Invalid attribute on &lt;listOfParameters&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfInitAssign</code></td><td>Invalid attribute on &lt;listOfInitialAssignments&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfRules</code></td><td>Invalid attribute on &lt;listOfRules&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfConstraints</code></td><td>Invalid attribute on &lt;listOfConstraints&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfReactions</code></td><td>Invalid attribute on &lt;listOfReactions&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfEvents</code></td><td>Invalid attribute on &lt;listOfEvents&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>FunctionDefMathNotLambda</code></td><td>Invalid expression in function definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidApplyCiInLambda</code></td><td>Invalid forward reference in &lt;apply&gt;&lt;ci&gt;...&lt;/ci&gt;&lt;/apply&gt; value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>RecursiveFunctionDefinition</code></td><td>Recursive function definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidCiInLambda</code></td><td>Unknown &lt;ci&gt; reference in &lt;lambda&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidFunctionDefReturnType</code></td><td>Function return type must be either numerical or boolean</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathElementPerFunc</code></td><td>{@link FunctionDefinition} must contain one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnFunc</code></td><td>{@link FunctionDefinition} must have id and optionally metaid and sboTerm</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidUnitDefId</code></td><td>Invalid \'id\' value for unit definition</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidSubstanceRedefinition</code></td><td>Invalid redefinition of \'substance\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidLengthRedefinition</code></td><td>Invalid redefinition of \'length\'</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidAreaRedefinition</code></td><td>Invalid redefinition of \'area\'</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidTimeRedefinition</code></td><td>Invalid redefinition of \'time\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidVolumeRedefinition</code></td><td>Invalid redefinition of \'volume\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>VolumeLitreDefExponentNotOne</code></td><td>Must use \'exponent\'=1 when defining \'volume\' in terms of litres</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>VolumeMetreDefExponentNot3</code></td><td>Must use \'exponent\'=3 when defining \'volume\' in terms of metres</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>EmptyListOfUnits</code></td><td>Empty list of units not permitted</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidUnitKind</code></td><td>Invalid value of \'kind\' in unit definition</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OffsetNoLongerValid</code></td><td>\'offset\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>CelsiusNoLongerValid</code></td><td>\'Celsius\' not defined in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>EmptyUnitListElement</code></td><td>{@link ListOfUnits} must not be empty</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneListOfUnitsPerUnitDef</code></td><td>Only one {@link ListOfUnits} element on {@link UnitDefinition}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyUnitsInListOfUnits</code></td><td>Only Units allowed in {@link ListOfUnits}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnUnitDefinition</code></td><td>Invalid attribute on &lt;unitDefinition&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfUnits</code></td><td>Invalid attribute on &lt;listOfUnits&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnUnit</code></td><td>Invalid attribute on &lt;unit&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ZeroDimensionalCompartmentSize</code></td><td>Use of \'size\' is invalid for a zero-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ZeroDimensionalCompartmentUnits</code></td><td>Use of \'units\' is invalid for a zero-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ZeroDimensionalCompartmentConst</code></td><td>Zero-dimensional compartments cannot be non-constant</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>UndefinedOutsideCompartment</code></td><td>Undefined compartment used as \'outside\' value</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>RecursiveCompartmentContainment</code></td><td>Recursive nesting of compartments via \'outside\'</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ZeroDCompartmentContainment</code></td><td>Invalid nesting of zero-dimensional compartments</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>Invalid1DCompartmentUnits</code></td><td>Invalid value of \'units\' for a one-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>Invalid2DCompartmentUnits</code></td><td>Invalid value of \'units\' for a two-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>Invalid3DCompartmentUnits</code></td><td>Invalid value of \'units\' for a three-dimensional compartment</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidCompartmentTypeRef</code></td><td>Invalid \'compartmentType\' reference</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>OneDimensionalCompartmentUnits</code></td><td>No units for 1D {@link Compartment}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>TwoDimensionalCompartmentUnits</code></td><td>No units for 2D {@link Compartment}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ThreeDimensionalCompartmentUnits</code></td><td>No units for 3D {@link Compartment}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>AllowedAttributesOnCompartment</code></td><td>Invalid attribute on &lt;compartment&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoUnitsOnCompartment</code></td><td>No units for &lt;compartment&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>InvalidSpeciesCompartmentRef</code></td><td>Invalid \'compartment\' reference</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>HasOnlySubsNoSpatialUnits</code></td><td>No \'spatialSizeUnits\' permitted if \'hasOnlySubstanceUnits\'=\'true\'</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSpatialUnitsInZeroD</code></td><td>No \'spatialSizeUnits\' permitted if compartment is zero-dimensional</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoConcentrationInZeroD</code></td><td>No \'initialConcentration\' permitted if compartment is zero-dimensional</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SpatialUnitsInOneD</code></td><td>Invalid value of \'spatialSizeUnits\' for a one-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SpatialUnitsInTwoD</code></td><td>Invalid value of \'spatialSizeUnits\' for a two-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SpatialUnitsInThreeD</code></td><td>Invalid value of \'spatialSizeUnits\' for a three-dimensional compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidSpeciesSusbstanceUnits</code></td><td>Invalid value of \'units\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>BothAmountAndConcentrationSet</code></td><td>Cannot set both \'initialConcentration\' and \'initialAmount\'</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NonBoundarySpeciesAssignedAndUsed</code></td><td>Cannot use non-boundary species in both reactions and rules simultaneously</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NonConstantSpeciesUsed</code></td><td>Cannot use non-boundary, constant species as reactant or product</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidSpeciesTypeRef</code></td><td>Invalid \'speciesType\' reference</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>MultSpeciesSameTypeInCompartment</code></td><td>Cannot have multiple species of the same type in the same compartment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>MissingSpeciesCompartment</code></td><td>Missing \'compartment\' value for species</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>SpatialSizeUnitsRemoved</code></td><td>Attribute \'spatialSizeUnits\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SubstanceUnitsOnSpecies</code></td><td>No substance units for {@link Species}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ConversionFactorOnSpecies</code></td><td>Invalid conversionFactor attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnSpecies</code></td><td>Invalid attribute on &lt;species&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidParameterUnits</code></td><td>Invalid value for \'units\' in parameter definition</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ParameterUnits</code></td><td>No units for parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ConversionFactorMustConstant</code></td><td>ConversionFactor must be constant parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnParameter</code></td><td>Invalid attribute on parameter</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidInitAssignSymbol</code></td><td>Invalid \'symbol\' reference in initial assignment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MultipleInitAssignments</code></td><td>Multiple initial assignments for the same \'symbol\' value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InitAssignmentAndRuleForSameId</code></td><td>Cannot set a value with both initial assignments and assignment rules simultaneously</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathElementPerInitialAssign</code></td><td>{@link InitialAssignment} must contain one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnInitialAssign</code></td><td>Invalid attribute on initialAssignment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidAssignRuleVariable</code></td><td>Invalid \'variable\' reference in assignment rule</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidRateRuleVariable</code></td><td>Invalid \'variable\' reference in rate rule</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AssignmentToConstantEntity</code></td><td>Cannot reassign a constant in an assignment rule</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>RateRuleForConstantEntity</code></td><td>Cannot reassign a constant in a rate rule</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>RepeatedRule10304</code></td><td></td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>CircularRuleDependency</code></td><td>Circular dependency involving rules and reactions</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathElementPerRule</code></td><td>{@link Rule} must contain one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnAssignRule</code></td><td>Invalid attribute on &lt;assignmentRule&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnRateRule</code></td><td>Invalid attribute on &lt;rateRule&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnAlgRule</code></td><td>Invalid attribute on &lt;algebraicRule&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ConstraintMathNotBoolean</code></td><td>Non-boolean math expression in constraint definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>IncorrectOrderInConstraint</code></td><td>Incorrect order of elements in constraint definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ConstraintNotInXHTMLNamespace</code></td><td>{@link Constraint} message is not in XHTML XML namespace</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ConstraintContainsXMLDecl</code></td><td>XML declarations not permitted in constraint messages</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ConstraintContainsDOCTYPE</code></td><td>XML DOCTYPE not permitted in constraint messages</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidConstraintContent</code></td><td>Invalid content for constraint message</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>OneMathElementPerConstraint</code></td><td>Only one math element on &lt;constraint&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMessageElementPerConstraint</code></td><td>Only one message element on &lt;constraint&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnConstraint</code></td><td>Invalid attribute on &lt;constraint&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoReactantsOrProducts</code></td><td>Cannot have a reaction with neither reactants nor products</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>IncorrectOrderInReaction</code></td><td>Incorrect ordering of components in reaction definition</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>EmptyListInReaction</code></td><td>{@link Reaction} components, if present, cannot be empty</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidReactantsProductsList</code></td><td>Invalid element in list of reactants or products</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidModifiersList</code></td><td>Invalid element in list of modifiers</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneSubElementPerReaction</code></td><td>Only one of subelement on &lt;reaction&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>CompartmentOnReaction</code></td><td>Invalid compartment attribute on &lt;reaction&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnReaction</code></td><td>Invalid attribute on &lt;reaction&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidSpeciesReference</code></td><td>Invalid \'species\' value in species reference</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>RepeatedRule20611</code></td><td></td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>BothStoichiometryAndMath</code></td><td>Cannot use both \'stoichiometry\' and &lt;stoichiometryMath&gt; simultaneously</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>AllowedAttributesOnSpeciesReference</code></td><td>Invalid attribute on &lt;speciesReference&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnModifier</code></td><td>Invalid attribute on &lt;modifierSpeciesReference&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>UndeclaredSpeciesRef</code></td><td>Undeclared species referenced in kinetic law formula</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>IncorrectOrderInKineticLaw</code></td><td>Incorrect ordering of components in kinetic law definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>EmptyListInKineticLaw</code></td><td>The list of parameters component, if present, cannot be empty</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NonConstantLocalParameter</code></td><td>Parameters local to a kinetic law must have \'constant\'=\'true\'</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SubsUnitsNoLongerValid</code></td><td>\'substanceUnits\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>TimeUnitsNoLongerValid</code></td><td>\'timeUnits\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>OneListOfPerKineticLaw</code></td><td>Only one listOfLocalParameters permitted on &lt;kineticLaw&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyLocalParamsInListOfLocalParams</code></td><td>Only LocalParameters allowed in {@link ListOfLocalParameters}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfLocalParam</code></td><td>Invalid attribute on &lt;listOfLocalParameters&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathPerKineticLaw</code></td><td>Only one math element on &lt;kineticLaw&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>UndeclaredSpeciesInStoichMath</code></td><td>Undeclared species referenced in &lt;stoichiometryMath&gt; formula</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>AllowedAttributesOnKineticLaw</code></td><td>Invalid attribute on &lt;kineticLaw&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfSpeciesRef</code></td><td>Invalid attribute on &lt;listOfSpeciesReferences&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfMods</code></td><td>Invalid attribute on &lt;listofModifiers&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnLocalParameter</code></td><td>Invalid attribute on &lt;localParameter&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MissingTriggerInEvent</code></td><td>Missing trigger in event definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>TriggerMathNotBoolean</code></td><td>Non-boolean math expression in trigger definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MissingEventAssignment</code></td><td>Missing event assignment in event definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>TimeUnitsEvent</code></td><td>Units of \'timeUnits\' are not time units</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>IncorrectOrderInEvent</code></td><td>Incorrect ordering of components in event definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ValuesFromTriggerTimeNeedDelay</code></td><td>\'useValuesFromTriggerTime\'=\'false\', but no delay defined in event</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>DelayNeedsValuesFromTriggerTime</code></td><td>{@link Delay} requires useValuesFromTriggerTime</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>OneMathPerTrigger</code></td><td>{@link Trigger} must have one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathPerDelay</code></td><td>{@link Delay} must have one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InvalidEventAssignmentVariable</code></td><td>Invalid value for \'variable\' in event assignment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>EventAssignmentForConstantEntity</code></td><td>Cannot assign to a constant component in an event assignment</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathPerEventAssignment</code></td><td>{@link EventAssignment} must have one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnEventAssignment</code></td><td>Invalid attribute on &lt;eventAssignment&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyOneDelayPerEvent</code></td><td>{@link Event} can only have one &lt;delay&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneListOfEventAssignmentsPerEvent</code></td><td>{@link Event} can only have one &lt;listOfEventAssignments&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyEventAssignInListOfEventAssign</code></td><td>&lt;listOfEventAssignments&gt; can only have &lt;eventAssignment&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnListOfEventAssign</code></td><td>Invalid attribute on &lt;listOfEventAssignments&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnEvent</code></td><td>Invalid attribute on &lt;event&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnTrigger</code></td><td>Invalid attribute on &lt;trigger&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnDelay</code></td><td>Invalid attribute on &lt;delay&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>PersistentNotBoolean</code></td><td>Persistent attribute on &lt;trigger&gt; must be boolean</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InitialValueNotBoolean</code></td><td>InitialValue attribute on &lt;trigger&gt; must be boolean</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OnlyOnePriorityPerEvent</code></td><td>{@link Event} can only have one &lt;priority&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>OneMathPerPriority</code></td><td>Priority must have one math element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AllowedAttributesOnPriority</code></td><td>Invalid attribute on &lt;priority&gt;</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>GeneralWarningNotSpecified</code></td><td></td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>CompartmentShouldHaveSize</code></td><td>It\'s best to define a size for every compartment in a model</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ParameterShouldHaveUnits</code></td><td>It\'s best to declare units for every parameter in a model</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>LocalParameterShadowsId</code></td><td>Local parameters defined in a kinetic law shadow global parameters</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>CannotConvertToL1V1</code></td><td>Cannot convert to SBML Level 1 Version 1</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoEventsInL1</code></td><td>SBML Level 1 does not support events</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoFunctionDefinitionsInL1</code></td><td>SBML Level 1 does not support function definitions</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoConstraintsInL1</code></td><td>SBML Level 1 does not support constraints</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NoInitialAssignmentsInL1</code></td><td>SBML Level 1 does not support initial assignments</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoSpeciesTypesInL1</code></td><td>SBML Level 1 does not support species types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoCompartmentTypeInL1</code></td><td>SBML Level 1 does not support compartment types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoNon3DComparmentsInL1</code></td><td>SBML Level 1 only supports three-dimensional compartments</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoFancyStoichiometryMathInL1</code></td><td>SBML Level 1 does not support non-integer nor non-rational stoichiometry formulas</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoNonIntegerStoichiometryInL1</code></td><td>SBML Level 1 does not support non-integer \'stoichiometry\' attribute values</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoUnitMultipliersOrOffsetsInL1</code></td><td>SBML Level 1 does not support multipliers or offsets in unit definitions</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>SpeciesCompartmentRequiredInL1</code></td><td>In SBML Level 1, a value for \'compartment\' is mandatory in species definitions</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoSpeciesSpatialSizeUnitsInL1</code></td><td>SBML Level 1 does not support species \'spatialSizeUnits\' settings</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSBOTermsInL1</code></td><td>SBML Level 1 does not support the \'sboTerm\' attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>StrictUnitsRequiredInL1</code></td><td>SBML Level 1 requires strict unit consistency</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ConversionFactorNotInL1</code></td><td>Conversion factor not supported in L1/2</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>CompartmentNotOnL1Reaction</code></td><td>{@link Compartment} not attribute on L1 {@link Reaction}</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ExtentUnitsNotSubstance</code></td><td>Extent units must be substance</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoConstraintsInL2v1</code></td><td>SBML Level 2 Version 1 does not support constraints</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NoInitialAssignmentsInL2v1</code></td><td>SBML Level 2 Version 1 does not support initial assignments</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoSpeciesTypeInL2v1</code></td><td>SBML Level 2 Version 1 does not support species types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoCompartmentTypeInL2v1</code></td><td>SBML Level 2 Version 1 does not support compartment types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSBOTermsInL2v1</code></td><td>SBML Level 2 Version 1 does not support the \'sboTerm\' attribute</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NoIdOnSpeciesReferenceInL2v1</code></td><td>SBML Level 2 Version 1 does not support the \'id\' attribute on species references</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NoDelayedEventAssignmentInL2v1</code></td><td>Attribute \'useValuesFromTriggerTime\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>StrictUnitsRequiredInL2v1</code></td><td>SBML Level 2 Version 1 requires strict unit consistency</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>IntegerSpatialDimensions</code></td><td>SBML Level 2 Version 1 requires spatial dimensions of 0 - 3</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>StoichiometryMathNotYetSupported</code></td><td>Conversion to {@link StoichiometryMath} not yet supported</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>PrioirtyLostFromL3</code></td><td>Prioirty not in Level 2 events</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NonPersistentNotSupported</code></td><td>Non persistent not in Level 2 events</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InitialValueFalseEventNotSupported</code></td><td>InitialValue assumed true in Level 2 events</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>SBOTermNotUniversalInL2v2</code></td><td>The \'sboTerm\' attribute is invalid for this component in Level 2 Version 2</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>NoUnitOffsetInL2v2</code></td><td>The unit \'offset\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawTimeUnitsInL2v2</code></td><td>The \'timeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawSubstanceUnitsInL2v2</code></td><td>The \'substanceUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoDelayedEventAssignmentInL2v2</code></td><td>Attribute \'useValuesFromTriggerTime\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ModelSBOBranchChangedBeyondL2v2</code></td><td>The allowable \'sboTerm\' values for model differ for this SBML Level+Version</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>StrictUnitsRequiredInL2v2</code></td><td>SBML Level 2 Version 2 requires strict unit consistency</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>StrictSBORequiredInL2v2</code></td><td>SBML Level 2 Version 2 requires strict sbo consistency</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>DuplicateAnnotationInvalidInL2v2</code></td><td>Duplicate top level annotations invalid in L2V2</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoUnitOffsetInL2v3</code></td><td>Attribute \'offset\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawTimeUnitsInL2v3</code></td><td>Attribute \'timeUnits\' not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawSubstanceUnitsInL2v3</code></td><td>Attribute \'substanceUnits\' not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSpeciesSpatialSizeUnitsInL2v3</code></td><td>Attribute \'spatialSizeUnits\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoEventTimeUnitsInL2v3</code></td><td>Attribute \'timeUnits\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoDelayedEventAssignmentInL2v3</code></td><td>Attribute \'useValuesFromTriggerTime\' not supported in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ModelSBOBranchChangedBeyondL2v3</code></td><td>The allowable \'sboTerm\' values for model differ for this SBML Level+Version</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>StrictUnitsRequiredInL2v3</code></td><td>SBML Level 2 Version 3 requires strict unit consistency</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>StrictSBORequiredInL2v3</code></td><td>SBML Level 2 Version 3 requires strict sbo consistency</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>DuplicateAnnotationInvalidInL2v3</code></td><td>Duplicate top level annotations invalid in L2V3</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoUnitOffsetInL2v4</code></td><td>The unit \'offset\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawTimeUnitsInL2v4</code></td><td>The \'timeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawSubstanceUnitsInL2v4</code></td><td>The \'substanceUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSpeciesSpatialSizeUnitsInL2v4</code></td><td>The \'spatialSizeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoEventTimeUnitsInL2v4</code></td><td>The \'timeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ModelSBOBranchChangedInL2v4</code></td><td>The allowable \'sboTerm\' values for model differ for this SBML Level+Version</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>DuplicateAnnotationInvalidInL2v4</code></td><td>Duplicate top level annotations invalid in L2V4</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSpeciesTypeInL3v1</code></td><td>SBML Level 3 Version 1 does not support species types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoCompartmentTypeInL3v1</code></td><td>SBML Level 3 Version 1 does not support compartment types</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoUnitOffsetInL3v1</code></td><td>The unit \'offset\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawTimeUnitsInL3v1</code></td><td>The \'timeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoKineticLawSubstanceUnitsInL3v1</code></td><td>The \'substanceUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoSpeciesSpatialSizeUnitsInL3v1</code></td><td>The \'spatialSizeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoEventTimeUnitsInL3v1</code></td><td>The \'timeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>ModelSBOBranchChangedInL3v1</code></td><td>The allowable \'sboTerm\' values for model differ for this SBML Level+Version</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>DuplicateAnnotationInvalidInL3v1</code></td><td>Duplicate top level annotations invalid in L3V1</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoCompartmentOutsideInL3v1</code></td><td>The \'outside\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NoStoichiometryMathInL3v1</code></td><td>SBML Level 3 Version 1 does not support stoichiometryMath</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidSBMLLevelVersion</code></td><td>Invalid SBML Level and Version</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>AnnotationNotesNotAllowedLevel1</code></td><td>Annotation on &lt;sbml&gt; not permitted in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidRuleOrdering</code></td><td>Invalid ordering of rules</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>RequiredPackagePresent</code></td><td>{@link Model} requires an L3 package</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>UnrequiredPackagePresent</code></td><td>Possible L3 package detected</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>SubsUnitsAllowedInKL</code></td><td>Disallowed value for attribute \'substanceUnits\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>TimeUnitsAllowedInKL</code></td><td>Disallowed value for attribute \'timeUnits\'</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>FormulaInLevel1KL</code></td><td>Only predefined functions are permitted in SBML Level 1 formulas</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>TimeUnitsRemoved</code></td><td>The \'timeUnits\' attribute is invalid in this Level+Version of SBML</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>BadMathML</code></td><td>Invalid MathML expression</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>FailedMathMLReadOfDouble</code></td><td>Failed to read floating-point number</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>FailedMathMLReadOfInteger</code></td><td>Failed to read an integer</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>FailedMathMLReadOfExponential</code></td><td>Failed to read an exponential expression</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>FailedMathMLReadOfRational</code></td><td>Failed to read a rational expression</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>BadMathMLNodeType</code></td><td>Invalid MathML element</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoTimeSymbolInFunctionDef</code></td><td>&lt;csymbol&gt; for \'time\' used within the &lt;math&gt; of a function definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>NoBodyInFunctionDef</code></td><td>There must be a body within the &lt;math&gt; of a function definition</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>InconsistentExponUnitsWarnings</code></td><td></td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>UndeclaredUnits</code></td><td>Undeclared units</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>UnrecognisedSBOTerm</code></td><td>Unrecognized \'sboTerm\' value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>ObseleteSBOTerm</code></td><td>Obsolete \'sboTerm\' value</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td><td class=\'s-warning\'>W</td></tr>
<tr><td><code>IncorrectCompartmentSpatialDimensions</code></td><td>in SBML Level 1, only three-dimensional compartments are permitted</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>CompartmentTypeNotValidAttribute</code></td><td>{@link Compartment} types not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ConstantNotValidAttribute</code></td><td>Attribute \'constant\' not supported on this component in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>MetaIdNotValidAttribute</code></td><td>Attribute \'metaid\' not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SBOTermNotValidAttributeBeforeL2V3</code></td><td>\'sboTerm\' not available on this component before SBML Level 2 Version 3</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidL1CompartmentUnits</code></td><td>Invalid units for a compartment in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>L1V1CompartmentVolumeReqd</code></td><td>{@link Compartment} volume must be specified</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>CompartmentTypeNotValidComponent</code></td><td>{@link Compartment} types not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ConstraintNotValidComponent</code></td><td>Constraints not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>EventNotValidComponent</code></td><td>Events not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SBOTermNotValidAttributeBeforeL2V2</code></td><td>The \'sboTerm\' attribute is invalid for this component before Level 2 Version 2</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>FuncDefNotValidComponent</code></td><td>Function definitions are not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InitialAssignNotValidComponent</code></td><td>Initial assignments are not supported in this Level+Version of SBML</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>VariableNotValidAttribute</code></td><td>Attribute \'variable\' not valid</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>UnitsNotValidAttribute</code></td><td>Attribute \'units\' not valid</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>ConstantSpeciesNotValidAttribute</code></td><td>Attribute \'constant\' on species not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SpatialSizeUnitsNotValidAttribute</code></td><td>Attribute \'spatialSizeUnits\' on species not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SpeciesTypeNotValidAttribute</code></td><td>Attribute \'speciesType\' on species not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>HasOnlySubsUnitsNotValidAttribute</code></td><td>Attribute \'hasOnlySubstanceUnits\' on species not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>IdNotValidAttribute</code></td><td>Attribute \'id\' on species references not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>NameNotValidAttribute</code></td><td>Attribute \'name\' on species references not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>SpeciesTypeNotValidComponent</code></td><td>{@link Species} types not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>StoichiometryMathNotValidComponent</code></td><td>&lt;stoichiometryMath&gt; not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>MultiplierNotValidAttribute</code></td><td>Attribute \'multiplier\' on units not supported in SBML Level 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>OffsetNotValidAttribute</code></td><td>Attribute \'offset\' on units only available in SBML Level 2 Version 1</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td><td class=\'s-na\'>N</td></tr>
<tr><td><code>InvalidTargetLevelVersion</code></td><td>The target Level/Version does not exist</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
<tr><td><code>L3NotSupported</code></td><td>SBML Level 3 is not yet supported</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td><td class=\'s-error\'>E</td></tr>
</table>
</center>

 * <p>
 * <h3><a class=\'anchor\'
 * name=\'SBMLErrorCategory_t\'>Category codes associated with {@link SBMLError} objects</a></h3>
 * <p>
 * As discussed above, each {@link SBMLError} object contains a value for a
 * category identifier, describing the type of issue that the {@link SBMLError}
 * object represents.  The category can be retrieved from an {@link SBMLError}
 * object using the method {@link SBMLError#getCategory()}.  The following table
 * lists each possible value and a brief description of its meaning.
 * <p>
 * As is the case with the error codes, in the libSBML Java language
 * interface, the category identifiers are currently implemented as static
 * integer constants defined in the interface class
 * {@link libsbmlConstants}.
 * <p>
 * The following table lists each possible value and a brief description of
 * its meaning.
 * <p>
 * <p>
 * <p>
 * <center>
 * <table width=\'90%\' cellspacing=\'1\' cellpadding=\'4\' border=\'0\'  class=\'text-table normal-font alt-row-colors\'>
 *  <tr style=\'background: lightgray\' class=\'normal-font\'>
 *      <th>Enumerator</td>
 *      <th>Meaning</td>
 *  </tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML LIBSBML_CAT_SBML}</td><td>General error not falling into
 * another category below.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML_L1_COMPAT LIBSBML_CAT_SBML_L1_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model from SBML Level&nbsp;2 to SBML
 * Level&nbsp;1.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML_L2V1_COMPAT LIBSBML_CAT_SBML_L2V1_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;1.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML_L2V2_COMPAT LIBSBML_CAT_SBML_L2V2_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;2.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_GENERAL_CONSISTENCY LIBSBML_CAT_GENERAL_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating general SBML constructs.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 2xxxx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_IDENTIFIER_CONSISTENCY LIBSBML_CAT_IDENTIFIER_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating symbol identifiers in a model.
 * With respect to the SBML specification, these concern failures in
 * applying the validation rules numbered 103xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr>  
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_UNITS_CONSISTENCY LIBSBML_CAT_UNITS_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating the units of measurement on
 * quantities in a model.  With respect to the SBML specification, these
 * concern failures in applying the validation rules numbered 105xx in the
 * Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_MATHML_CONSISTENCY LIBSBML_CAT_MATHML_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating MathML formulas in a model.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 102xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBO_CONSISTENCY LIBSBML_CAT_SBO_CONSISTENCY}</td><td>Category of errors
 * that can occur while validating {@link SBO} identifiers in a model.  With
 * respect to the SBML specification, these concern failures in applying
 * the validation rules numbered 107xx in the Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_OVERDETERMINED_MODEL LIBSBML_CAT_OVERDETERMINED_MODEL}</td><td>Error in the
 * system of equations in the model: the system is overdetermined,
 * therefore violating a tenet of proper SBML.  With respect to the SBML
 * specification, this is validation rule #10601 in the SBML Level&nbsp;2 Versions&nbsp;2&ndash;4
 * and Level&nbsp;3 Version&nbsp;1 specifications.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML_L2V3_COMPAT LIBSBML_CAT_SBML_L2V3_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;3.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_MODELING_PRACTICE LIBSBML_CAT_MODELING_PRACTICE}</td><td>Category of
 * warnings about recommended good practices involving SBML and
 * computational modeling.  (These are tests performed by libSBML and do
 * not have equivalent SBML validation rules.)</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_INTERNAL_CONSISTENCY LIBSBML_CAT_INTERNAL_CONSISTENCY}</td><td>Category of
 * errors that can occur while validating libSBML\'s internal representation
 * of SBML constructs. (These are tests performed by libSBML and do
 * not have equivalent SBML validation rules.)</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML_L2V4_COMPAT LIBSBML_CAT_SBML_L2V4_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;2
 * Version&nbsp;4.</td></tr> 
 * <tr><td>{@link  libsbmlConstants#LIBSBML_CAT_SBML_L3V1_COMPAT LIBSBML_CAT_SBML_L3V1_COMPAT}</td><td>Category of errors
 * that can only occur during attempted translation from one Level/Version
 * of SBML to another.  This particular category applies to errors
 * encountered while trying to convert a model to SBML Level&nbsp;3
 * Version&nbsp;1.</td></tr> 
 * <p>
 * </table>
 * </center>
 * <p>
 * <h3><a class=\'anchor\'
 * name=\'SBMLErrorSeverity_t\'>Severity codes associated with {@link SBMLError}
 * objects</h3>
 * <p>
 * In libSBML version 5.0.0

 * there are no additional severity codes beyond those defined by {@link XMLError}.  
 * They are implemented as static integer constants defined in the interface 
 * class <code><a href=\'libsbmlConstants.html\'>libsbmlConstants</a></code>, 
 * and have names beginning with <code>LIBSBML_SEV_</code>.
 * <p>
 */
"

%javamethodmodifiers SBMLError::SBMLError( const unsigned int errorId  = 0 , const unsigned int level    = SBML_DEFAULT_LEVEL , const unsigned int version  = SBML_DEFAULT_VERSION , const std::string& details  = "" , const unsigned int line     = 0 , const unsigned int column   = 0 , const unsigned int severity = LIBSBML_SEV_ERROR , const unsigned int category = LIBSBML_CAT_SBML ) "
  /**
   * Creates a new {@link SBMLError} to report that something occurred during SBML
   * processing.
   * <p>
   * When a libSBML operation on SBML content results in a warning, error
   * or other diagnostic, the issue is reported as an {@link SBMLError} object.
   * {@link SBMLError} objects have identification numbers to indicate the nature
   * of the exception.  These numbers are
   * defined as longeger constants in the file
   * \'libsbmlConstants.html\'.  See the <a class=\'el\'
   * href=\'#SBMLErrorCode_t\'>top of this documentation page</a> for a table
   * listing the possible values and their meanings.  The argument 
   * <code>errorId</code> to this constructor <em>can</em> be (but does not have to be) a
   * value from this set of constants.  If it 
   * <em>is</em> one of the predefined error identifiers, the {@link SBMLError} class
   * assumes the error is a low-level system or SBML layer error and
   * <em>prepends</em> a built-in, predefined error message to any string
   * passed in the argument <code>details</code> to this constructor.  In addition,
   * all the predefined error identifiers have associated values for the 
   * <code>severity</code> and <code>category</code> codes, and these fields are filled-in using
   * the libSBML defaults for each different error identifier. 
   * <p>
   * If the error identifier <code>errorId</code> is a number greater than 99999, the
   * {@link SBMLError} class assumes the error was generated from another part of
   * the software and does not do additional filling in of values beyond
   * the default in the constructor itself.  This allows {@link SBMLError} to serve
   * as a base class for other errors, such as for user-defined validation
   * rules (see Validator).  Callers should fill in all the parameters with
   * suitable values if generating errors with codes greater than 99999 to
   * make maximum use of the {@link SBMLError} facilities.
   * <p>
   * As mentioned above, 
   * there are additional constants defined for <a class=\'el\'
   * href=\'#SBMLErrorSeverity_t\'>standard severity</a> and <a class=\'el\'
   * href=\'#SBMLErrorCategory_t\'>standard category</a> codes, and every predefined 
   * error in libSBML has an associated value for severity and category taken
   * from these predefined sets.  These constants have symbol names
   * prefixed with <code>LIBSBML_SEV_</code> and <code>LIBSBML_CAT_</code>,
   * respectively.  If the value of <code>errorId</code> is one of the standard error
   * codes, callers do not need to fill in <code>severity</code> and <code>category</code> in a
   * call to this constructor.  Conversely, if <code>errorId</code> is not an existing
   * SBML-level error code, callers can use other values for <code>severity</code> and
   * <code>category</code>. 
   * <p>
   * Please see the top of the documentation for {@link SBMLError} for a longer
   * discussion of the possible error codes, their meanings, and their
   * applicability to different combinations of Level+Version of SBML.
   * <p>
   * @param errorId a long integer, the identification number of the error.
   * <p>
   * @param level the SBML Level of the SBML model
   * <p>
   * @param version the SBML Version within the Level of the SBML model
   * <p>
   * @param details a string containing additional details about the error.
   * If the error code in <code>errorId</code> is one that is recognized by {@link SBMLError},
   * the given message is <em>appended</em> to a predefined message associated
   * with the given code.  If the error code is not recognized, the message
   * is stored as-is as the text of the error.
   * <p>
   * @param line a long integer, the line number at which the error occured.
   * <p>
   * @param column a long integer, the column number at which the error occured.
   * <p>
   * @param severity an integer indicating severity of the error.
   * <p>
   * @param category an integer indicating the category to which the error
   * belongs.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers SBMLError::SBMLError(const SBMLError& orig) "
  /**
   * Copy constructor; creates a copy of this {@link SBMLError}.
   */
 public";


%typemap(javaimports) CVTerm "
/** 
 * Representation of MIRIAM-compliant controlled vocabulary annotation.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
 * format for annotating models when (a) referring to controlled vocabulary
 * terms and database identifiers that define and describe biological and
 * biochemical entities, and (b) describing the creator of a model and the
 * model\'s modification history.  This SBML format is a concrete syntax that
 * conforms to the guidelines of MIRIAM (\'Minimum Information Requested in
 * the Annotation of biochemical Models\', <i>Nature Biotechnology</i>,
 * vol. 23, no. 12, Dec. 2005).  The format uses a subset of W3C RDF (<a
 * target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
 * Format</a>).  In order to help application developers work with
 * annotations in this format, libSBML provides several helper classes that
 * provide higher-level interfaces to the data elements; these classes
 * include {@link CVTerm}, {@link ModelCreator}, {@link ModelHistory}, {@link RDFAnnotationParser}, and
 * {@link Date}.
 * <p>
 * <h2>Components of an SBML annotation</h2>
 * <p>
 * The SBML annotation format consists of RDF-based content placed inside
 * an <code>&lt;annotation&gt;</code> element attached to an SBML component
 * such as {@link Species}, {@link Compartment}, etc.  The following template illustrates
 * the different parts of SBML annotations in XML form:
 * <p>
 <div class=\'fragment\'>
 &lt;<span style=\'background-color: #bbb\'>SBML_ELEMENT</span> <span style=\'background-color: #d0eed0\'>+++</span> metaid=&quot;<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot; <span style=\'background-color: #d0eed0\'>+++</span>&gt;<br>
 &nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
 &nbsp;&nbsp;&lt;annotation&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:dc=\'http://purl.org/dc/elements/1.1/\'<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:dcterm=\'http://purl.org/dc/terms/\'<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:vcard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' &gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>URI</span>&quot; /&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Description&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:RDF&gt;<br>
 &nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
 &nbsp;&nbsp;&lt;/annotation&gt;<br>
 &nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
 &lt;/<span style=\'background-color: #bbb\'>SBML_ELEMENT</span>&gt;<br>
 </div>
 * <p>
 * In the template above, the placeholder
 * <span class=\'code\' style=\'background-color: #bbb\'>SBML_ELEMENT</span> stands for
 * the XML tag name of an SBML model component (e.g., <code>model</code>,
 * <code>reaction</code>, etc.) and the placeholder 
 * <span class=\'code\' style=\'border-bottom: 1px solid black\'>meta id</span>
 * stands for the element\'s meta identifier, which is a field available
 * on all SBML components derived from the {@link SBase} base object class.
 * The <span style=\'border-bottom: 2px dotted #888\'>dotted</span>
 * portions are optional, the symbol
 * <span class=\'code\' style=\'background-color: #d0eed0\'>+++</span> is a placeholder
 * for either no content or valid XML content that is not defined by
 * this annotation scheme, and the ellipses
 * <span class=\'code\' style=\'background-color: #edd\'>...</span>
 * are placeholders for zero or more elements of the same form as the
 * immediately preceding element.  The optional content
 * <span class=\'code\' style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span>
 * is a creation and modification history; in libSBML, this is stored
 * using {@link ModelHistory} objects.
 * <p>
 * The placeholder <span class=\'code\' style=\'background-color: #bbb\'>RELATION_ELEMENT</span>
 * refers to a BioModels.net qualifier element name.  This is an element in
 * either the XML namespace
 * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
 * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
 * (for biological qualifier).  The <span class=\'code\' style=\'background-color: #d0d0ee\'>URI</span>
 * is a required data value that uniquely identifies a resource and
 * data within that resource to which the annotation refers.  (Since
 * a URI is only a label, not an address, applications will often
 * want a means of looking up the resource to which the URI refers.
 * Providing the facilities for doing this is the purpose of
 * <a target=\'_blank\' href=\'http://biomodels.net/miriam\'>MIRIAM Resources</a>.)
 * <p>
 * The relation-resource pairs above are the \'controlled vocabulary\' terms
 * that which {@link CVTerm} is designed to store and manipulate.  The next section
 * describes these parts in more detail.  For more information about
 * SBML annotations in general, please refer to Section&nbsp;6 in the
 * SBML Level&nbsp;2 (Versions 2&ndash;4) or Level&nbsp;3 specification
 * documents.
 * <p>
 * <p>
 * <h2>The parts of a {@link CVTerm}</h2>
 * <p>
 * Annotations that refer to controlled vocabularies are managed in libSBML
 * using {@link CVTerm} objects.  A set of RDF-based annotations attached to a
 * given SBML <code>&lt;annotation&gt;</code> element are read by
 * {@link RDFAnnotationParser} and converted into a list of these {@link CVTerm} objects.
 * Each {@link CVTerm} object instance stores the following components of an
 * annotation:
 * <p>
 * <ul>
 * <p>
 * <li>The <em>qualifier</em>, which can be a BioModels.net \'biological
 * qualifier\', a BioModels.net \'model qualifier\', or an unknown qualifier
 * (as far as the {@link CVTerm} class is concerned).  Qualifiers are used in
 * MIRIAM to indicate the nature of the relationship between the object
 * being annotated and the resource.  In {@link CVTerm}, the qualifiers can be
 * manipulated using the methods {@link CVTerm#getQualifierType()},
 * {@link CVTerm#setQualifierType(int type)}, and related methods.
 * <p>
 * <li>The <em>resource</em>, represented by a URI (which, we must remind
 * developers, is not the same as a URL).  In the {@link CVTerm} class, the
 * resource component can be manipulated using the methods
 * {@link CVTerm#addResource(String resource)} and
 * {@link CVTerm#removeResource(String resource)}.
 * <p>
 * </ul>
 * <p>
 * Note that a {@link CVTerm} contains a single qualifier, but possibly more than
 * one resource.  This corresponds to the possibility of an annotation that
 * points to multiple resources, all of which are qualified by the same
 * BioModels.net qualifier.  The {@link CVTerm} object class supports this by
 * supporting a list of resources.
 * <p>
 * Detailed explanations of the qualifiers defined by BioModels.net can be
 * found at <a target=\'_blank\'
 * href=\'http://biomodels.net/qualifiers\'>http://biomodels.net/qualifiers</a>.
 */
"

%javamethodmodifiers CVTerm::CVTerm(QualifierType_t type = UNKNOWN_QUALIFIER) "
  /**
   * Creates an empty {@link CVTerm}, optionally with the given
   * qualifier &nbsp; <code>type</code>.
   * <p>
   * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
   * format for annotating models when (a) referring to controlled
   * vocabulary terms and database identifiers that define and describe
   * biological and other entities, and (b) describing the creator of a
   * model and the model\'s modification history.  The annotation content is
   * stored in <code>&lt;annotation&gt;</code> elements attached to
   * individual SBML elements.  The format for storing the content inside
   * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
   * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
   * Format</a>) expressed in XML.  The {@link CVTerm} class provides a programming
   * interface for working directly with controlled vocabulary term (\'CV
   * term\') objects without having to deal directly with the XML form.
   * When libSBML reads in an SBML model containing RDF annotations, it
   * parses those annotations into a list of {@link CVTerm} objects, and when
   * writing a model, it parses the {@link CVTerm} objects back into the
   * appropriate SBML <code>&lt;annotation&gt;</code> structure.
   * <p>
   * This method creates an empty {@link CVTerm} object.  The possible qualifier
   * types usable as values of <code>type</code> are {@link 
   * libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER} and {@link 
   * libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER}.  If
   * an explicit value for <code>type</code> is not given, this method defaults to
   * using {@link  libsbmlConstants#UNKNOWN_QUALIFIER
   * UNKNOWN_QUALIFIER}.  The
   * qualifier type 
   * can be set later using the
   * {@link CVTerm#setQualifierType(int type)} method.
   * <p>
   * Different BioModels.net qualifier elements encode different types of
   * relationships.  Please refer to the SBML specification or the <a
   * target=\'_blank\' href=\'http://biomodels.net/qualifiers/\'>BioModels.net
   * qualifiers web page</a> for an explanation of the meaning of these
   * different qualifiers.
   * <p>
   * @param type a qualifier type
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers CVTerm::CVTerm(const XMLNode node) "
  /**
   * Creates a new {@link CVTerm} from the given {@link XMLNode}.
   * <p>
   * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
   * format for annotating models when (a) referring to controlled
   * vocabulary terms and database identifiers that define and describe
   * biological and other entities, and (b) describing the creator of a
   * model and the model\'s modification history.  The annotation content is
   * stored in <code>&lt;annotation&gt;</code> elements attached to
   * individual SBML elements.  The format for storing the content inside
   * SBML <code>&lt;annotation&gt;</code> elements is a subset of W3C RDF
   * (<a target=\'_blank\' href=\'http://www.w3.org/RDF/\'>Resource Description
   * Format</a>) expressed in XML.  The {@link CVTerm} class provides a programming
   * interface for working directly with controlled vocabulary term (\'CV
   * term\') objects without having to deal directly with the XML form.
   * When libSBML reads in an SBML model containing RDF annotations, it
   * parses those annotations into a list of {@link CVTerm} objects, and when
   * writing a model, it parses the {@link CVTerm} objects back into the
   * appropriate SBML <code>&lt;annotation&gt;</code> structure.
   * <p>
   * This method creates a {@link CVTerm} object from the {@link XMLNode} object <code>node</code>.
   * Recall that {@link XMLNode} is a node in an XML tree of elements, and each
   * such element can be placed in a namespace.  This constructor looks for
   * the element to be in the XML namespaces
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for
   * model qualifiers) and
   * <code>\'http://biomodels.net/biology-qualifiers\'</code> (for
   * biological qualifier), and if they are, creates {@link CVTerm} objects for
   * the result.
   * <p>
   * @param node an XMLNode representing a {@link CVTerm}.
   * <p>
   * @note This method assumes that the given {@link XMLNode} object <code>node</code> is of
   * the correct structural form.
   */
 public";


%javamethodmodifiers CVTerm::CVTerm(const CVTerm& orig) "
  /**
   * Copy constructor; creates a copy of a {@link CVTerm} object.
   * <p>
   * @param orig the {@link CVTerm} instance to copy.
   */
 public";


%javamethodmodifiers CVTerm::clone() const "
  /**
   * Creates and returns a deep copy of this {@link CVTerm} object.
   * <p>
   * @return a (deep) copy of this {@link CVTerm}.
   */
 public";


%javamethodmodifiers CVTerm::getQualifierType "
  /**
   * Returns the qualifier type of this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The placeholder <span class=\'code\' style=\'background-color:
   * #bbb\'>RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  The present method returns a code
   * identifying which one of these two relationship namespaces is being
   * used; any other qualifier in libSBML is considered unknown (as far as
   * the {@link CVTerm} class is concerned).  Consequently, this method will return
   * one of the following values:
   * <p>
   * <li> {@link  libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER}
   * <li> {@link  libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER}
   * <li> {@link  libsbmlConstants#UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER}
   * <p>
   * The specific relationship of this {@link CVTerm} to the enclosing SBML object
   * can be determined using the {@link CVTerm} methods such as
   * getModelQualifierType() and getBiologicalQualifierType().  Callers
   * will typically want to use the present method to find out which one of
   * the <em>other</em> two methods to call to find out the specific
   * relationship.
   * <p>
   * @return the qualifier type
   * of this object or {@link  libsbmlConstants#UNKNOWN_QUALIFIER UNKNOWN_QUALIFIER}
   * (the default).
   * <p>
   * @see #getResources()
   * @see #getModelQualifierType()
   * @see #getBiologicalQualifierType()
   */
 public";


%javamethodmodifiers CVTerm::getModelQualifierType "
  /**
   * Returns the model qualifier type of this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The placeholder <span class=\'code\' style=\'background-color:
   * #bbb\'>RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  Callers will typically use
   * getQualifierType() to find out the type of qualifier relevant to this
   * particular {@link CVTerm} object, then if it is a <em>model</em> qualifier, use the
   * present method to determine the specific qualifier.  The set of known
   * model qualifiers is, at the time of this libSBML release, the
   * following:
   * <p>
   * <li> {@link  libsbmlConstants#BQM_IS BQM_IS}
   * <li> {@link  libsbmlConstants#BQM_IS_DESCRIBED_BY BQM_IS_DESCRIBED_BY}
   * <li> {@link  libsbmlConstants#BQM_IS_DERIVED_FROM BQM_IS_DERIVED_FROM}
   * <p>
   * Any other BioModels.net qualifier found in the model is considered
   * unknown by libSBML and reported as
   * {@link  libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}.
   * <p>
   * @return the model qualifier type
   * of this object or {@link  libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}
   * (the default).
   */
 public";


%javamethodmodifiers CVTerm::getBiologicalQualifierType "
  /**
   * Returns the biological qualifier type of this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The placeholder <span class=\'code\' style=\'background-color:
   * #bbb\'>RELATION_ELEMENT</span> refers to a BioModels.net qualifier
   * element name.  This is an element in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).  Callers will typically use
   * getQualifierType() to find out the type of qualifier relevant to this
   * particular {@link CVTerm} object, then if it is a <em>biological</em> qualifier,
   * use the present method to determine the specific qualifier.  The set
   * of known biological qualifiers is, at the time of this libSBML
   * release, the following:
   * <p>
   * <li> {@link  libsbmlConstants#BQB_IS BQB_IS}
   * <li> {@link  libsbmlConstants#BQB_HAS_PART BQB_HAS_PART}
   * <li> {@link  libsbmlConstants#BQB_IS_PART_OF BQB_IS_PART_OF}
   * <li> {@link  libsbmlConstants#BQB_IS_VERSION_OF BQB_IS_VERSION_OF}
   * <li> {@link  libsbmlConstants#BQB_HAS_VERSION BQB_HAS_VERSION}
   * <li> {@link  libsbmlConstants#BQB_IS_HOMOLOG_TO BQB_IS_HOMOLOG_TO}
   * <li> {@link  libsbmlConstants#BQB_IS_DESCRIBED_BY BQB_IS_DESCRIBED_BY}
   * <li> {@link  libsbmlConstants#BQB_IS_ENCODED_BY BQB_IS_ENCODED_BY}
   * <li> {@link  libsbmlConstants#BQB_ENCODES BQB_ENCODES}
   * <li> {@link  libsbmlConstants#BQB_OCCURS_IN BQB_OCCURS_IN}
   * <li> {@link  libsbmlConstants#BQB_HAS_PROPERTY BQB_HAS_PROPERTY}
   * <li> {@link  libsbmlConstants#BQB_IS_PROPERTY_OF BQB_IS_PROPERTY_OF}
   * <p>
   * Any other BioModels.net qualifier found in the model is considered
   * unknown by libSBML and reported as
   * {@link  libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}.
   * <p>
   * @return the biology qualifier type
   * of this object or {@link  libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}
   * (the default).
   */
 public";


%javamethodmodifiers CVTerm::getResources "
  /**
   * Returns the resource references for this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values shown in the template above are stored internally in
   * {@link CVTerm} objects using an {@link XMLAttributes} object.  Each attribute stored
   * inside the {@link XMLAttributes} will have the same name (specifically,
   * &quot;<code>rdf:resource</code>&quot;) but a different value, and the
   * value will be a <span class=\'code\' style=\'background-color:
   * #d0d0ee\'>resource URI</span> shown in the XML template above.
   * <p>
   * A valid {@link CVTerm} entity must always have at least one resource and
   * a value for the relationship qualifier.
   * <p>
   * @return the {@link XMLAttributes} that store the resources of this {@link CVTerm}.
   * <p>
   * @see #getQualifierType()
   * @see #addResource(String resource)
   * @see #getResourceURI(long n)
   */
 public";


%javamethodmodifiers CVTerm::getResources() const "
  /**
   * Returns the resources for this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values shown in the template above are stored internally in
   * {@link CVTerm} objects using an {@link XMLAttributes} object.  Each attribute stored
   * inside the {@link XMLAttributes} will have the same name (specifically,
   * &quot;<code>rdf:resource</code>&quot;) but a different value, and the
   * value will be a <span class=\'code\' style=\'background-color:
   * #d0d0ee\'>resource URI</span> shown in the XML template above.
   * <p>
   * A valid {@link CVTerm} entity must always have at least one resource and
   * a value for the relationship qualifier.
   * <p>
   * @return the {@link XMLAttributes} that store the resources of this {@link CVTerm}.
   * <p>
   * @see #getQualifierType()
   * @see #addResource(String resource)
   * @see #getResourceURI(long n)
   */
 public";


%javamethodmodifiers CVTerm::getNumResources "
  /**
   * Returns the number of resources for this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The fragment above illustrates that there can be more than one
   * resource referenced by a given relationship annotation (i.e., the
   * <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  The present
   * method returns a count of the resources stored in this {@link CVTerm} object.
   * <p>
   * @return the number of resources in the set of {@link XMLAttributes}
   * of this {@link CVTerm}.
   * <p>
   * @see #getResources()
   * @see #getResourceURI(long n)
   */
 public";


%javamethodmodifiers CVTerm::getResourceURI(unsigned int n) "
  /**
   * Returns the value of the <em>n</em>th resource for this {@link CVTerm} object.
   * <p>
   * The RDF element used in the SBML format for referring to external
entities is <code>&lt;rdf:Description&gt;</code>, with a
<code>&lt;rdf:Bag&gt;</code> element inside of it containing one or
more <code>&lt;rdf:li&gt;</code> elements.  The following template
illustrates the structure:
<DIV class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #ddd; border-bottom: 2px dotted #888\'>HISTORY</span><br>
&nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&lt;/rdf:Description&gt;<br>
</div>
In the template above, the placeholder <span class=\'code\'
style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
element\'s meta identifier, which is a field available on all SBML
components derived from the {@link SBase} base object class.  The <span
style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
optional, and the ellipses <span class=\'code\' style=\'background-color:
#edd\'>...</span> are placeholders for zero or more elements of the
same form as the immediately preceding element.

   * <p>
   * The fragment above illustrates that there can be more than one
   * resource referenced by a given relationship annotation (i.e., the
   * <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> values associated with a particular <span class=\'code\'
   * style=\'background-color: #bbb\'>RELATION_ELEMENT</span>).  LibSBML
   * stores all resource URIs in a single {@link CVTerm} object for a given
   * relationship.  Callers can use getNumResources() to find out how many
   * resources are stored in this {@link CVTerm} object, then call this method to
   * retrieve the <em>n</em>th resource URI.
   * <p>
   * @param n the index of the resource to query
   * <p>
   * @return string representing the value of the nth resource
   * in the set of {@link XMLAttributes} of this {@link CVTerm}.
   * <p>
   * @see #getNumResources()
   * @see #getQualifierType()
   */
 public";


%javamethodmodifiers CVTerm::setQualifierType(QualifierType_t type) "
  /**
   * Sets the qualifier code of this
   * {@link CVTerm} object.
   * <p>
   * @param type the qualifier type.
   * The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <p>
   * @see #getQualifierType()
   */
 public";


%javamethodmodifiers CVTerm::setModelQualifierType(ModelQualifierType_t type) "
  /**
   * Sets the model qualifier type
   * of this {@link CVTerm} object.
   * <p>
   * @param type the model qualifier type
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <p>
   * @note If the Qualifier Type of this object is not
   * {@link  libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER}, 
   * then the ModelQualifierType_t value will default to
   * {@link  libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}.
   * <p>
   * @see #getQualifierType()
   * @see #setQualifierType(int type)
   */
 public";


%javamethodmodifiers CVTerm::setBiologicalQualifierType(BiolQualifierType_t type) "
  /**
   * Sets the biology qualifier type
   * of this {@link CVTerm} object.
   * <p>
   * @param type the biology qualifier type.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <p>
   * @note If the Qualifier Type of this object is not
   * {@link  libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER},
   * then the biology qualifier type will default
   * to {@link  libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}.
   * <p>
   * @see #getQualifierType()
   * @see #setQualifierType(int type)
   */
 public";


%javamethodmodifiers CVTerm::setModelQualifierType(const std::string& qualifier) "
  /**
   * Sets the model qualifier type code value of this {@link CVTerm} object.
   * <p>
   * @param qualifier the string representing a model qualifier
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <p>
   * @note If the Qualifier Type of this object is not
   * {@link  libsbmlConstants#MODEL_QUALIFIER MODEL_QUALIFIER}, 
   * then the ModelQualifierType_t value will default to
   * {@link  libsbmlConstants#BQM_UNKNOWN BQM_UNKNOWN}.
   * <p>
   * @see #getQualifierType()
   * @see #setQualifierType(int type)
   */
 public";


%javamethodmodifiers CVTerm::setBiologicalQualifierType(const std::string& qualifier) "
  /**
   * Sets the biology qualifier type code of this {@link CVTerm} object.
   * <p>
   * @param qualifier the string representing a biology qualifier
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <p>
   * @note If the Qualifier Type of this object is not
   * {@link  libsbmlConstants#BIOLOGICAL_QUALIFIER BIOLOGICAL_QUALIFIER},
   * then the biology qualifier type code value will default
   * to {@link  libsbmlConstants#BQB_UNKNOWN BQB_UNKNOWN}.
   * <p>
   * @see #getQualifierType()
   * @see #setQualifierType(int type)
   */
 public";


%javamethodmodifiers CVTerm::addResource(const std::string& resource) "
  /**
   * Adds a resource reference to this {@link CVTerm} object.
   * <p>
   * The SBML Level&nbsp;2 and Level&nbsp;3 specifications define a simple
   * standardized format for annotating models with references to
   * controlled vocabulary terms and database identifiers that define and
   * describe biological or other entities.  This annotation format
   * consists of RDF-based content placed inside an
   * <code>&lt;annotation&gt;</code> element attached to an SBML component
   * such as {@link Species}, {@link Compartment}, etc.
   * <p>
   * The specific RDF element used in this SBML format for referring to
   * external entities is <code>&lt;rdf:Description&gt;</code>, with a
   * <code>&lt;rdf:Bag&gt;</code> element containing one or more
   * <code>&lt;rdf:li&gt;</code> elements.  Each such element refers to a
   * data item in an external resource; the resource and data item are
   * together identified uniquely using a URI.  The following template
   * illustrates the structure:
   * <p>
   <DIV class=\'fragment\'>
   &lt;rdf:Description rdf:about=&quot;#<span style=\'border-bottom: 1px solid black\'>meta id</span>&quot;&gt;<br>
   &nbsp;&nbsp;<span style=\'background-color: #e0e0e0; border-bottom: 2px dotted #888\'>HISTORY</span><br>
   &nbsp;&nbsp;&lt;<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
   &nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:resource=&quot;<span style=\'background-color: #d0d0ee\'>resource URI</span>&quot; /&gt;<br>
   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
   &nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
   &nbsp;&nbsp;&lt;/<span style=\'background-color: #bbb\'>RELATION_ELEMENT</span>&gt;<br>
   &nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
   &lt;/rdf:Description&gt;<br>
   </div>
   * <p>
   * In the template above, the placeholder <span class=\'code\'
   * style=\'border-bottom: 1px solid black\'>meta id</span> stands for the
   * element\'s meta identifier, which is a field available on all SBML
   * components derived from the {@link SBase} base object class.  The <span
   * style=\'border-bottom: 2px dotted #888\'>dotted</span> portions are
   * optional, and the ellipses <span class=\'code\' style=\'background-color:
   * #edd\'>...</span> are placeholders for zero or more elements of the
   * same form as the immediately preceding element.  The placeholder <span
   * class=\'code\' style=\'background-color: #bbb\'>RELATION_ELEMENT</span>
   * refers to a BioModels.net qualifier element name.  This is an element
   * in either the XML namespace
   * <code>\'http://biomodels.net/model-qualifiers\'</code> (for model
   * qualifiers) or <code>\'http://biomodels.net/biology-qualifiers\'</code>
   * (for biological qualifier).
   * <p>
   * The <span class=\'code\' style=\'background-color: #d0d0ee\'>resource
   * URI</span> is a required data value that uniquely identifies a
   * resource and data within that resource to which the annotation refers.
   * The present method allows callers to add a reference to a resource URI
   * with the same relationship to the enclosing SBML object.  (In other
   * words, the argument to this method is a <span class=\'code\'
   * style=\'background-color: #d0d0ee\'>resource URI</span> as shown in the
   * XML fragment above.)  Resources are stored in this {@link CVTerm} object
   * within an {@link XMLAttributes} object.
   * <p>
   * The relationship of this {@link CVTerm} to the enclosing SBML object can be
   * determined using the {@link CVTerm} methods such as getModelQualifierType()
   * and getBiologicalQualifierType().
   * <p>
   * @param resource a string representing the URI of the resource and data
   * item being referenced; e.g.,
   * <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   * <p>
   * @return integer value indicating success/failure of the call. The
   * possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED}
   * <p>
   * @see #getResources()
   * @see #removeResource(String resource)
   * @see #getQualifierType()
   * @see #getModelQualifierType()
   * @see #getBiologicalQualifierType()
   */
 public";


%javamethodmodifiers CVTerm::removeResource(std::string resource) "
  /**
   * Removes a resource URI from the set of resources stored in this {@link CVTerm}
   * object.
   * <p>
   * @param resource a string representing the resource URI to remove;
   * e.g., <code>\'http://www.geneontology.org/#GO:0005892\'</code>.
   * <p>
   * @return integer value indicating success/failure of the
   * function. The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS}
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE}
   * <p>
   * @see #addResource(String resource)
   */
 public";


%javamethodmodifiers CVTerm::hasRequiredAttributes "
  /**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link CVTerm} object have been set.
   * <p>
   * @note The required attributes for a {@link CVTerm} are:
   * <li> a <em>qualifier type</em>, which can be either a model qualifier or a biological qualifier
   * <li> at least one resource
   */
 public";


%typemap(javaimports) ModelHistory "
/** 
 * Representation of MIRIAM-compliant model history data.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The SBML specification beginning with Level&nbsp;2 Version&nbsp;2
 * defines a standard approach to recording optional model history and
 * model creator information in a form that complies with MIRIAM (\'Minimum
 * Information Requested in the Annotation of biochemical Models\',
 * <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  LibSBML
 * provides the {@link ModelHistory} class as a convenient high-level interface
 * for working with model history data.
 * <p>
 * {@link Model} histories in SBML consist of one or more <em>model creators</em>,
 * a single date of <em>creation</em>, and one or more <em>modification</em> dates.
 * The overall XML form of this data takes the following form:
 * <p>
<div class=\'fragment\'>
&lt;dc:creator&gt;<br>
&nbsp;&nbsp;&lt;rdf:Bag&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;rdf:li rdf:parseType=\'Resource\'&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;vCard:N rdf:parseType=\'Resource\'&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;vCard:Family&gt;<span style=\'background-color: #bbb\'>family name</span>&lt;/vCard:Family&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;vCard:Given&gt;<span style=\'background-color: #bbb\'>given name</span>&lt;/vCard:Given&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/vCard:N&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:EMAIL&gt;<span style=\'background-color: #bbb\'>email address</span>&lt;/vCard:EMAIL&gt;</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:ORG rdf:parseType=\'Resource\'&gt;</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'border-bottom: 2px dotted #888\'>&lt;vCard:Orgname&gt;<span style=\'background-color: #bbb\'>organization name</span>&lt;/vCard:Orgname&gt;</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'border-bottom: 2px dotted #888\'>&lt;/vCard:ORG&gt;</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #d0eed0\'>+++</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/rdf:li&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;<span style=\'background-color: #edd\'>...</span><br>
&nbsp;&nbsp;&lt;/rdf:Bag&gt;<br>
&lt;/dc:creator&gt;<br>
&lt;dcterms:created rdf:parseType=\'Resource\'&gt;<br>
&nbsp;&nbsp;&lt;dcterms:W3CDTF&gt;<span style=\'background-color: #bbb\'>creation date</span>&lt;/dcterms:W3CDTF&gt;<br>
&lt;/dcterms:created&gt;<br>
&lt;dcterms:modified rdf:parseType=\'Resource\'&gt;<br>
&nbsp;&nbsp;&lt;dcterms:W3CDTF&gt;<span style=\'background-color: #bbb\'>modification date</span>&lt;/dcterms:W3CDTF&gt;<br>
&lt;/dcterms:modified&gt;<br>
<span style=\'background-color: #edd\'>...</span><br>
</div>
 * <p>
 * In the template above, the <span style=\'border-bottom: 2px dotted #888\'>underlined</span>
 * portions are optional, the symbol
 * <span class=\'code\' style=\'background-color: #d0eed0\'>+++</span> is a placeholder
 * for either no content or valid XML content that is not defined by
 * the annotation scheme, and the ellipses
 * <span class=\'code\' style=\'background-color: #edd\'>...</span>
 * are placeholders for zero or more elements of the same form as the
 * immediately preceding element.  The various placeholders for content, namely
 * <span class=\'code\' style=\'background-color: #bbb\'>family name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>given name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>email address</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>organization</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>creation date</span>, and
 * <span class=\'code\' style=\'background-color: #bbb\'>modification date</span>
 * are data that can be filled in using the various methods on
 * the {@link ModelHistory} class described below.
 * <p>
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) ModelCreator "
/** 
 * Representation of MIRIAM-compliant model creator data used
 * in {@link ModelHistory}. 
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * The SBML specification beginning with Level&nbsp;2 Version&nbsp;2
 * defines a standard approach to recording model history and model creator
 * information in a form that complies with MIRIAM (\'Minimum Information
 * Requested in the Annotation of biochemical Models\', <i>Nature
 * Biotechnology</i>, vol. 23, no. 12, Dec. 2005).  For the model creator,
 * this form involves the use of parts of the <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/VCard\'>vCard</a> representation.
 * LibSBML provides the {@link ModelCreator} class as a convenience high-level
 * interface for working with model creator data.  Objects of class
 * {@link ModelCreator} can be used to store and carry around creator data within a
 * program, and the various methods in this object class let callers
 * manipulate the different parts of the model creator representation.
 * <p>
 * <h2>The different parts of a model creator definition</h2>
 * <p>
 * The {@link ModelCreator} class mirrors the structure of the MIRIAM model creator
 * annotations in SBML.  The following template illustrates these different
 * fields when they are written in XML form:
 * <p>
<div class=\'fragment\'>
&lt;vCard:N rdf:parseType=\'Resource\'&gt;<br>
&nbsp;&nbsp;&lt;vCard:Family&gt;<span style=\'background-color: #bbb\'>family name</span>&lt;/vCard:Family&gt;<br>
&nbsp;&nbsp;&lt;vCard:Given&gt;<span style=\'background-color: #bbb\'>given name</span>&lt;/vCard:Given&gt;<br>
&lt;/vCard:N&gt;<br>
...<br>
&lt;vCard:EMAIL&gt;<span style=\'background-color: #bbb\'>email address</span>&lt;/vCard:EMAIL&gt;<br>
...<br>
&lt;vCard:ORG rdf:parseType=\'Resource\'&gt;<br>
&nbsp;&nbsp;&lt;vCard:Orgname&gt;<span style=\'background-color: #bbb\'>organization</span>&lt;/vCard:Orgname&gt;<br>
&lt;/vCard:ORG&gt;<br>
</div>
 * <p>
 * Each of the separate data values
 * <span class=\'code\' style=\'background-color: #bbb\'>family name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>given name</span>,
 * <span class=\'code\' style=\'background-color: #bbb\'>email address</span>, and
 * <span class=\'code\' style=\'background-color: #bbb\'>organization</span> can
 * be set and retrieved via corresponding methods in the {@link ModelCreator} 
 * class.  These methods are documented in more detail below.
 * <p>
 * <!-- leave this next break as-is to work around some doxygen bug -->
 */
"

%typemap(javaimports) Date "
/** 
 * Representation of MIRIAM-compliant dates used in {@link ModelHistory}.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * A {@link Date} object stores a reasonably complete representation of date and
 * time.  Its purpose is to serve as a way to store dates to be read and
 * written in the <a target=\'_blank\'
 * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format</a> used in
 * RDF Dublin Core annotations within SBML.  The W3C date format is a
 * restricted form of <a target=\'_blank\'
 * href=\'http://en.wikipedia.org/wiki/ISO_8601\'>ISO 8601</a>, the
 * international standard for the representation of dates and times.  A
 * time and date value in this W3C format takes the form
 * YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g., <code>1997-07-16T19:20:30+01:00</code>)
 * where XHH:ZZ is the time zone offset.  The libSBML {@link Date} object contains
 * the following fields to represent these values:
 * <ul>
 * <p>
 * <li> <em>year</em>: a long integer representing the year.  This should be a
 * four-digit number such as <code>2011.</code>
 * <p>
 * <li> <em>month</em>: a long integer representing the month, with a range of
 * values of 1&ndash;12.  The value <code>1</code> represents January, and so on.
 * <p>
 * <li> <em>day</em>: a long integer representing the day of the month, with a
 * range of values of 1&ndash;31.
 * <p>
 * <li> <em>hour</em>: a long integer representing the hour on a 24-hour clock,
 * with a range of values of 0&ndash;23.
 * <p>
 * <li> <em>minute</em>: a long integer representing the minute, with a range
 * of 0&ndash;59.
 * <p>
 * <li> <em>second</em>: a long integer representing the second, with a range
 * of 0&ndash;59.
 * <p>
 * <li> <em>sign</em>: a long integer representing the sign of the offset (<code>0</code>
 * signifying <code>+</code> and <code>1</code> signifying <code>-</code>).  See the paragraph below for
 * further explanations.
 * <p>
 * <li> <em>hours</em> offset: a long integer representing the time zone\'s hour
 * offset from GMT.
 * <p>
 * <li> <em>minute</em> offset: a long integer representing the time zone\'s
 * minute offset from GMT.
 * <p>
 * </ul>
 * <p>
 * To illustrate the time zone offset, a value of <code>-05:00</code> would
 * correspond to USA Eastern Standard Time.  In the {@link Date} object, this would
 * require a value of <code>1</code> for the sign field, <code>5</code> for the hour offset and
 * <code>0</code> for the minutes offset.
 * <p>
 * In the restricted RDF annotations used in SBML, described in
 * Section&nbsp;6 of the SBML Level&nbsp;2 and Level&nbsp;3 specification
 * documents, date/time stamps can be used to indicate the time of
 * creation and modification of a model.  The following SBML model fragment
 * illustrates this:
<div class=\'fragment\'><pre>
&lt;model metaid=\'_180340\' id=\'GMO\' name=\'Goldbeter1991_MinMitOscil\'&gt;
    &lt;annotation&gt;
        &lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
                 xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
                 xmlns:dcterms=\'http://purl.org/dc/terms/\'
                 xmlns:vCard=\'http://www.w3.org/2001/vcard-rdf/3.0#\' &gt;
            &lt;rdf:Description rdf:about=\'#_180340\'&gt;
                &lt;dc:creator&gt;
                    &lt;rdf:Bag&gt;
                        &lt;rdf:li rdf:parseType=\'Resource\'&gt;
                            &lt;vCard:N rdf:parseType=\'Resource\'&gt;
                                &lt;vCard:Family&gt;Shapiro&lt;/vCard:Family&gt;
                                &lt;vCard:Given&gt;Bruce&lt;/vCard:Given&gt;
                            &lt;/vCard:N&gt;
                            &lt;vCard:EMAIL&gt;bshapiro@jpl.nasa.gov&lt;/vCard:EMAIL&gt;
                            &lt;vCard:ORG rdf:parseType=\'Resource\'&gt;
                                &lt;vCard:Orgname&gt;NASA Jet Propulsion Laboratory&lt;/vCard:Orgname&gt;
                            &lt;/vCard:ORG&gt;
                        &lt;/rdf:li&gt;
                    &lt;/rdf:Bag&gt;
                &lt;/dc:creator&gt;
                &lt;dcterms:created rdf:parseType=\'Resource\'&gt;
                    &lt;dcterms:W3CDTF&gt;2005-02-06T23:39:40+00:00&lt;/dcterms:W3CDTF&gt;
                &lt;/dcterms:created&gt;
                &lt;dcterms:modified rdf:parseType=\'Resource\'&gt;
                    &lt;dcterms:W3CDTF&gt;2005-09-13T13:24:56+00:00&lt;/dcterms:W3CDTF&gt;
                &lt;/dcterms:modified&gt;
            &lt;/rdf:Description&gt;
        &lt;/rdf:RDF&gt;
    &lt;/annotation&gt;
&lt;/model&gt;</pre></div>
 */
"

%javamethodmodifiers Date::Date(unsigned int year = 2000, unsigned int month = 1, unsigned int day = 1, unsigned int hour = 0, unsigned int minute = 0, unsigned int second = 0, unsigned int sign = 0, unsigned int hoursOffset = 0, unsigned int minutesOffset = 0) "
  /**
   * Creates a time and date representation for use in model annotations
   * and elsewhere.
   * <p>
   * The following is the complete set of possible arguments to this
   * constructor, with default values as indicated:
   * <p>
   * @param year a long integereger representing the year.  This should be
   * a four-digit number such as <code>2011.</code>  (Default value used if this
   * argument is not given: <code>2000.</code>)
   * <p>
   * @param month a long integereger representing the month, with a range
   * of values of 1&ndash;12.  The value <code>1</code> represents January, and so
   * on.  (Default value used if this argument is not given: <code>1.</code>)
   * <p>
   * @param day a long integereger representing the day of the month, with
   * a range of values of 1&ndash;31.  (Default value used if this argument
   * is not given: <code>1.</code>)
   * <p>
   * @param hour a long integereger representing the hour on a 24-hour
   * clock, with a range of values of 0&ndash;23.  (Default value used if
   * this argument is not given: <code>0.</code>)
   * <p>
   * @param minute a long integereger representing the minute, with a
   * range of 0&ndash;59.  (Default value used if this argument is not
   * given: <code>0.</code>)
   * <p>
   * @param second a long integereger representing the second, with a
   * range of 0&ndash;59.  (Default value used if this argument is not
   * given: <code>0.</code>)
   * <p>
   * @param sign a long integereger representing the sign of the offset
   * (<code>0</code> signifying <code>+</code> and <code>1</code> signifying <code>-</code>).  See the paragraph
   * below for further explanations.  (Default value used if this argument
   * is not given: <code>0.</code>)
   * <p>
   * @param hoursOffset a long integereger representing the time zone\'s
   * hour offset from GMT.  (Default value used if this argument is not
   * given: <code>0.</code>)
   * <p>
   * @param minutesOffset a long integereger representing the time zone\'s
   * minute offset from GMT.  (Default value used if this argument is not
   * given: <code>0.</code>)
   * <p>
   * To illustrate the time zone offset, a value of <code>-05:00</code>
   * would correspond to USA Eastern Standard Time.  In the {@link Date} object,
   * this would require a value of <code>1</code> for the sign field, <code>5</code> for the
   * hour offset and <code>0</code> for the minutes offset.
   * <p>
   * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

   */
 public";


%javamethodmodifiers Date::Date(const std::string& date) "
  /**
   * Creates a {@link Date} object from a string expressing a date and time value.
   * <p>
   * This constructor expects its argument to be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   * This format expresses a date and time value as a string of the form
   * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
   * <ul>
   * <p>
   * <li> <em>YYYY</em> is a four-digit integer representing the year.  This
   * should be a four-digit number such as <code>2011.</code>
   * <p>
   * <li> <em>MM</em> is a two-digit integer representing the month, with a range
   * of values of 01&ndash;12.  The value <code>1</code> represents January, and so
   * on.
   * <p>
   * <li> <em>DD</em> is a two-digit integer representing the day of the month,
   * with a range of values of 01&ndash;31.
   * <p>
   * <li> <em>hh</em> is a two-digit integer representing the hour on a 24-hour
   * clock, with a range of values of 00&ndash;23.
   * <p>
   * <li> <em>mm</em> is a two-digit integer representing the minute, with a
   * range of 00&ndash;59.
   * <p>
   * <li> <em>ss</em> is a two-digit integer representing the second, with a
   * range of 0&ndash;59.
   * <p>
   * <li> <em>X</em> is the the sign of the time zone offset, either <code>+</code> or
   * <code>-</code>.
   * <p>
   * <li> <em>HH</em> is a two-digit integer representing the hour of the time
   * zone offset, with a range of 00&ndash;23.
   * <p>
   * <li> <em>ZZ</em> is a two-digit integer representing the minutes of the time
   * zone offset, with a range of 00&ndash;59.
   * <p>
   * </ul>
   * <p>
   * In the string format above, it is important not to forget the literal
   * character <code>T</code> in the string.  Here is an example date/time string:
   * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
   * 1997, at 19:20:30 in Central European Time (which is UTC +1:00).
   * <p>
   * If this constructor is given a <code>null</code> argument or a string of length
   * zero, it constructs a {@link Date} object with the value of January 1, 2000,
   * at time 00:00 UTC.  Otherwise, the argument <em>must</em> be in the
   * complete format described above, or unpredictable results will happen.
   * <p>
   * @param date a string representing the date.
   */
 public";


%javamethodmodifiers Date::Date(const Date& orig) "
  /**
   * Copy constructor; creates a copy of this {@link Date}.
   */
 public";


%javamethodmodifiers Date::clone() const "
  /**
   * Returns a copy of this {@link Date}.
   * <p>
   * @return a (deep) copy of this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getYear "
  /**
   * Returns the year from this {@link Date}.
   * <p>
   * @return the year from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getMonth "
  /**
   * Returns the month from this {@link Date}.
   * <p>
   * @return the month from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getDay "
  /**
   * Returns the day from this {@link Date}.
   * <p>
   * @return the day from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getHour "
  /**
   * Returns the hour from this {@link Date}.
   * <p>
   * @return the hour from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getMinute "
  /**
   * Returns the minute from this {@link Date}.
   * <p>
   * @return the minute from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getSecond "
  /**
   * Returns the seconds from this {@link Date}.
   * <p>
   * @return the seconds from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getSignOffset "
  /**
   * Returns the sign of the time zone offset from this {@link Date}.
   * <p>
   * @return the sign of the offset from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getHoursOffset "
  /**
   * Returns the hours of the time zone offset from this {@link Date}.
   * <p>
   * @return the hours of the offset from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getMinutesOffset "
  /**
   * Returns the minutes of the time zone offset from this {@link Date}.
   * <p>
   * @return the minutes of the offset from this {@link Date}.
   */
 public";


%javamethodmodifiers Date::getDateAsString "
  /**
   * Returns the current {@link Date} value in text-string form.
   * <p>
   * The string returned will be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   * This format expresses a date and time value as a string of the form
   * YYYY-MM-DDThh:mm:ssXHH:ZZ, where
   * <ul>
   * <p>
   * <li> <em>YYYY</em> is a four-digit integer representing the year.  This
   * should be a four-digit number such as <code>2011.</code>
   * <p>
   * <li> <em>MM</em> is a two-digit integer representing the month, with a range
   * of values of 01&ndash;12.  The value <code>1</code> represents January, and so
   * on.
   * <p>
   * <li> <em>DD</em> is a two-digit integer representing the day of the month,
   * with a range of values of 01&ndash;31.
   * <p>
   * <li> <em>hh</em> is a two-digit integer representing the hour on a 24-hour
   * clock, with a range of values of 00&ndash;23.
   * <p>
   * <li> <em>mm</em> is a two-digit integer representing the minute, with a
   * range of 00&ndash;59.
   * <p>
   * <li> <em>ss</em> is a two-digit integer representing the second, with a
   * range of 0&ndash;59.
   * <p>
   * <li> <em>X</em> is the the sign of the time zone offset, either <code>+</code> or
   * <code>-</code>.
   * <p>
   * <li> <em>HH</em> is a two-digit integer representing the hour of the time
   * zone offset, with a range of 00&ndash;23.
   * <p>
   * <li> <em>ZZ</em> is a two-digit integer representing the minutes of the time
   * zone offset, with a range of 00&ndash;59.
   * <p>
   * </ul>
   * <p>
   * An example date/time string is <code>1997-07-16T19:20:30+01:00</code>,
   * which represents July 16, 1997, at 19:20:30 in Central European Time
   * (which is UTC +1:00).
   * <p>
   * @return the date as a string.
   */
 public";


%javamethodmodifiers Date::setYear(unsigned int year) "
  /**
   * Sets the value of the year of this {@link Date} object.
   * <p>
   * The value given as argument must be between 1000 and 9999 inclusive.
   * (In the millennium during which this libSBML documentation is being
   * written, a typical value is <code>2011</code>, but we hope that SBML will
   * continue to be used for a long time.)
   * <p>
   * @param year a long integer representing the year.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setMonth(unsigned int month) "
  /**
   * Sets the value of the month of this {@link Date} object.
   * <p>
   * @param month a long integer representing the month; it must be in the
   * range 1&ndash;12 or an error will be signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setDay(unsigned int day) "
  /**
   * Sets the value of the day of this {@link Date} object.
   * <p>
   * @param day a long integer representing the day; it must be in the
   * range 0&ndash;31 or an error will be signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setHour(unsigned int hour) "
  /**
   * Sets the value of the hour of this {@link Date} object.
   * <p>
   * @param hour a long integer representing the hour to set; it must be
   * in the range 0&ndash;23 or an error will be signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setMinute(unsigned int minute) "
  /**
   * Sets the value of the minute of this {@link Date} object.
   * <p>
   * @param minute a long integer representing the minute to set; it must
   * be in the range 0&ndash;59 or an error will be signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setSecond(unsigned int second) "
  /**
   * Sets the value of the second of the {@link Date} object.
   * <p>
   * @param second a long integer representing the seconds; it must
   * be in the range 0&ndash;59 or an error will be signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setSignOffset(unsigned int sign) "
  /**
   * Sets the value of the sign of the time zone offset of this {@link Date} object.
   * <p>
   * The only permissible values are <code>0</code> and <code>1.</code>
   * <p>
   * @param sign a long integer representing the sign of the offset, with
   * <code>0</code> signifying <code>+</code> and <code>1</code> signifying <code>-.</code>
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setHoursOffset(unsigned int hoursOffset) "
  /**
   * Sets the value of this {@link Date} object\'s time zone hour offset.
   * <p>
   * @param hoursOffset a long integer representing the hours of the
   * offset; it must be in the range 0&ndash;23 or an error will be
   * signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setMinutesOffset(unsigned int minutesOffset) "
  /**
   * Sets the value of this {@link Date} object\'s time zone minutes offset.
   * <p>
   * @param minutesOffset a long integer representing the minutes of the
   * offset; it must be in the range 0&ndash;59 or an error will be
   * signaled.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::setDateAsString(const std::string& date) "
  /**
   * Sets the value of this {@link Date} object using a date and time value
   * expressed as a text string.
   * <p>
   * This method expects its argument to be in the <a target=\'_blank\'
   * href=\'http://www.w3.org/TR/NOTE-datetime\'>W3C date format with time
   * zone offset</a>, used in RDF Dublin Core annotations within SBML.
   * This format expresses a date and time value as a string of the form
   * YYYY-MM-DDThh:mm:ssXHH:ZZ, where <ul>
   * <p>
   * <li> <em>YYYY</em> is a four-digit integer representing the year.  This
   * should be a four-digit number such as <code>2011.</code>
   * <p>
   * <li> <em>MM</em> is a two-digit integer representing the month, with a range
   * of values of 01&ndash;12.  The value <code>1</code> represents January, and so
   * on.
   * <p>
   * <li> <em>DD</em> is a two-digit integer representing the day of the month,
   * with a range of values of 01&ndash;31.
   * <p>
   * <li> <em>hh</em> is a two-digit integer representing the hour on a 24-hour
   * clock, with a range of values of 00&ndash;23.
   * <p>
   * <li> <em>mm</em> is a two-digit integer representing the minute, with a
   * range of 00&ndash;59.
   * <p>
   * <li> <em>ss</em> is a two-digit integer representing the second, with a
   * range of 0&ndash;59.
   * <p>
   * <li> <em>X</em> is the the sign of the time zone offset, either <code>+</code> or
   * <code>-</code>.
   * <p>
   * <li> <em>HH</em> is a two-digit integer representing the hour of the time
   * zone offset, with a range of 00&ndash;23.
   * <p>
   * <li> <em>ZZ</em> is a two-digit integer representing the minutes of the time
   * zone offset, with a range of 00&ndash;59.
   * <p>
   * </ul>
   * <p>
   * In the string format above, it is important not to forget the literal
   * character <code>T</code> in the string.  Here is an example date/time string:
   * <code>1997-07-16T19:20:30+01:00</code>, which would represent July 16,
   * 1997, at 19:20:30 in Central European Time (which is UTC +1:00).
   * <p>
   * If this method is given a <code>null</code> argument or a string of length zero,
   * it constructs a {@link Date} object with the value of January 1, 2000, at time
   * 00:00 UTC.  Otherwise, the argument <em>must</em> be in the complete format
   * described above, or unpredictable results will happen.
   * <p>
   * @param date a string representing the date.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers Date::representsValidDate "
  /**
   * Returns true or false depending on whether this date object represents
   * a valid date and time value.
   * <p>
   * This method verifies that the date/time value stored in this object is
   * well-formed and represents plausible values.  A time and date value in
   * the W3C format takes the form YYYY-MM-DDThh:mm:ssXHH:ZZ (e.g.,
   * <code>1997-07-16T19:20:30+01:00</code>) where XHH:ZZ is the time zone
   * offset.  This method checks such things as whether the value of the
   * month number is less than or equal to 12, whether the value of the
   * minutes number is less than or equal to 59, whether a time zone offset
   * is set, etc.
   * <p>
   * @return <code>true</code> if the date is valid, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers Date::parseDateStringToNumbers "
  /**
   * Sets the value of the individual numbers from the date 
   * as a string.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers Date::parseDateNumbersToString "
  /**
   * Sets the value of the date as a string from the individual numbers.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ModelCreator::ModelCreator "
  /**
   * Creates a new {@link ModelCreator} object.
   */
 public";


%javamethodmodifiers ModelCreator::ModelCreator(const XMLNode creator) "
  /**
   * Creates a new {@link ModelCreator} from an {@link XMLNode}.
   * <p>
   * @param creator the {@link XMLNode} from which to create the {@link ModelCreator}.
   */
 public";


%javamethodmodifiers ModelCreator::ModelCreator(const ModelCreator& orig) "
  /**
   * Copy constructor; creates a copy of the {@link ModelCreator}.
   */
 public";


%javamethodmodifiers ModelCreator::clone() const "
  /**
   * Creates and returns a copy of this {@link ModelCreator}.
   * <p>
   * @return a (deep) copy of this {@link ModelCreator}.
   */
 public";


%javamethodmodifiers ModelCreator::getFamilyName() const "
  /**
   * Returns the \'family name\' stored in this {@link ModelCreator} object.
   * <p>
   * @return the \'family name\' portion of the {@link ModelCreator} object.
   */
 public";


%javamethodmodifiers ModelCreator::getGivenName() const "
  /**
   * Returns the \'given name\' stored in this {@link ModelCreator} object.
   * <p>
   * @return the \'given name\' portion of the {@link ModelCreator} object.
   */
 public";


%javamethodmodifiers ModelCreator::getEmail() const "
  /**
   * Returns the \'email\' stored in this {@link ModelCreator} object.
   * <p>
   * @return email from the {@link ModelCreator}.
   */
 public";


%javamethodmodifiers ModelCreator::getOrganization() const "
  /**
   * Returns the \'organization\' stored in this {@link ModelCreator} object.
   * <p>
   * @return organization from the {@link ModelCreator}.
   */
 public";


%javamethodmodifiers ModelCreator::getOrganisation() const "
  /**
   * (Alternate spelling) Returns the \'organization\' stored in this
   * {@link ModelCreator} object.
   * <p>
   * @note This function is an alias of getOrganization().
   * <p>
   * @return organization from the {@link ModelCreator}.
   * <p>
   * @see #getOrganization()
   */
 public";


%javamethodmodifiers ModelCreator::isSetFamilyName "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'family name\' part is set.
   * <p>
   * @return <code>true</code> if the familyName of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ModelCreator::isSetGivenName "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'given name\' part is set.
   * <p>
   * @return <code>true</code> if the givenName of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ModelCreator::isSetEmail "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'email\' part is set.
   * <p>
   * @return <code>true</code> if the email of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ModelCreator::isSetOrganization "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelCreator}\'s \'organization\' part is set.
   * <p>
   * @return <code>true</code> if the organization of this {@link ModelCreator} is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ModelCreator::isSetOrganisation "
  /**
   * (Alternate spelling) Predicate returning <code>true</code> or <code>false</code> depending
   * on whether this {@link ModelCreator}\'s \'organization\' part is set.
   * <p>
   * @note This function is an alias of isSetOrganization().
   * <p>
   * @return <code>true</code> if the organization of this {@link ModelCreator} is set, <code>false</code> otherwise.
   * <p>
   * @see #isSetOrganization()
   */
 public";


%javamethodmodifiers ModelCreator::setFamilyName(const std::string& familyName) "
  /**
   * Sets the \'family name\' portion of this {@link ModelCreator} object.
   * <p>
   * @param familyName a string representing the familyName of the {@link ModelCreator}. 
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ModelCreator::setGivenName(const std::string& givenName) "
  /**
   * Sets the \'given name\' portion of this {@link ModelCreator} object.
   * <p>
   * @param givenName a string representing the givenName of the {@link ModelCreator}. 
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ModelCreator::setEmail(const std::string& email) "
  /**
   * Sets the \'email\' portion of this {@link ModelCreator} object.
   * <p>
   * @param email a string representing the email of the {@link ModelCreator}. 
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ModelCreator::setOrganization(const std::string& organization) "
  /**
   * Sets the \'organization\' portion of this {@link ModelCreator} object.
   * <p>
   * @param organization a string representing the organization of the 
   * {@link ModelCreator}. 
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   */
 public";


%javamethodmodifiers ModelCreator::setOrganisation(const std::string& organization) "
  /**
   * (Alternate spelling) Sets the \'organization\' portion of this
   * {@link ModelCreator} object.
   * <p>
   * @param organization a string representing the organization of the
   * {@link ModelCreator}.
   * <p>
   * @note This function is an alias of setOrganization(String organization).
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <p>
   * @see #setOrganization(String organization)
   */
 public";


%javamethodmodifiers ModelCreator::unsetFamilyName "
  /**
   * Unsets the \'family name\' portion of this {@link ModelCreator} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ModelCreator::unsetGivenName "
  /**
   * Unsets the \'given name\' portion of this {@link ModelCreator} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ModelCreator::unsetEmail "
  /**
   * Unsets the \'email\' portion of this {@link ModelCreator} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ModelCreator::unsetOrganization "
  /**
   * Unsets the \'organization\' portion of this {@link ModelCreator} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ModelCreator::unsetOrganisation "
  /**
   * (Alternate spelling) Unsets the \'organization\' portion of this {@link ModelCreator} object.
   * <p>
   * @note This function is an alias of unsetOrganization().
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #unsetOrganization()
   */
 public";


%javamethodmodifiers ModelCreator::getAdditionalRDF "
  /**
   * (Alternate spelling) Unsets the \'organization\' portion of this {@link ModelCreator} object.
   * <p>
   * @note This function is an alias of unsetOrganization().
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <p>
   * @see #unsetOrganization()
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers ModelCreator::hasRequiredAttributes "
  /**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link ModelCreator} object have been set.
   * <p>
   * The only required elements for a {@link ModelCreator} object are the \'family
   * name\' and \'given name\'.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%javamethodmodifiers ModelHistory::ModelHistory "
  /**
   * Creates a new {@link ModelHistory} object.
   */
 public";


%javamethodmodifiers ModelHistory::ModelHistory(const ModelHistory& orig) "
  /**
   * Copy constructor; creates a copy of this {@link ModelHistory} object.
   */
 public";


%javamethodmodifiers ModelHistory::clone() const "
  /**
   * Creates and returns a copy of this {@link ModelHistory} object
   * <p>
   * @return a (deep) copy of this {@link ModelHistory} object.
   */
 public";


%javamethodmodifiers ModelHistory::getCreatedDate "
  /**
   * Returns the \'creation date\' portion of this {@link ModelHistory} object.
   * <p>
   * @return a {@link Date} object representing the creation date stored in
   * this {@link ModelHistory} object.
   */
 public";


%javamethodmodifiers ModelHistory::getModifiedDate "
  /**
   * Returns the \'modified date\' portion of this {@link ModelHistory} object.
   * <p>
   * Note that in the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.  If this {@link ModelHistory} object
   * contains more than one \'modified date\' value in the list, this method
   * will return the first one in the list.
   * <p>
   * @return a {@link Date} object representing the date of modification
   * stored in this {@link ModelHistory} object.
   */
 public";


%javamethodmodifiers ModelHistory::isSetCreatedDate "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelHistory}\'s \'creation date\' is set.
   * <p>
   * @return <code>true</code> if the creation date value of this {@link ModelHistory} is
   * set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ModelHistory::isSetModifiedDate "
  /**
   * Predicate returning <code>true</code> or <code>false</code> depending on whether this
   * {@link ModelHistory}\'s \'modified date\' is set.
   * <p>
   * @return <code>true</code> if the modification date value of this {@link ModelHistory}
   * object is set, <code>false</code> otherwise.
   */
 public";


%javamethodmodifiers ModelHistory::setCreatedDate(Date* date) "
  /**
   * Sets the creation date of this {@link ModelHistory} object.
   * <p>
   * @param date a {@link Date} object representing the date to which the \'created
   * date\' portion of this {@link ModelHistory} should be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers ModelHistory::setModifiedDate(Date* date) "
  /**
   * Sets the modification date of this {@link ModelHistory} object.
   * <p>
   * @param date a {@link Date} object representing the date to which the \'modified
   * date\' portion of this {@link ModelHistory} should be set.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers ModelHistory::addModifiedDate(Date* date) "
  /**
   * Adds a copy of a {@link Date} object to the list of \'modified date\' values
   * stored in this {@link ModelHistory} object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   * <p>
   * @param date a {@link Date} object representing the \'modified date\' that should
   * be added to this {@link ModelHistory} object.
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   */
 public";


%javamethodmodifiers ModelHistory::getListModifiedDates "
  /**
   * Returns the list of \'modified date\' values (as {@link Date} objects) stored in
   * this {@link ModelHistory} object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   * <p>
   * @return the list of modification dates for this {@link ModelHistory} object.
   */
 public";


%javamethodmodifiers ModelHistory::getModifiedDate(unsigned int n) "
  /**
   * Get the nth {@link Date} object in the list of \'modified date\' values stored
   * in this {@link ModelHistory} object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   * <p>
   * @return the nth {@link Date} in the list of ModifiedDates of this
   * {@link ModelHistory}.
   */
 public";


%javamethodmodifiers ModelHistory::getNumModifiedDates "
  /**
   * Get the number of {@link Date} objects in this {@link ModelHistory} object\'s list of
   * \'modified dates\'.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple
   * modification dates.  The libSBML {@link ModelHistory} class supports this by
   * storing a list of \'modified date\' values.
   * <p>
   * @return the number of ModifiedDates in this {@link ModelHistory}.
   */
 public";


%javamethodmodifiers ModelHistory::addCreator(ModelCreator * mc) "
  /**
   * Adds a copy of a {@link ModelCreator} object to the list of \'model creator\'
   * values stored in this {@link ModelHistory} object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   * <p>
   * @param mc the {@link ModelCreator} to add
   * <p>
   * @return integer value indicating success/failure of the
   * function.   The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_OBJECT LIBSBML_INVALID_OBJECT }
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_FAILED LIBSBML_OPERATION_FAILED }
   */
 public";


%javamethodmodifiers ModelHistory::getListCreators "
  /**
   * Returns the list of {@link ModelCreator} objects stored in this {@link ModelHistory}
   * object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   * <p>
   * @return the list of {@link ModelCreator} objects.
   */
 public";


%javamethodmodifiers ModelHistory::getCreator(unsigned int n) "
  /**
   * Get the nth {@link ModelCreator} object stored in this {@link ModelHistory} object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   * <p>
   * @return the nth {@link ModelCreator} object.
   */
 public";


%javamethodmodifiers ModelHistory::getNumCreators "
  /**
   * Get the number of {@link ModelCreator} objects stored in this {@link ModelHistory}
   * object.
   * <p>
   * In the MIRIAM format for annotations, there can be multiple model
   * creators.  The libSBML {@link ModelHistory} class supports this by storing a
   * list of \'model creator\' values.
   * <p>
   * @return the number of ModelCreators objects.
   */
 public";


%javamethodmodifiers ModelHistory::hasRequiredAttributes "
  /**
   * Predicate returning <code>true</code> if all the required elements for this
   * {@link ModelHistory} object have been set.
   * <p>
   * The required elements for a {@link ModelHistory} object are \'created
   * name\', \'modified date\', and at least one \'model creator\'.
   * <p>
   * @return a boolean value indicating whether all the required
   * elements for this object have been defined.
   */
 public";


%typemap(javaimports) RDFAnnotationParser "
/** 
 * Read/write/manipulate RDF annotations stored in SBML
 * annotation elements.
 * <p>
 * <p style=\'color: #555; font-style: italic\'>
This class of objects is defined by libSBML only and has no direct
equivalent in terms of SBML components.  This class is not prescribed by
the SBML specifications, although it is used to implement features
defined in SBML.
</p>

 * <p>
 * {@link RDFAnnotationParser} is a libSBML construct used as part of the libSBML
 * support for annotations conforming to the guidelines specified by MIRIAM
 * (\'Minimum Information Requested in the Annotation of biochemical
 * Models\', <i>Nature Biotechnology</i>, vol. 23, no. 12, Dec. 2005).
 * Section 6 of the SBML Level&nbsp;2 and Level&nbsp;3 specification
 * documents defines a recommended way of encoding MIRIAM information using
 * a subset of RDF in SBML.  The general scheme is as follows.  A set of
 * RDF-based annotations attached to a given SBML
 * <code>&lt;annotation&gt;</code> element are read by {@link RDFAnnotationParser}
 * and converted into a list of {@link CVTerm} objects.  There
 * are different versions of the main method, {@link RDFAnnotationParser#parseRDFAnnotation(XMLNode annotation, CVTermList CVTerms)} 
 * and {@link RDFAnnotationParser#parseRDFAnnotation(XMLNode annotation)}, 
 * used depending on whether the annotation in question concerns the MIRIAM
 * model history or other MIRIAM resource annotations.  A special object
 * class, {@link ModelHistory}, is used to make it easier to manipulate model
 * history annotations.
 * <p>
 * All of the methods on {@link RDFAnnotationParser} are static; the class exists
 * only to encapsulate the annotation and {@link CVTerm} parsing and manipulation
 * functionality.
 */
"

%javamethodmodifiers RDFAnnotationParser::parseRDFAnnotation(const XMLNode *annotation, List *CVTerms) "
  /**
   * Parses an annotation (given as an {@link XMLNode} tree) into a list of
   * {@link CVTerm} objects.
   * <p>
   * This is used to take an annotation that has been read into an SBML
   * model, identify the RDF elements within it, and create a list of
   * corresponding {@link CVTerm} (controlled vocabulary term) objects.
   * <p>
   * @param annotation {@link XMLNode} containing the annotation.
   * <p>
   * @param CVTerms list of {@link CVTerm} objects to be created.
   * <p>
   * @see #parseRDFAnnotation(XMLNode annotation)
   */
 public";


%javamethodmodifiers RDFAnnotationParser::parseRDFAnnotation(const XMLNode *annotation) "
  /**
   * Parses an annotation into a {@link ModelHistory} class instance.
   * <p>
   * This is used to take an annotation that has been read into an SBML
   * model, identify the RDF elements representing model history
   * information, and create a list of corresponding {@link CVTerm} objects.
   * <p>
   * @param annotation {@link XMLNode} containing the annotation.
   * <p>
   * @return a pointer to the {@link ModelHistory} created.
   */
 public";


%javamethodmodifiers RDFAnnotationParser::createAnnotation "
  /**
   * Creates a blank annotation and returns its root {@link XMLNode} object.
   * <p>
   * This creates a completely empty SBML <code>&lt;annotation&gt;</code>
   * element.  It is not attached to any SBML element.  An example of how
   * this might be used is illustrated in the following code fragment.  In
   * this example, suppose that <code>content</code> is an {@link XMLNode} object previously
   * created, containing MIRIAM-style annotations, and that <code>sbmlObject</code>
   * is an SBML object derived from {@link SBase} (e.g., a {@link Model}, or a {@link Species}, or
   * a {@link Compartment}, etc.).  Then:<div class=\'fragment\'><pre>
int success;                                   // Status code variable, used below.

{@link XMLNode} RDF = createRDFAnnotation();          // Create RDF annotation XML structure.
success      = RDF.addChild(...content...);    // Put some content into it.
...                                            // Check \'success\' return code value.

{@link XMLNode} ann = createAnnotation();             // Create &lt;annotation&gt; container.
success      = ann.addChild(RDF);              // Put the RDF annotation into it.
...                                            // Check \'success\' return code value.

success      = sbmlObject.setAnnotation(ann); // Set object\'s annotation to what we built.
...                                            // Check \'success\' return code value.
</pre></div>
   * <p>
   * The SBML specification contains more information about the format of
   * annotations.  We urge readers to consult Section&nbsp;6 of the SBML
   * Level&nbsp;2 (Versions 2&ndash;4) and SBML Level&nbsp;3 specification
   * documents.
   * <p>
   * @return a pointer to an {@link XMLNode} for the annotation
   * <p>
   * @see #createRDFAnnotation()
   */
 public";


%javamethodmodifiers RDFAnnotationParser::createRDFAnnotation "
  /**
   * Creates a blank RDF element suitable for use in SBML annotations.
   * <p>
   * The annotation created by this method has namespace declarations for
   * all the relevant XML namespaces used in RDF annotations and also has
   * an empty RDF element.  The result is the following XML:
<div class=\'fragment\'><pre>
&lt;rdf:RDF xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'
         xmlns:dc=\'http://purl.org/dc/elements/1.1/\'
         xmlns:dcterms=\'http://purl.org/dc/terms/\'
         xmlns:vCard=\'http://www.w3.org/2001/vcard-rdf/3.0#\'
         xmlns:bqbiol=\'http://biomodels.net/biology-qualifiers/\'
         xmlns:bqmodel=\'http://biomodels.net/model-qualifiers/\' &gt;

&lt;/rdf:RDF&gt;
</pre></div>
   * <p>
   * Note that this does not create the containing SBML
   * <code>&lt;annotation&gt;</code> element; the method
   * {@link RDFAnnotationParser#createAnnotation()}
   * is available for creating the container.
   * <p>
   * @return a pointer to an {@link XMLNode}
   * <p>
   * @see #createAnnotation()
   */
 public";


%javamethodmodifiers RDFAnnotationParser::deleteRDFAnnotation(const XMLNode *annotation) "
  /**
   * Deletes any RDF annotation found in the given {@link XMLNode} tree and returns
   * any remaining annotation content.
   * <p>
   * The name of the {@link XMLNode} given as parameter <code>annotation</code> must be
   * \'annotation\', or else this method returns <code>null.</code>  The method will
   * walk down the XML structure looking for elements that are in the
   * RDF XML namespace, and remove them.
   * <p>
   * @param annotation the {@link XMLNode} tree within which the RDF annotation is
   * to be found and deleted
   * <p>
   * @return the {@link XMLNode} structure that is left after RDF annotations are
   * deleted.
   */
 public";


%javamethodmodifiers RDFAnnotationParser::createRDFDescription(const SBase *obj) "
  /**
   * Takes an SBML object and creates an empty {@link XMLNode} corresponding to an
   * RDF \'Description\' element.
   * <p>
   * This method is a handy way of creating RDF description objects linked
   * by the appropriate \'metaid\' field to the given <code>object</code>, for
   * insertion into RDF annotations in a model.  The method retrieves the
   * \'metaid\' attribute from the <code>object</code> passed in as argument, then
   * creates an empty element having the following form
   * (where <span class=\'code\' style=\'background-color: #eed0d0\'>metaid</span> 
   * the value of the \'metaid\' attribute of the argument):
   * <p>
<div class=\'fragment\'>
&lt;rdf:Description rdf:about=&quot;#<span style=\'background-color: #eed0d0\'>metaid</span>&quot; xmlns:rdf=\'http://www.w3.org/1999/02/22-rdf-syntax-ns#\'&gt;<br>
...<br>
&lt;/rdf:Description&gt;<br>
</div>
   * Note that this method does <em>not</em> create a complete annotation or
   * even an RDF element; it only creates the \'Description\' portion.  Callers
   * will need to use other methods such as
   * {@link RDFAnnotationParser#createRDFAnnotation()}
   * to create the rest of the structure for an annotation.
   * <p>
   * @param obj the object to which the \'Description\' refers
   * <p>
   * @return a new {@link XMLNode} containing the \'rdf:Description\' element with
   * its \'about\' attribute value set to the <code>object</code> meta identifier.
   * <p>
   * @see #createRDFAnnotation()
   */
 public";


%javamethodmodifiers RDFAnnotationParser::createCVTerms(const SBase *obj) "
  /**
   * Takes a list of {@link CVTerm} objects and creates a the RDF \'Description\'
   * element.
   * <p>
   * This essentially takes the given SBML object, reads out the {@link CVTerm} objects
   * attached to it, calls
   * {@link RDFAnnotationParser#createRDFDescription(SBase object)}
   * to create an RDF \'Description\' element to hold the terms and adds
   * each term with appropriate qualifiers.
   * <p>
   * @param obj the SBML object to start from
   * <p>
   * @return the {@link XMLNode} tree corresponding to the Description element of
   * an RDF annotation.
   */
 public";


%javamethodmodifiers RDFAnnotationParser::parseCVTerms(const SBase * obj) "
  /**
   * Takes a list of {@link CVTerm} objects and creates a complete SBML annotation
   * around it.
   * <p>
   * This essentially takes the given SBML object, calls
   * {@link RDFAnnotationParser#createCVTerms(SBase obj)}
   * to read out the {@link CVTerm} objects
   * attached to it, calls
   * {@link RDFAnnotationParser#createRDFAnnotation()}
   * to create an RDF
   * annotation to hold the terms, and finally calls
   * {@link RDFAnnotationParser#createAnnotation()}
   * to wrap the result as an SBML <code>&lt;annotation&gt;</code> element.
   * <p>
   * @param obj the SBML object to start from
   * <p>
   * @return the {@link XMLNode} tree corresponding to the annotation.
   */
 public";


%javamethodmodifiers RDFAnnotationParser::parseModelHistory(const SBase * obj) "
  /**
   * Reads the model history stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that history.
   * <p>
   * @param obj any {@link SBase} object
   * <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   */
 public";


%javamethodmodifiers RDFAnnotationParser::hasRDFAnnotation(const XMLNode *annotation) "
  /**
   * Reads the model history stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that history.
   * <p>
   * @param obj any {@link SBase} object
   * <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers RDFAnnotationParser::hasAdditionalRDFAnnotation(const XMLNode *annotation) "
  /**
   * Reads the model history stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that history.
   * <p>
   * @param obj any {@link SBase} object
   * <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers RDFAnnotationParser::hasCVTermRDFAnnotation(const XMLNode *annotation) "
  /**
   * Reads the model history stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that history.
   * <p>
   * @param obj any {@link SBase} object
   * <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers RDFAnnotationParser::hasHistoryRDFAnnotation(const XMLNode *annotation) "
  /**
   * Reads the model history stored in <code>obj</code> and creates the
   * XML structure for an SBML annotation representing that history.
   * <p>
   * @param obj any {@link SBase} object
   * <p>
   * @return the {@link XMLNode} corresponding to an annotation containing 
   * MIRIAM-compliant model history information in RDF format.
   <p>
 * @deprecated libSBML internal
 */
 public";


%typemap(javaimports) ISBMLExtensionNamespaces "
/** 
 */
"

%typemap(javaimports) SBaseExtensionPoint "
/** 
 * Representation of an extension point of SBML\'s package extension.
 * <p>
 * {@link SBaseExtensionPoint} represents an element to be extended (extension point) and the
 * extension point is identified by a combination of a pakcage name and a typecode of the 
 * element.
 * <p>
 * <p>
 * For example, an {@link SBaseExtensionPoint} object which represents an extension point of the model
 * element defined in the <em>core</em> package can be created as follows:
 * <p>
<div class=\'fragment\'><pre>
      {@link SBaseExtensionPoint}  modelextp(\'core\', SBML_MODEL);
</pre></div>
 * <p>
 * Similarly, an {@link SBaseExtensionPoint} object which represents an extension point of
 * the layout element defined in the layout extension can be created as follows:
 * <p>
<div class=\'fragment\'><pre>
      {@link SBaseExtensionPoint}  layoutextp(\'layout\', SBML_LAYOUT_LAYOUT);
</pre></div>
 * <p>
 * {@link SBaseExtensionPoint} object is required as one of arguments of the constructor 
 * of SBasePluginCreatorlt;class SBasePluginType, class SBMLExtensionType&gt;
 * template class to identify an extension poitnt to which the plugin object created
 * by the creator class is plugged in.
 * For example, the {@link SBasePluginCreator} class which creates a LayoutModelPlugin object
 * of the layout extension which is plugged in to the model element of the <em>core</em>
 * package can be created with the corresponding {@link SBaseExtensionPoint} object as follows:
 * <p>
<div class=\'fragment\'><pre>
  // std.vector object that contains a list of URI (package versions) supported 
  // by the plugin object.
  std.vector&lt;String&gt; packageURIs;
  packageURIs.push_back(getXmlnsL3V1V1());
  packageURIs.push_back(getXmlnsL2());  

  // creates an extension point (model element of the \'core\' package)
  {@link SBaseExtensionPoint}  modelExtPoint(\'core\',SBML_MODEL);
   
  // creates an {@link SBasePluginCreator} object 
  {@link SBasePluginCreator}&lt;LayoutModelPlugin, LayoutExtension&gt;  modelPluginCreator(modelExtPoint,packageURIs);
</pre></div>
 * <p>
 * This kind of code is implemented in init() function of each {@link SBMLExtension} derived classes.
 */
"

%javamethodmodifiers SBaseExtensionPoint::SBaseExtensionPoint(const std::string& pkgName, int typeCode) "
  /**
   * constructor
   */
 public";


%javamethodmodifiers SBaseExtensionPoint::SBaseExtensionPoint(const SBaseExtensionPoint& orig) "
  /**
   * copy constructor
   */
 public";


%javamethodmodifiers SBaseExtensionPoint::clone() const "
  /**
   * clone 
   */
 public";


%javamethodmodifiers SBaseExtensionPoint::getPackageName() const "
  /**
   * Returns the package name of this extension point.
   */
 public";


%javamethodmodifiers SBaseExtensionPoint::getTypeCode() const "
  /**
   * Returns the typecode of this extension point.
   */
 public";


%typemap(javaimports) SBasePlugin "
/** 
 * Representation of a plug-in object of SBML\'s package extension.
 * <p>
 * Additional attributes and/or elements of a package extension which are directly 
 * contained by some pre-defined element are contained/accessed by <a href=\'#{@link SBasePlugin}\'> 
 * {@link SBasePlugin} </a> class which is extended by package developers for each extension point.
 * The extension point, which represents an element to be extended, is identified by a 
 * combination of a pakcage name and a typecode of the element, and is represented by
 * {@link SBaseExtensionPoint} class.
 * </p>
 * <p>
 * <p>
 * For example, the layout extension defines <em>&lt;listOfLayouts&gt;</em> element which is 
 * directly contained in <em>&lt;model&gt;</em> element of the core package. 
 * In the layout package (provided as one of example packages in libSBML-5), the additional 
 * element for the model element is implemented as ListOfLayouts class (an {@link SBase} derived class) and 
 * the object is contained/accessed by a LayoutModelPlugin class (an {@link SBasePlugin} derived class). 
 * </p>
 * <p>
 * <p>
 * {@link SBasePlugin} class defines basic virtual functions for reading/writing/checking 
 * additional attributes and/or top-level elements which should or must be overridden by 
 * subclasses like {@link SBase} class and its derived classes.
 * </p>
 * <p>
 * <p>
 *  Package developers must implement an {@link SBasePlugin} exntended class for 
 *  each element to be extended (e.g. {@link SBMLDocument}, {@link Model}, ...) in which additional 
 *  attributes and/or top-level elements of the package extension are directly contained.
 *</p>
 * <p>
 *  To implement reading/writing functions for attributes and/or top-level 
 *  elements of the SBsaePlugin extended class, package developers should or must
 *  override the corresponding virtual functions below provided in the {@link SBasePlugin} class:
 * <p>
 *   <ul>
 *     <li> <p>reading elements : </p>
 *       <ol>
 *         <li> <code>virtual {@link SBase} createObject (XMLInputStream& stream) </code>
 *         <p>This function must be overridden if one or more additional elements are defined.</p>
 *         </li>
 *         <li> <code>virtual bool readOtherXML (SBase parentObject, XMLInputStream& stream)</code>
 *         <p>This function should be overridden if elements of annotation, notes, MathML, etc. need 
 *            to be directly parsed from the given XMLInputStream object instead of {@link SBase#readAnnotation()} 
 *            and/or {@link SBase#readNotes()} functions.
 *         </p> 
 *         </li>
 *       </ol>
 *     </li>
 *     <li> <p>reading attributes (must be overridden if additional attributes are defined) :</p>
 *       <ol>
 *         <li><code>virtual void addExpectedAttributes(ExpectedAttributes& attributes) </code></li>
 *         <li><code>virtual void readAttributes (XMLAttributes attributes, const ExpectedAttributes& expectedAttributes)</code></li>
 *       </ol>
 *     </li>
 *     <li> <p>writing elements (must be overridden if additional elements are defined) :</p>
 *       <ol>
 *         <li><code>virtual void writeElements (XMLOutputStream& stream) const </code></li>
 *       </ol>
 *     </li>
 *     <li> <p>writing attributes : </p>
 *       <ol>
 *        <li><code>virtual void writeAttributes (XMLOutputStream& stream) const </code>
 *         <p>This function must be overridden if one or more additional attributes are defined.</p>
 *        </li>
 *        <li><code>virtual void writeXMLNS (XMLOutputStream& stream) const </code>
 *         <p>This function must be overridden if one or more additional xmlns attributes are defined.</p>
 *        </li>
 *       </ol>
 *     </li>
 * <p>
 *     <li> <p>checking elements (should be overridden) :</p>
 *       <ol>
 *         <li><code>virtual bool hasRequiredElements() const </code></li>
 *       </ol>
 *     </li>
 * <p>
 *     <li> <p>checking attributes (should be overridden) :</p>
 *       <ol>
 *         <li><code>virtual bool hasRequiredAttributes() const </code></li>
 *       </ol>
 *     </li>
 *   </ul>
 * <p>
 *<p>
 *   To implement package-specific creating/getting/manipulating functions of the
 *   {@link SBasePlugin} derived class (e.g., getListOfLayouts(), createLyout(), getLayout(),
 *   and etc are implemented in LayoutModelPlugin class of the layout package), package
 *   developers must newly implement such functions (as they like) in the derived class.
 *</p>
 * <p>
 *<p>
 *   {@link SBasePlugin} class defines other virtual functions of internal implementations
 *   such as:
 * <p>
 *   <ul>
 *    <li><code> virtual void setSBMLDocument(SBMLDocument d) </code>
 *    <li><code> virtual void connectToParent(SBase sbase) </code>
 *    <li><code> virtual void enablePackageInternal(String pkgURI, String pkgPrefix, bool flag) </code>
 *   </ul>
 * <p>
 *   These functions must be overridden by subclasses in which one or more top-level elements are defined.
 *</p>
 * <p>
 *<p>
 *   For example, the following three {@link SBasePlugin} extended classes are implemented in
 *   the layout extension:
 *</p>
 * <p>
 *<ol>
 * <p>
 *  <li> <p><a href=\'class_s_b_m_l_document_plugin.html\'> {@link SBMLDocumentPlugin} </a> class for {@link SBMLDocument} element</p>
 * <p>
 *    <ul>
 *         <li> <em> required </em> attribute is added to {@link SBMLDocument} object.
 *         </li>
 *    </ul>
 * <p>
 *<p>
 *(<a href=\'class_s_b_m_l_document_plugin.html\'> {@link SBMLDocumentPlugin} </a> class is a common {@link SBasePlugin} 
 *extended class for {@link SBMLDocument} class. Package developers can use this class as-is if no additional 
 *elements/attributes (except for <em> required </em> attribute) is needed for the {@link SBMLDocument} class 
 *in their packages, otherwise package developers must implement a new {@link SBMLDocumentPlugin} derived class.)
 *</p>
 * <p>
 *  </li>
 * <p>
 *  <li> <p>LayoutModelPlugin class for {@link Model} element</p>
 *    <ul>
 *       <li> &lt;listOfLayouts&gt; element is added to {@link Model} object.
 *       </li>
 * <p>
 *       <li> <p>
 *            The following virtual functions for reading/writing/checking
 *            are overridden: (type of arguments and return values are omitted)
 *            </p>
 *           <ul>
 *              <li> <code> createObject() </code> : (read elements)
 *              </li>
 *              <li> <code> readOtherXML() </code> : (read elements in annotation of SBML L2)
 *              </li>
 *              <li> <code> writeElements() </code> : (write elements)
 *              </li>
 *           </ul>
 *       </li>
 * <p>
 *        <li> <p>
 *             The following virtual functions of internal implementations
 *             are overridden: (type of arguments and return values are omitted)
 *            </p>  
 *            <ul>
 *              <li> <code> setSBMLDocument() </code> 
 *              </li>
 *              <li> <code> connectToParent() </code>
 *              </li>
 *              <li> <code> enablePackageInternal() </code>
 *              </li>
 *            </ul>
 *        </li>
 * <p>
 * <p>
 *        <li> <p>
 *             The following creating/getting/manipulating functions are newly 
 *             implemented: (type of arguments and return values are omitted)
 *            </p>
 *            <ul>
 *              <li> <code> getListOfLayouts() </code>
 *              </li>
 *              <li> <code> getLayout ()  </code>
 *              </li>
 *              <li> <code> addLayout() </code>
 *              </li>
 *              <li> <code> createLayout() </code>
 *              </li>
 *              <li> <code> removeLayout() </code>
 *              </li>	   
 *              <li> <code> getNumLayouts() </code>
 *              </li>
 *           </ul>
 *        </li>
 * <p>
 *    </ul>
 *  </li>
 * <p>
 *  <li> <p>LayoutSpeciesReferencePlugin class for {@link SpeciesReference} element (used only for SBML L2V1) </p>
 * <p>
 *      <ul>
 *        <li>
 *         <em> id </em> attribute is internally added to {@link SpeciesReference} object
 *          only for SBML L2V1 
 *        </li>
 * <p>
 *        <li>
 *         The following virtual functions for reading/writing/checking
 *          are overridden: (type of arguments and return values are omitted)
 *        </li>
 * <p>
 *         <ul>
 *          <li>
 *          <code> readOtherXML() </code>
 *          </li>
 *          <li>
 *          <code> writeAttributes() </code>
 *          </li>
 *        </ul>
 *      </ul>
 *    </li>
 * </ol>
 * <p>
 */
"

%javamethodmodifiers SBasePlugin::getURI() const "
  /**
   * Returns the XML namespace (URI) of the package extension
   * of this plugin object.
   * <p>
   * @return the URI of the package extension of this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::getPrefix() const "
  /**
   * Returns the prefix of the package extension of this plugin object.
   * <p>
   * @return the prefix of the package extension of this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::getPackageName() const "
  /**
   * Returns the package name of this plugin object.
   * <p>
   * @return the package name of this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SBasePlugin} object.
   * <p>
   * @return a (deep) copy of this {@link SBase} object
   */
 public";


%javamethodmodifiers SBasePlugin::setSBMLDocument(SBMLDocument* d) "
  /**
   * Sets the parent {@link SBMLDocument} of this plugin object.
   * <p>
   * Subclasses which contain one or more {@link SBase} derived elements must
   * override this function.
   * <p>
   * @param d the {@link SBMLDocument} object to use
   * <p>
   * @see connectToParent
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::connectToParent(SBase *sbase) "
  /**
   * Sets the parent SBML object of this plugin object to
   * this object and child elements (if any).
   * (Creates a child-parent relationship by this plugin object)
   * <p>
   * This function is called when this object is created by
   * the parent element.
   * Subclasses must override this this function if they have one
   * or more child elements. Also, {@link SBasePlugin#connectToParent(SBase sbase)}
   * must be called in the overridden function.
   * <p>
   * @param sbase the {@link SBase} object to use
   * <p>
   * @see setSBMLDocument
   * @see enablePackageInternal
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::enablePackageInternal(const std::string& pkgURI, const std::string& pkgPrefix, bool flag) "
  /**
   * Enables/Disables the given package with child elements in this plugin 
   * object (if any).
   * (This is an internal implementation invoked from 
   *  {@link SBase#enablePakcageInternal()} function)
   * <p>
   * Subclasses which contain one or more {@link SBase} derived elements should 
   * override this function if elements defined in them can be extended by
   * some other package extension.
   * <p>
   * @see setSBMLDocument
   * @see connectToParent
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::getSBMLDocument "
  /**
   * Returns the parent {@link SBMLDocument} of this plugin object.
   * <p>
   * @return the parent {@link SBMLDocument} object of this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::getSBMLDocument() const "
  /**
   * Returns the parent {@link SBMLDocument} of this plugin object.
   * <p>
   * @return the parent {@link SBMLDocument} object of this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::getParentSBMLObject "
  /**
   * Returns the parent {@link SBase} object to which this plugin 
   * object connected.
   * <p>
   * @return the parent {@link SBase} object to which this plugin 
   * object connected.
   */
 public";


%javamethodmodifiers SBasePlugin::getParentSBMLObject() const "
  /**
   * Returns the parent {@link SBase} object to which this plugin 
   * object connected.
   * <p>
   * @return the parent {@link SBase} object to which this plugin 
   * object connected.
   */
 public";


%javamethodmodifiers SBasePlugin::getLevel() const "
  /**
   * Returns the SBML level of the package extension of 
   * this plugin object.
   * <p>
   * @return the SBML level of the package extension of
   * this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::getVersion() const "
  /**
   * Returns the SBML version of the package extension of
   * this plugin object.
   * <p>
   * @return the SBML version of the package extension of
   * this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::getPackageVersion() const "
  /**
   * Returns the package version of the package extension of
   * this plugin object.
   * <p>
   * @return the package version of the package extension of
   * this plugin object.
   */
 public";


%javamethodmodifiers SBasePlugin::SBasePlugin(const std::string &uri, const std::string &prefix, SBMLNamespaces *sbmlns) "
  /**
   * Constructor. Creates an {@link SBasePlugin} object with the URI and 
   * prefix of an package extension.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::SBasePlugin(const SBasePlugin& orig) "
  /**
   * Copy constructor. Creates a copy of this {@link SBase} object.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::getErrorLog "
  /**
   * @return the {@link SBMLErrorLog} used to log errors during while reading and
   * validating SBML.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::logUnknownElement(const std::string &element, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion ) "
  /**
   * Helper to log a common type of error for elements.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::logUnknownAttribute(const std::string &attribute, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion, const std::string& element) "
  /**
   * Helper to log a common type of error.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBasePlugin::logEmptyString(const std::string &attribute, const unsigned int sbmlLevel, const unsigned int sbmlVersion, const unsigned int pkgVersion, const std::string& element) "
  /**
   * Helper to log a common type of error.
   <p>
 * @deprecated libSBML internal
 */
 public";


%javamethodmodifiers SBMLDocumentPlugin::SBMLDocumentPlugin(const std::string &uri, const std::string &prefix, SBMLNamespaces *sbmlns) "
  /**
   *  Constructor
   * <p>
   * @param uri the URI of package 
   * @param prefix the prefix for the given package
   * @param sbmlns the {@link SBMLNamespaces} object for the package
   */
 public";


%javamethodmodifiers SBMLDocumentPlugin::SBMLDocumentPlugin(const SBMLDocumentPlugin& orig) "
  /**
   * Copy constructor. Creates a copy of this object.
   */
 public";


%javamethodmodifiers SBMLDocumentPlugin::clone() const "
  /**
   * Creates and returns a deep copy of this {@link SBMLDocumentPlugin} object.
   * <p>
   * @return a (deep) copy of this object
   */
 public";


%javamethodmodifiers SBMLDocumentPlugin::getRequired() const "
  /**
   * <p>
   * Returns the bool value of \'required\' attribute of corresponding 
   * package in {@link SBMLDocument} element.
   * <p>
   * @return the bool value of \'required\' attribute of corresponding
   * package in {@link SBMLDocument} element.
   */
 public";


%javamethodmodifiers SBMLDocumentPlugin::setRequired(bool value) "
  /**
   * <p>
   * Sets the bool value of \'required\' attribute of corresponding package
   * in {@link SBMLDocument} element.
   * <p>
   * @param value the bool value of \'required\' attribute of corresponding 
   * package in {@link SBMLDocument} element.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values
   * returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_UNEXPECTED_ATTRIBUTE LIBSBML_UNEXPECTED_ATTRIBUTE }
   */
 public";


%typemap(javaimports) SBMLExtension "
/** 
 * The core component of SBML\'s package extension.
 * <p>
 * {@link SBMLExtension} class (abstract class) is a core component of package extension
 * which needs to be extended by package developers. 
 * The class provides functions for getting common attributes of package extension 
 * (e.g., package name, package version, and etc.), functions for adding (registering) 
 * each instantiated {@link SBasePluginCreator} object, and a static function (defined in each 
 * {@link SBMLExtension} extended class) for initializing/registering the package extension 
 * when the library of the package is loaded.
 * <p>
 * <h2>How to implement an {@link SBMLExtension} extended class for each package extension</h2>
 * <p>
 * Package developers must implement an {@link SBMLExtension} extended class for
 * their packages (e.g. GroupsExtension class is implemented for groups extension).
 * The extended class is implemented based on the following steps:
 * <p>
 * (NOTE: 
 *   \'src/pacakges/groups/extension/GroupsExtension.{h,cpp}\' and
 *   \'src/pacakges/layout/extension/LayoutExtension.{h,cpp}\' are
 *   example files in which {@link SBMLExtension} derived classes are implemented)
 * <p>
 * <ol>
 * <p>
 * <li> Define the following static functions in the extended class:
 *      (examples of groups extension are shown respectively)
 *   <ol>
 *     <li> <p>A string of package name (label) (The function name must be \'getPackageName\'.)</p>
 * <p>
<div class=\'fragment\'><pre>
  String {@link GroupsExtension#getPackageName ()}
  {
	static String pkgName = \'groups\';
	return pkgName;
  }
</pre></div>
 *     </li>
 * <p>
 *     <li> <p>
 *        Methods returning an integer of Default SBML level, version, and package version
 *        (The method names must be \'getDefaultLevel()\', \'getDefaultVersion()\', and 
 *        \'getDefaultPackageVersion()\' respectively.)
 *        </p>
<div class=\'fragment\'><pre>
  long {@link GroupsExtension#getDefaultLevel()}
  {
	return 3;
  }  
  long {@link GroupsExtension#getDefaultVersion()}
  {
	return 1; 
  }
  long {@link GroupsExtension#getDefaultPackageVersion()}
  {
	return 1;
  }  
</pre></div>
 *     </li>
 *     <li> <p> Methods returning Strings that represent the URI of packages </p>
<div class=\'fragment\'><pre>
  String {@link GroupsExtension#getXmlnsL3V1V1 ()}
  {
	static String xmlns = \'http://www.sbml.org/sbml/level3/version1/groups/version1\';
	return xmlns;
  }
</pre></div> 
 *     </li>
 *     <li> <p>Strings that represent the other URI needed in this package (if any) </p>
 *     </li>
 *   </ol> 
 * </li>
 * <p>
 * <li> Override the following pure virtual functions
      <ul>
       <li> <code>virtual String getName () const =0</code>. This function returns the name of the package (e.g., \'layout\', \'groups\'). </li>
       <li> <code>virtual long getLevel (String uri) const =0</code>. This function returns the SBML level with the given URI of this package. </li>
       <li> <code>virtual long getVersion (String uri) const =0</code>. This function returns the SBML version with the given URI of this package. </li>
       <li> <code>virtual long getPackageVersion (String uri) const =0</code>. This function returns the package version with the given URI of this package.</li>
       <li> <code>virtual long getURI (long sbmlLevel, long sbmlVersion, long pkgVersion) const =0</code>. 
             This function returns the URI (namespace) of the package corresponding to the combination of the given sbml level, sbml version, and pacakege version</li>
       <li> <code>virtual {@link SBMLExtension} clone () const = 0</code>. This function creates and returns a deep copy of this derived object.</li>
      </ul>
      <p>For example, the above functions are overridden in the groups
	package (\'src/packages/groups/extension/GroupsExtension.cpp\') as follows:</p>
<div class=\'fragment\'><pre>
String
{@link GroupsExtension#getName()} const
{
  return getPackageName();
}

long 
{@link GroupsExtension#getLevel(String uri)} const
{
  if (uri == getXmlnsL3V1V1())
  {
    return 3;
  }
  
  return 0;
}

long 
{@link GroupsExtension#getVersion(String uri)} const
{
  if (uri == getXmlnsL3V1V1())
  {
    return 1;
  }

  return 0;
}

long
{@link GroupsExtension#getPackageVersion(String uri)} const
{
  if (uri == getXmlnsL3V1V1())
  {
    return 1;
  }

  return 0;
}

String 
{@link GroupsExtension#getURI(long sbmlLevel, long sbmlVersion, long pkgVersion)} const
{
  if (sbmlLevel == 3)
  {
    if (sbmlVersion == 1)
    {
      if (pkgVersion == 1)
      {
        return getXmlnsL3V1V1();
      }
    }
  }

  static String empty = \'\';

  return empty;
}

GroupsExtension* 
{@link GroupsExtension#clone ()} const
{
  return new GroupsExtension(*this);  
}
</pre></div>
 * <p>
 * Constructor, copy Constructor, and destructor also must be overridden
 * if additional data members are defined in the derived class.
 * <p>
 * </li>
 * <p>
 * <li> <p>
 *  Define typedef and template instantiation code for the package specific {@link SBMLExtensionNamespaces} template class
 *  </p>
 * <p>
 *   <ol>
 *     <li> typedef for the package specific {@link SBMLExtensionNamespaces} template class
 *       <p> For example, the typedef for GroupsExtension (defined in the groups package) is implemented in GroupsExtension.h as follows:</p>
<div class=\'fragment\'><pre>
  // GroupsPkgNamespaces is derived from the {@link SBMLNamespaces} class and used when creating an object of 
  // {@link SBase} derived classes defined in groups package.
  typedef {@link SBMLExtensionNamespaces}&lt;GroupsExtension&gt; GroupsPkgNamespaces;
</pre></div>
 *     </li>
 * <p>
 *     <li> template instantiation code for the above typedef definition in the implementation file (i.e., *.cpp file).
 *       <p> For example, the template instantiation code for GroupsExtension is implemented in GroupsExtension.cpp 
 *           as follows:
 *       </p>
 * <p>
<div class=\'fragment\'><pre>
  // Instantiate {@link SBMLExtensionNamespaces}&lt;GroupsExtension&gt; (GroupsPkgNamespaces) for DLL.
  template class LIBSBML_EXTERN {@link SBMLExtensionNamespaces}&lt;GroupsExtension&gt;;
</pre></div>
 * <p>
 *     </li>
 *  </ol>
 * <p>
 *  <p> The {@link SBMLExtensionNamespaces} template class is a derived class of
 *      {@link SBMLNamespaces} and can be used as an argument of constructors 
 *      of {@link SBase} derived classes defined in the package extensions.
 *      For example, a GroupsPkgNamespaces object can be used when creating a group 
 *      object as follows:
 *  </P>
<div class=\'fragment\'><pre>
   GroupPkgNamespaces gpns(3,1,1);  // The arguments are SBML Level, SBML Version, and Groups Package Version.

   Group g = new Group(&gpns);      // Creates a group object of L3V1 Groups V1.
</pre></div>
 * <p>
 *   <p>
 *     Also, the GroupsPkgNamespaces object can be used when creating an
 *     {@link SBMLDocument} object with the groups package as follows:
 *   </p>
 * <p>
<div class=\'fragment\'><pre>
   GroupsPkgNamespaces gpns(3,1,1);
   {@link SBMLDocument} doc;

   doc  = new {@link SBMLDocument}(&gnps); // Creates an {@link SBMLDocument} of L3V1 with Groups V1.
</pre></div>
 * <p>
 * </li>
 * <p>
 * <li> Override the following pure virtual function which returns the {@link SBMLNamespaces} derived object 
<div class=\'fragment\'><pre>
       virtual {@link SBMLNamespaces} getSBMLExtensionNamespaces (String uri) const =0
</pre></div>
 *    <p> For example, the function is overridden in GroupsExtension
 class as follows:</p>
<div class=\'fragment\'><pre>
{@link SBMLNamespaces}
{@link GroupsExtension#getSBMLExtensionNamespaces(String uri)} const
{
  GroupsPkgNamespaces* pkgns = null;
  if ( uri == getXmlnsL3V1V1())
  {
    pkgns = new GroupsPkgNamespaces(3,1,1);    
  }  
  return pkgns;
}
</pre></div>
   </li>
 * <p>
 * <p>
 *  <li> Define an enum type for representing the typecode of elements (SBase extended classes) defined in the package extension
 * <p>
 *   <p>  For example, SBMLGroupsTypeCode_t for groups package is
 *  defined in GroupsExtension.h as follows: </p>
<div class=\'fragment\'><pre>
      typedef enum
      {
         SBML_GROUPS_GROUP  = 200
       , SBML_GROUPS_MEMBER = 201
      } SBMLGroupsTypeCode_t;
</pre></div>    
 * <p>
 *  <p> <em>SBML_GROUPS_GROUP</em> corresponds to the Group class (&lt;group&gt;)
 * and <em>SBML_GROUPS_MEMBER</em> corresponds to the Member (&lt;member&gt;) class, respectively.
 * <p>
 * <p>
 *  <p> Similarly, SBMLLayoutTypeCode_t 
 *   for layout package is defined in LayoutExtension.h as follows: </p>
 * <p>
<div class=\'fragment\'><pre>
      typedef enum
      {
         SBML_LAYOUT_BOUNDINGBOX           = 100
       , SBML_LAYOUT_COMPARTMENTGLYPH      = 101
       , SBML_LAYOUT_CUBICBEZIER           = 102
       , SBML_LAYOUT_CURVE                 = 103
       , SBML_LAYOUT_DIMENSIONS            = 104
       , SBML_LAYOUT_GRAPHICALOBJECT       = 105
       , SBML_LAYOUT_LAYOUT                = 106   
       , SBML_LAYOUT_LINESEGMENT           = 107   
       , SBML_LAYOUT_POINT                 = 108    
       , SBML_LAYOUT_REACTIONGLYPH         = 109    
       , SBML_LAYOUT_SPECIESGLYPH          = 110    
       , SBML_LAYOUT_SPECIESREFERENCEGLYPH = 111
       , SBML_LAYOUT_TEXTGLYPH             = 112
      } SBMLLayoutTypeCode_t;
</pre></div>
 * <p>
 *  <p>
 *   These enum values are returned by corresponding getTypeCode() functions.
 *   (e.g. SBML_GROUPS_GROUP is returned in {@link Group#getTypeCode()})
 *  </p>
 * <p>
 *  <p>
 *   The value of each typecode can be duplicated between those of different 
 *   packages (In the above SBMLayoutTypeCode_t and SBMLGroupsTypeCode_t types, 
 *   unique values are assigned to enum values, but this is not mandatory.)
 *  </p>
 * <p>
 *  <p>
 *   Thus, to distinguish the typecodes of different packages, not only the return
 *   value of getTypeCode() function but also that of getPackageName()
 *   function should be checked as follows:
 *  </p>
<div class=\'fragment\'><pre>
          void example (SBase sb)
          {
            String pkgName = sb-&gt;getPackageName();
            if (pkgName == \'core\') {
              switch (sb-&gt;getTypeCode()) {
                case SBML_MODEL:
                   ....
                   break;
                case SBML_REACTION:
                   ....
              }
            } 
            else if (pkgName == \'layout\') {
              switch (sb-&gt;getTypeCode()) {
                case SBML_LAYOUT_LAYOUT:
                   ....
                   break;
                case SBML_LAYOUT_REACTIONGLYPH:
                   ....
              }
            } 
            else if (pkgName == \'groups\') {
              switch (sb-&gt;getTypeCode()) {
                case SBML_GROUPS_GROUP:
                   ....
                   break;
                case SBML_GROUPS_MEMBER:
                   ....
              }
            }
            ...
          } 
</pre></div>
 * <p>
 *  </li>
 *  <li> Override the following pure virtual function which returns a string corresponding to the given typecode:
 * <p>
<div class=\'fragment\'><pre>
       virtual String {@link SBMLExtension#getStringFromTypeCode(int typeCode)} const;
</pre></div> 
 * <p>
 *   <p> For example, the function for groups extension is implemented as follows: </p>
<div class=\'fragment\'><pre>
static
String SBML_GROUPS_TYPECODE_STRINGS[] =
{
    \'Group\'
  , \'Member\'
};

String 
{@link GroupsExtension#getStringFromTypeCode(int typeCode)} const
{
  int min = SBML_GROUPS_GROUP;
  int max = SBML_GROUPS_MEMBER;

  if ( typeCode &lt; min || typeCode &gt; max)
  {
    return \'(Unknown SBML Groups Type)\';  
  }

  return SBML_GROUPS_TYPECODE_STRINGS[typeCode - min];
}
</pre></div> 
 * <p>
 *  </li>
 * <p>
 * <li> Implements a \'static void init()\' function in the derived class
 * <p>
 * <p> In the init() function, initialization code which creates an instance of 
 *     the derived class and registering code which registers the instance to 
 *     {@link SBMLExtensionRegistry} class are implemented.
 * </p>
 * <p>
 * For example, the init() function for groups package is implemented as follows: 
<div class=\'fragment\'><pre>
void 
{@link GroupsExtension#init()}
{
  //-------------------------------------------------------------------------
  //
  // 1. Checks if the groups pacakge has already been registered.
  //
  //-------------------------------------------------------------------------

  if {@link (SBMLExtensionRegistry#getInstance()}.isRegistered(getPackageName()))
  {
    // do nothing;
    return;
  }

  //-------------------------------------------------------------------------
  //
  // 2. Creates an {@link SBMLExtension} derived object.
  //
  //-------------------------------------------------------------------------

  GroupsExtension groupsExtension;

  //-------------------------------------------------------------------------------------
  //
  // 3. Creates {@link SBasePluginCreatorBase} derived objects required for this 
  //    extension. The derived classes can be instantiated by using the following 
  //     template class.
  //
  //    temaplate&lt;class SBasePluginType&gt; class {@link SBasePluginCreator}
  //
  //    The constructor of the creator class has two arguments:
  //
  //        (1) {@link SBaseExtensionPoint} : extension point to which the plugin object connected
  //        (2) std.vector&lt;String&gt; : a std.vector object that contains a list of URI
  //                                       (package versions) supported by the plugin object.
  //
  //    For example, two plugin objects (plugged in {@link SBMLDocument} and {@link Model} elements) are 
  //    required for the groups extension.
  //
  //    Since only \'required\' attribute is used in {@link SBMLDocument} by the groups package, existing
  //    {@link SBMLDocumentPlugin} class can be used as-is for the plugin.
  //
  //    Since the lists of supported package versions (currently only L3V1-groups-V1 supported )
  //    are equal in the both plugin objects, the same vector object is given to each 
  //    constructor.
  //
  //---------------------------------------------------------------------------------------

  std.vector&lt;String&gt; packageURIs;
  packageURIs.push_back(getXmlnsL3V1V1());

  {@link SBaseExtensionPoint} sbmldocExtPoint(\'core\',SBML_DOCUMENT);
  {@link SBaseExtensionPoint} modelExtPoint(\'core\',SBML_MODEL);

  {@link SBasePluginCreator}&lt;{@link SBMLDocumentPlugin}, GroupsExtension&gt; sbmldocPluginCreator(sbmldocExtPoint,packageURIs);
  {@link SBasePluginCreator}&lt;GroupsModelPlugin,   GroupsExtension&gt; modelPluginCreator(modelExtPoint,packageURIs);

  //--------------------------------------------------------------------------------------
  //
  // 3. Adds the above {@link SBasePluginCreatorBase} derived objects to the {@link SBMLExtension} derived object.
  //
  //--------------------------------------------------------------------------------------

  groupsExtension.addSBasePluginCreator(&sbmldocPluginCreator);
  groupsExtension.addSBasePluginCreator(&modelPluginCreator);

  //-------------------------------------------------------------------------
  //
  // 4. Registers the {@link SBMLExtension} derived object to {@link SBMLExtensionRegistry}
  //
  //-------------------------------------------------------------------------

  int result = {@link SBMLExtensionRegistry#getInstance()}.addExtension(&groupsExtension);

  if (result != LIBSBML_OPERATION_SUCCESS)
  {
    std.cerr &lt;&lt; \'[Error] {@link GroupsExtension#init()} failed.\' &lt;&lt; std.endl;
  }
}
</pre></div>
 *    </p> 
 * </li>
 * <p>
 * <li> Instantiate a global {@link SBMLExtensionRegister} variable in appropriate 
 *      implementation file
 * <p>
 * <p> For example, the global variable for the groups extension is instantiated in GroupsExtension.cpp as follows: </p>
<div class=\'fragment\'><pre>
  static {@link SBMLExtensionRegister}&lt;GroupsExtension&gt; groupsExtensionRegister;
</pre></div>
 *    The init() function is invoked when the global variable is instantiated,
 *    by which initialization and registering the package extension are performed.
 * </li>
 * <p>
 * <p>
 * </ol>
 * <p>
 */
"

%javamethodmodifiers SBMLExtension::SBMLExtension "
  /**
   * Constructor.
   */
 public";


%javamethodmodifiers SBMLExtension::SBMLExtension(const SBMLExtension&) "
  /**
   * Copy constructor.
   */
 public";


%javamethodmodifiers SBMLExtension::getNumOfSBasePlugins() const "
  /**
   * Returns the number of {@link SBasePlugin} objects stored in this object.
   * <p>
   * @return the number of {@link SBasePlugin} objects stored in this object.
   */
 public";


%javamethodmodifiers SBMLExtension::getNumOfSupportedPackageURI() const "
  /**
   * Returns the number of supported package Namespace (package versions) of this 
   * package extension.
   * <p>
   * @return the number of supported package Namespace (package versions) of this 
   * package extension.
   */
 public";


%javamethodmodifiers SBMLExtension::isSupported(const std::string& uri) const "
  /**
   * Returns a flag indicating, whether the given URI (package version) is 
   * supported by this package extension.
   * <p>
   * @return true if the given URI (package version) is supported by this 
   * package extension, otherwise false is returned.
   */
 public";


%javamethodmodifiers SBMLExtension::getSupportedPackageURI "
  /**
   * <p>
   * Returns the ith URI (the supported package version)
   * <p>
   * @param i the index of the list of URI (the list of supporeted pacakge versions)
   * @return the URI of supported package version with the given index.
   */
 public";


%javamethodmodifiers SBMLExtension::clone() const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * Creates and returns a deep copy of this {@link SBMLExtension} object.
   * <p>
   * @return a (deep) copy of this {@link SBase} object
   */
 public";


%javamethodmodifiers SBMLExtension::getName() const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * Returns the name of this package (e.g. \'layout\', \'multi\').
   * <p>
   * @return the name of package extension
   */
 public";


%javamethodmodifiers SBMLExtension::getURI "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * Returns the uri corresponding to the given SBML level, SBML version, and package version.
   * <p>
   * @param sbmlLevel the level of SBML
   * @param sbmlVersion the version of SBML
   * @param pkgVersion the version of package
   * <p>
   * @return a string of the package URI
   */
 public";


%javamethodmodifiers SBMLExtension::getLevel(const std::string &uri) const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * Returns the SBML level associated with the given URI of this package.
   * <p>
   * @param uri the string of URI that represents a versions of the package
   * @return the SBML level associated with the given URI of this package.
   */
 public";


%javamethodmodifiers SBMLExtension::getVersion(const std::string &uri) const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * Returns the SBML version associated with the given URI of this package.
   * <p>
   * @param uri the string of URI that represents a versions of the package
   * @return the SBML version associated with the given URI of this package.
   */
 public";


%javamethodmodifiers SBMLExtension::getPackageVersion(const std::string &uri) const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * Returns the package version associated with the given URI of this package.
   * <p>
   * @param uri the string of URI that represents a versions of this package
   * @return the package version associated with the given URI of this package.
   */
 public";


%javamethodmodifiers SBMLExtension::getStringFromTypeCode(int typeCode) const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function 
   *           in their derived class.
   * <p>
   * This method takes a type code of this package and returns a string 
   * representing the code.
   */
 public";


%javamethodmodifiers SBMLExtension::getSBMLExtensionNamespaces(const std::string &uri) const "
  /**
   *  (NOTICE) Package developers MUST OVERRIDE this pure virtual function in 
   *           their derived class.
   * <p>
   * Returns an {@link SBMLExtensionNamespaces}<class SBMLExtensionType> object 
   * (e.g. {@link SBMLExtensionNamespaces}<LayoutExtension> whose alias type is 
   * LayoutPkgNamespaces) corresponding to the given uri.
   * Null will be returned if the given uri is not defined in the corresponding 
   * package.
   * <p>
   * @param uri the string of URI that represents one of versions of the package
   * @return an {@link SBMLExtensionNamespaces}<class SBMLExtensionType> object. null
   *         will be returned if the given uri is not defined in the corresponding 
   *         package. 
   */
 public";


%javamethodmodifiers SBMLExtension::setEnabled(bool isEnabled) "
  /**
   * enable/disable this package.
   * Returned value is the result of this function.
   * <p>
   * @param isEnabled the bool value: true (enabled) or false (disabled)
   * <p>
   * @return true if this function call succeeded, otherwise false is returned.
   */
 public";


%javamethodmodifiers SBMLExtension::isEnabled() const "
  /**
   * Check if this package is enabled (true) or disabled (false).
   * <p>
   * @return true if this package is enabled, otherwise false is returned.
   */
 public";


%javamethodmodifiers SBMLExtensionException::SBMLExtensionException(const std::string& errmsg) throw() "
  /** 
   * constructor 
   */
 public";


%typemap(javaimports) SBMLExtensionNamespaces "
/** 
 * Class to store level, version and namespace information of SBML extension
 *        package.
 * <p>
 */
"

%javamethodmodifiers SBMLExtensionNamespaces::SBMLExtensionNamespaces(unsigned int level        = SBMLExtensionType::getDefaultLevel(), unsigned int version      = SBMLExtensionType::getDefaultVersion(), unsigned int pkgVersion   = SBMLExtensionType::getDefaultPackageVersion(), const std::string& prefix = SBMLExtensionType::getPackageName()) "
  /**
   * Creates a new {@link SBMLExtensionNamespaces} object corresponding to the given SBML
   * <code>level</code>, <code>version</code> and <code>package</code> version.
   * <p>
   * @note {@link SBMLExtensionException} will be thrown if the extension module
   *       that supports the combination of the given sbml level, sbml version, 
   *       package name, and package version has not been registered.
   * <p>
   * @param level   the SBML level
   * @param version the SBML version
   * @param pkgVersion the package version
   * @param prefix  the prefix of the package namespace (e.g. \'layout\', \'multi\') 
   *        to be added. The package\'s name will be used if the given string is empty 
   *        (default).
   */
 public";


%javamethodmodifiers SBMLExtensionNamespaces::SBMLExtensionNamespaces(const SBMLExtensionNamespaces& orig) "
  /**
   * Copy constructor; creates a copy of a {@link SBMLExtensionNamespaces}.
   * <p>
   * @param orig the {@link SBMLExtensionNamespaces} instance to copy.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::getInstance "
  /**
   * <p>
   * Returns an instance (singleton) of the {@link SBMLExtensionRegistry} class.
   * This function needs to be invoked when manipulating the {@link SBMLExtensionRegistry} class. 
   * <p>
   * @return the instance of the {@link SBMLExtensionRegistry} object.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::addExtension(const SBMLExtension* ext) "
  /**
   * Add the given {@link SBMLExtension} to this {@link SBMLExtensionRegistry}.
   * <p>
   * @param ext the {@link SBMLExtension} object to be added.
   * <p>
   * @return integer value indicating success/failure of the
   * function.  The possible values returned by this function are:
   * <li> {@link  libsbmlConstants#LIBSBML_OPERATION_SUCCESS LIBSBML_OPERATION_SUCCESS }
   * <li> {@link  libsbmlConstants#LIBSBML_PKG_CONFLICT LIBSBML_PKG_CONFLICT }
   * <li> {@link  libsbmlConstants#LIBSBML_INVALID_ATTRIBUTE_VALUE LIBSBML_INVALID_ATTRIBUTE_VALUE }
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::getExtension(const std::string& package) "
  /**
   * Returns an {@link SBMLExtension} object with the given package URI or package name (string).
   * <p>
   * @param package the URI or name of the package extension
   * <p>
   * @return a clone of the {@link SBMLExtension} object with the given package URI or name. The returned 
   *         extension is to be freed (i.e.: deleted) by the caller!
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::getExtensionInternal(const std::string& package) "
  /**
   * Returns an {@link SBMLExtension} object with the given package URI or package name (string).
   * <p>
   * @param package the URI or name of the package extension
   * <p>
   * @return the {@link SBMLExtension} object with the given package URI or name. The returned 
   *         extension is NOT ALLOWED to be freed (i.e.: deleted)!
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::getNumExtension(const SBaseExtensionPoint& extPoint) "
  /**
   * Returns the number of {@link SBMLExtension} with the given extension point.
   * <p>
   * @param extPoint the {@link SBaseExtensionPoint}
   * <p>
   * @return the number of {@link SBMLExtension} with the given extension point.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::setEnabled(const std::string& uri, bool isEnabled) "
  /**
   * Enable/disable the package with the given uri.
   * <p>
   * @param uri the URI of the target package.
   * @param isEnabled the bool value corresponding to enabled (true) or 
   * disabled (false)
   * <p>
   * @return false will be returned if the given bool value is false 
   * or the given package is not registered, otherwise true will be
   * returned.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::isEnabled(const std::string& uri) "
  /**
   * Checks if the extension with the given URI is enabled (true) or 
   * disabled (false)
   * <p>
   * @param uri the URI of the target package.
   * <p>
   * @return false will be returned if the given package is disabled 
   * or not registered, otherwise true will be returned.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::isRegistered(const std::string& uri) "
  /**
   * Checks if the extension with the given URI is registered (true) 
   * or not (false)
   * <p>
   * @param uri the URI of the target package.
   * <p>
   * @return true will be returned if the package with the given URI
   * is registered, otherwise false will be returned.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::SBMLExtensionRegistry "
  /**
   * Checks if the extension with the given URI is registered (true) 
   * or not (false)
   * <p>
   * @param uri the URI of the target package.
   * <p>
   * @return true will be returned if the package with the given URI
   * is registered, otherwise false will be returned.
   */
 public";


%javamethodmodifiers SBMLExtensionRegistry::SBMLExtensionRegistry(const SBMLExtensionRegistry&) "
  /**
   * Checks if the extension with the given URI is registered (true) 
   * or not (false)
   * <p>
   * @param uri the URI of the target package.
   * <p>
   * @return true will be returned if the package with the given URI
   * is registered, otherwise false will be returned.
   */
 public";


%typemap(javaimports) OStream "
/** 
 * Wrapper class for the C++ standard streams <code>cout</code>,
 * <code>cerr</code>, and <code>clog</code>.
 * <p>
 * A few libSBML methods accept an argument for indicating where to send
 * text string output.  An example is the {@link SBMLDocument#printErrors(OStream
 * stream)} method. However, the methods use C++ style streams and not Java
 * stream objects.  The {@link OStream} object exists to bridge the Java and
 * underlying native implementation.  It is a simple wrapper around the
 * underlying stream object and provides a few basic methods for
 * manipulating it.
 * <p>
 */
"

%typemap(javaimports) OFStream "
/** 
 * Wrapper class for the C++ standard file stream <code>ofstream</code>.
 * <p>
 * The C++ <code>ofstream</code> (\'output file stream\') provides an
 * interface for writing data to files as output streams.  This class,
 * {@link OFStream}, wraps the C++ <code>ofstream</code> and provides an {@link OStream}
 * interface to it.  The file to be associated with the stream can be
 * specified as a parameter to the constructors in this class.
 * <p>
 * This class may be useful because some libSBML methods accept an argument
 * for indicating where to send text string output.  An example is the
 * {@link SBMLDocument#printErrors(OStream stream)} method.  The methods use C++ style streams
 * and not Java stream objects.  The {@link OStream} object exists to bridge the
 * Java and underlying native implementation.  It is a simple wrapper
 * around the underlying stream object and provides a few basic methods for
 * manipulating it.
 * <p>
 */
"

%typemap(javaimports) OStringStream "
/** 
 * Wrapper class for the C++ standard stream <code>ostringstream</code>.
 * <p>
 * The C++ <code>ostringstream</code> (\'output string stream class\')
 * provides an interface to manipulating strings as if they were output
 * streams.  This class class, {@link OStringStream}, wraps the
 * <code>ostringstream</code> and provides an {@link OStream} interface to it.
 * <p>
 * This class may be useful because some libSBML methods accept an argument
 * for indicating where to send text string output.  An example is the 
 * {@link SBMLDocument#printErrors(OStream stream)} method.  The methods use
 * C++ style streams and not Java stream objects.  The {@link OStream} object
 * exists to bridge the Java and underlying native implementation.  It is a
 * simple wrapper around the underlying stream object and provides a few
 * basic methods for manipulating it.
 */
"

%javamethodmodifiers OStream::OStream(StdOSType sot = COUT) "
    /**
      * Creates a new {@link OStream} object with one of standard output stream objects.
      * <p>
      * @param sot a value from the StdOSType enumeration(COUT, CERR, or CLOG) 
			* indicating the type of stream to create.
      */
 public";


%javamethodmodifiers OStream::get_ostream "
    /**
     * Returns the stream object.
     * <p>
     * @return the stream object
     */
 public";


%javamethodmodifiers OStream::endl "
    /**
     * Writes an end-of-line character on this tream.
     */
 public";


%javamethodmodifiers OFStream::OFStream(const std::string& filename, bool is_append = false) "
    /**
     * Creates a new {@link OFStream} object for a file.
     * <p>
     * This opens the given file <code>filename</code> with the <code>is_append</code> flag
     * (default is <code>false</code>), and creates an {@link OFStream} object
     * instance that associates the file\'s content with an {@link OStream} object.
     * <p>
     * @param filename the name of the file to open
     * @param is_append whether to open the file for appending (default:
     * <code>false</code>, meaning overwrite the content instead)
     * <p>
     * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

     */
 public";


%javamethodmodifiers OFStream::open(const std::string& filename, bool is_append = false) "
    /**
     * Opens a file and associates this stream object with it.
     * <p>
     * This method opens a given file <code>filename</code> with the given
     * <code>is_append</code> flag (whose default value is <code>false</code>),
     * and associates <i>this</i> stream object with the file\'s content.
     * <p>
     * @param filename the name of the file to open
     * @param is_append whether to open the file for appending (default:
     * <code>false</code>, meaning overwrite the content instead)
     * <p>
     * @docnote The native C++ implementation of this method defines a default argument
value. In the documentation generated for different libSBML language
bindings, you may or may not see corresponding arguments in the method
declarations. For example, in Java and C#, a default argument is handled by
declaring two separate methods, with one of them having the argument and
the other one lacking the argument. However, the libSBML documentation will
be <em>identical</em> for both methods. Consequently, if you are reading
this and do not see an argument even though one is described, please look
for descriptions of other variants of this method near where this one
appears in the documentation.

     */
 public";


%javamethodmodifiers OFStream::close "
    /**
     * Closes the file currently associated with this stream object.
     */
 public";


%javamethodmodifiers OFStream::is_open "
    /**
     * Returns <code>true</code> if this stream object is currently
     * associated with a file.
     * <p>
     * @return <code>true</code> if the stream object is currently
     * associated with a file, <code>false</code> otherwise
     */
 public";


%javamethodmodifiers OStringStream::OStringStream "
    /**
     * Creates a new {@link OStringStream} object
     */
 public";


%javamethodmodifiers OStringStream::str "
    /**
     * Returns the copy of the string object currently assosiated 
     * with this <code>ostringstream</code> buffer.
     * <p>
     * @return a copy of the string object for this stream
     */
 public";


%javamethodmodifiers OStringStream::str(const std::string& s) "
    /**
     * Sets string <code>s</code> to the string object currently assosiated with
     * this stream buffer.
     * <p>
     * @param s the string to write to this stream
     */
 public";


